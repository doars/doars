{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/utilities/Fetch.js", "../src/factories/contexts/fetch.js", "../src/DoarsFetch.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (\n  target,\n  ...sources\n) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\nexport const getDeeply = (\n  object,\n  path,\n) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\nexport const isObject = (\n  value,\n) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\nexport const setDeeply = (\n  object,\n  path,\n  value,\n) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "export const parseResponse = (\n  response,\n  type,\n) => {\n  let promise\n  switch (String.prototype.toLowerCase.call(type)) {\n    default:\n      console.warn('Unknown response type \"' + type + '\" used when using the $fetch context.')\n      break\n\n    case 'arraybuffer':\n      promise = response.arrayBuffer()\n      break\n\n    case 'blob':\n      promise = response.blob()\n      break\n\n    case 'formdata':\n      promise = response.formData()\n      break\n\n    case 'json':\n      promise = response.json()\n      break\n\n    // HTML and xml need to be converted to text before being able to be parsed.\n    case 'element':\n    case 'html':\n    case 'svg':\n    case 'text':\n    case 'xml':\n      promise = response.text()\n      break\n  }\n\n  if (!promise) {\n    return null\n  }\n\n  return promise\n    .then((\n      response,\n    ) => {\n      switch (type) {\n        // Convert from html to HTMLElement inside a document fragment.\n        case 'element':\n          const template = document.createElement('template')\n          template.innerHTML = response\n          response = template.content.childNodes[0]\n          break\n\n        // Parse some values via the DOM parser.\n        case 'html':\n          response = (new DOMParser()).parseFromString(response, 'text/html')\n          break\n        case 'svg':\n          response = (new DOMParser()).parseFromString(response, 'image/svg+xml')\n          break\n        case 'xml':\n          response = (new DOMParser()).parseFromString(response, 'application/xml')\n          break\n      }\n\n      return response\n    })\n}\n\nexport const responseType = (\n  response,\n) => {\n  switch (String.prototype.toLowerCase(response.headers.get('content-type'))) {\n    case 'text/html':\n      return 'html'\n\n    case 'application/json':\n    case 'application/ld+json':\n    case 'application/vnd.api+json':\n      return 'json'\n\n    case 'image/svg+xml':\n      return 'svg'\n\n    case 'text/plain':\n      return 'text'\n\n    case 'application/xml':\n    case 'text/xml':\n      return 'xml'\n  }\n\n  return null\n}\n", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js'\nimport { parseResponse, responseType } from '../../utilities/Fetch.js'\n\nexport default ({\n  fetchOptions,\n}) => ({\n  name: '$fetch',\n\n  create: (\n  ) => {\n    return {\n      value: (\n        url,\n        options = null,\n      ) => {\n        // Apply default options to init.\n        if (fetchOptions) {\n          options = deepAssign({}, fetchOptions, options)\n        }\n\n        // Extract optional return type.\n        let returnType = options.returnType ? options.returnType : null\n        delete options.returnType\n\n        // Perform and process fetch request.\n        return fetch(\n          url,\n          options,\n        )\n          .then((\n            response,\n          ) => {\n            // Automatically base return type on header.\n            if (returnType === 'auto' && response.headers.get('content-type')) {\n              returnType = responseType(response)\n            }\n\n            // Parse response based on return type.\n            if (returnType) {\n              response = parseResponse(response, returnType)\n            }\n\n            return response\n          })\n      },\n    }\n  },\n})\n", "// Import contexts.\nimport createFetchContext from './factories/contexts/fetch.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    fetchOptions: {},\n\n    encodingConverters: {\n      'application/json': () => { },\n      'application/x-www-form-urlencoded': () => { },\n      'multipart/formdata': () => { },\n    },\n  }, options)\n  if (options.defaultInit) {\n    Object.assign(options.fetchOptions, options.defaultInit)\n  }\n\n  // Set private variables.\n  let isEnabled = false\n  // Store contexts and directives.\n  let fetchContext\n\n  const onEnable = (\n  ) => {\n    // Create and add contexts and directives.\n    fetchContext = createFetchContext(options)\n    library.addContexts(0, fetchContext)\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove contexts and directives.\n    library.removeContexts(fetchContext)\n    fetchContext = null\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": ["response"]
}
