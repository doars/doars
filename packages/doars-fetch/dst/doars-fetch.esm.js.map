{
  "version": 3,
  "sources": ["../../common/src/utilities/Fetch.js", "../../common/src/utilities/Object.js", "../src/contexts/fetch.js", "../../common/src/utilities/Element.js", "../../common/src/utilities/Html.js", "../../common/src/utilities/String.js", "../../common/src/utilities/Attribute.js", "../../common/src/utilities/Transition.js", "../../common/src/utilities/Indicator.js", "../../common/src/utilities/Morph.js", "../../common/src/utilities/Promise.js", "../../common/src/utilities/Script.js", "../src/utilities/Xml.js", "../src/directives/fetch.js", "../src/DoarsFetch.js"],
  "sourcesContent": ["/**\n * Convert response to a desired type.\n * @param {Response} response The response to parse.\n * @param {string} type Simplified type name the data should be converted to.\n * @returns {Promise<any>} Resulting data.\n */\nexport const parseResponse = (\n  response,\n  type,\n) => {\n  let promise\n  switch (String.prototype.toLowerCase.call(type)) {\n    default:\n      console.warn('Unknown response type \"' + type + '\" used when using the $fetch context.')\n      break\n\n    case 'arraybuffer':\n      promise = response.arrayBuffer()\n      break\n\n    case 'blob':\n      promise = response.blob()\n      break\n\n    case 'formdata':\n      promise = response.formData()\n      break\n\n    case 'json':\n      promise = response.json()\n      break\n\n    // HTML and xml need to be converted to text before being able to be parsed.\n    case 'element':\n    case 'html':\n    case 'svg':\n    case 'text':\n    case 'xml':\n      promise = response.text()\n      break\n  }\n\n  if (!promise) {\n    return null\n  }\n\n  return promise\n    .then((\n      response,\n    ) => {\n      switch (type) {\n        // Convert from html to HTMLElement inside a document fragment.\n        case 'element':\n          const template = document.createElement('template')\n          template.innerHTML = response\n          response = template.content.childNodes[0]\n          break\n\n        // Parse some values via the DOM parser.\n        case 'html':\n          response = (new DOMParser()).parseFromString(response, 'text/html')\n          break\n        case 'svg':\n          response = (new DOMParser()).parseFromString(response, 'image/svg+xml')\n          break\n        case 'xml':\n          response = (new DOMParser()).parseFromString(response, 'application/xml')\n          break\n      }\n\n      return response\n    })\n}\n\n/**\n * Try and get the mime type of the response.\n * @param {Response} response Response to try and get the type from.\n * @param {Request} request Request the response originates from.\n * @returns {string} mime type.\n */\nexport const responseType = (\n  response,\n  request = null,\n) => {\n  // Check content type header.\n  let contentType = response.headers.get('Content-Type')\n  if (contentType) {\n    contentType = String.prototype.toLowerCase.call(contentType).split(';')[0]\n    const result = simplifyType(contentType.trim())\n    if (result) {\n      return result\n    }\n  }\n\n  // Check url extension.\n  let extension = response.url.split('.')\n  if (extension) {\n    extension = extension[extension.length - 1]\n    switch (extension) {\n      case 'htm':\n      case 'html':\n        return 'html'\n\n      case 'json':\n        return 'json'\n\n      case 'svg':\n        return 'svg'\n\n      case 'txt':\n        return 'text'\n\n      case 'xml':\n        return 'xml'\n    }\n  }\n\n  // Check accept type header.\n  if (request) {\n    let acceptTypes = request.headers.Accept\n    if (acceptTypes) {\n      acceptTypes = String.prototype.toLowerCase.call(acceptTypes).split(',')\n      for (let acceptType of acceptTypes) {\n        acceptType = acceptType.split(';')[0].trim()\n        const result = simplifyType(acceptType)\n        if (result) {\n          return result\n        }\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Simplify the mime type to single word.\n * @param {string} mimeType Mime type to simplify.\n * @returns {string} Simplified type.\n */\nexport const simplifyType = (\n  mimeType,\n) => {\n  switch (mimeType) {\n    case 'text/html':\n      return 'html'\n\n    case 'text/json':\n    case 'application/json':\n    case 'application/ld+json':\n    case 'application/vnd.api+json':\n      return 'json'\n\n    case 'image/svg+xml':\n      return 'svg'\n\n    case 'text/plain':\n      return 'text'\n\n    case 'application/xml':\n    case 'text/xml':\n      return 'xml'\n  }\n}\n\nconst cacheListeners = {}\n\n/**\n *\n * @param {string} url Fetch URL.\n * @param {Request} options Fetch options.\n * @param {string} returnType Simplified type name the data should be converted to.\n * @returns {Promise<any>} Resulting data.\n */\nexport const fetchAndParse = (\n  url,\n  options,\n  returnType,\n) => new Promise((\n  resolve,\n  reject,\n) => {\n  fetch(url, options)\n    .then((response) => {\n      if (\n        response.status < 200 ||\n        response.status >= 500\n      ) {\n        const listeners = cacheListeners[url.location]\n        delete cacheListeners[url.location]\n\n        reject(response)\n\n        // Reject other listeners as well.\n        for (const listener of listeners) {\n          listener.reject(response)\n        }\n        return\n      }\n\n      // Automatically base return type on header.\n      if (returnType === 'auto') {\n        returnType = responseType(response, options)\n      }\n      // Parse response based on return type.\n      if (returnType) {\n        response = parseResponse(response, returnType)\n      }\n      response\n        .then((responseValue) => {\n          // Add response to cache.\n          const result = {\n            headers: response.headers,\n            value: responseValue,\n          }\n\n          // Get other listeners.\n          const listeners = cacheListeners[url.location]\n          delete cacheListeners[url.location]\n\n          // Resolve promise.\n          resolve(result)\n\n          // Inform listeners of update.\n          if (listeners) {\n            for (const listener of listeners) {\n              listener.resolve(result)\n            }\n          }\n        })\n        .catch((error) => {\n          // Get other listeners.\n          const listeners = cacheListeners[url.location]\n          delete cacheListeners[url.location]\n\n          // Reject promise.\n          reject(error)\n\n          // Inform listeners of update.\n          if (listeners) {\n            for (const listener of listeners) {\n              listener.reject(error)\n            }\n          }\n        })\n    })\n    .catch((error) => {\n      // Get other listeners.\n      const listeners = cacheListeners[url.location]\n      delete cacheListeners[url.location]\n\n      // Reject promise.\n      reject(error)\n\n      // Inform listeners of update.\n      if (listeners) {\n        for (const listener of listeners) {\n          listener.reject(error)\n        }\n      }\n    })\n})\n\nexport default {\n  fetchAndParse,\n  parseResponse,\n  responseType,\n  simplifyType,\n}\n", "/**\n * Deeply assign a series of objects properties together.\n * @param {object} target Target object to merge to.\n * @param {...object} sources Objects to merge into the target.\n * @returns {object} Merged resulting object.\n */\nexport const deepAssign = (\n  target,\n  ...sources\n) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {object} object Object to get from.\n * @param  {Array<string>} path Path to value.\n * @returns {any} value at path.\n */\nexport const getDeeply = (\n  object,\n  path,\n) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {any} value Value of unknown type.\n * @returns {boolean} Whether the value is an object.\n */\nexport const isObject = (\n  value,\n) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {object} object Object to set on.\n * @param {Array<string>} path Path to value.\n * @param {any} value Value to set.\n */\nexport const setDeeply = (\n  object,\n  path,\n  value,\n) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "// Import utilities.\nimport { fetchAndParse } from '@doars/common/src/utilities/Fetch.js'\nimport { deepAssign } from '@doars/common/src/utilities/Object.js'\n\nexport default ({\n  fetchContextName,\n  fetchOptions,\n}) => ({\n  name: fetchContextName,\n\n  create: (\n  ) => {\n    return {\n      value: (\n        url,\n        options = null,\n      ) => {\n        // Apply default options to init.\n        if (fetchOptions) {\n          options = deepAssign({}, fetchOptions, options)\n        }\n\n        // Extract optional return type.\n        const returnType = options.returnType ? options.returnType : null\n        delete options.returnType\n\n        // Perform and process fetch request.\n        return fetchAndParse(\n          url,\n          options,\n          returnType,\n        )\n          .then((result) => {\n            if (result && result.value) {\n              return result.value\n            }\n          })\n      },\n    }\n  },\n})\n", "/**\n * Convert string to HTML element.\n * @param {string} string Element contents.\n * @returns {HTMLElement} HTML element part of a document fragment.\n */\nexport const fromString = (\n  string,\n) => {\n  const stringStart = string.substring(0, 15).toLowerCase()\n  const isDocument = (\n    stringStart.startsWith('<!doctype html>') ||\n    stringStart.startsWith('<html>')\n  )\n  if (isDocument) {\n    const html = document.createElement('html')\n    html.innerHTML = string\n    return html\n  }\n\n  const template = document.createElement('template')\n  template.innerHTML = string\n  return template.content.childNodes[0]\n}\n\n/**\n * Inserts an element after the reference element opposite of insertBefore and more reliable then ChildNode.after().\n * @param {HTMLElement} reference Node to insert after.\n * @param {Node} node Node to insert.\n */\nexport const insertAfter = (\n  reference,\n  node,\n) => {\n  if (reference.nextSibling) {\n    reference.parentNode.insertBefore(node, reference.nextSibling)\n  } else {\n    reference.parentNode.appendChild(node)\n  }\n}\n\n/**\n * Inserts an element before the reference element,\n * @param {HTMLElement} reference Node to insert before.\n * @param {Node} node Node to insert.\n */\nexport const insertBefore = (\n  reference,\n  node,\n) => {\n  reference.parentNode.insertBefore(reference, node)\n}\n\n/**\n * Check whether two nodes are the same.\n * @param {HTMLElement} a A node.\n * @param {HTMLElement} b Another node.\n * @returns {boolean} Whether the nodes are the same.\n */\nexport const isSame = (\n  a,\n  b,\n) => {\n  if (a.isSameNode && a.isSameNode(b)) {\n    return true\n  }\n\n  if (a.type === 3) { // Text node.\n    return a.nodeValue === b.nodeValue\n  }\n\n  if (a.tagName === b.tagName) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * @callback WalkIterate Returns a new child element or null when all items have been iterated on.\n * @returns {HTMLElement|null}\n */\n\n/**\n * @callback WalkFilter Filter function that takes in an element and return true if the element needs to be walked and false when it needs to be skipped.\n * @param {HTMLElement} element Element to decide on.\n * @returns {boolean}\n */\n\n/**\n * Iterate over all descendants of a given node.\n * @param {HTMLElement} element Element to walk over.\n * @param {WalkFilter} filter Filter function, return false to skip element.\n * @returns {WalkIterate} Iterator function. Call until a non-truthy value is returned.\n */\nexport const walk = (\n  element,\n  filter,\n) => {\n  let index = -1\n  /** @type {null|WalkIterate} */\n  let iterator = null\n  return () => {\n    // First go over iterator.\n    if (index >= 0 && iterator) {\n      const child = iterator()\n      if (child) {\n        return child\n      }\n    }\n\n    // Get next child that passes the filter.\n    let child = null\n    do {\n      index++\n      if (index >= element.childElementCount) {\n        return null\n      }\n\n      child = element.children[index]\n    } while (!filter(child))\n\n    // Setup iterator for child.\n    if (child.childElementCount) {\n      iterator = walk(child, filter)\n    }\n\n    // Return the child.\n    return child\n  }\n}\n\nexport default {\n  fromString,\n  insertAfter,\n  isSame,\n  walk,\n}\n", "const DECODE_LOOKUP = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': '\\'',\n  '&#39;': '\\'',\n  '&quot;': '\"',\n  '&#34;': '\"',\n}\nconst DECODE_REGEXP = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g\n\nconst ENCODE_LOOKUP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\\'': '&#39;',\n  '\"': '&quot;',\n}\nconst ENCODE_REGEXP = /[&<>'\"]/g\n\nexport const decode = (\n  string,\n) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(DECODE_REGEXP, (character) => {\n    return DECODE_LOOKUP[character]\n  })\n}\n\nexport const encode = (\n  string,\n) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(ENCODE_REGEXP, (character) => {\n    return ENCODE_LOOKUP[character]\n  })\n}\n\nexport default {\n  decode,\n  encode,\n}\n", "/**\n * Escape slashes, quotation marks, and new lines.\n * @param {string} text String to escape.\n * @returns {string} Escaped string.\n */\nexport const escapeHtml = (\n  text,\n) => {\n  return text\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\\\\'/g, '\\\\\\'')\n    .replace(/\\\\\"/g, '\\\\\"')\n    .replace(/\\n/g, '\\\\n')\n}\n\n/**\n * Convert a string from kebab-case to camelCase.\n * @param {string} text String to modify.\n * @returns {string} Converted string.\n */\nexport const kebabToCamel = (\n  text,\n) => {\n  return text.replace(/-(\\w)/g, (match, character) => character.toUpperCase())\n}\n\n/**\n * Parse list of modifiers to an object.\n * - [ 'hello', 'there-100', 'general-kenobi' ]\n *    -> { 'hello': true, 'there': 100, 'general': 'kenobi' }\n * @param {Array<string>} modifiers List of modifiers to parse.\n * @returns {object} Parsed modifiers.\n */\nexport const parseAttributeModifiers = (\n  modifiers,\n) => {\n  const result = {}\n  for (const modifier of modifiers) {\n    // Get index of hyphen.\n    const hyphenIndex = modifier.indexOf('-')\n\n    // If no hyphen then set the modifiers to true.\n    if (hyphenIndex < 0) {\n      result[modifier] = true\n      continue\n    }\n\n    // If it starts with hyphen then set the modifier to false.\n    if (hyphenIndex === 0) {\n      result[modifier.substring(1)] = false\n      continue\n    }\n\n    // If the hyphen is somewhere in the modifier then assume it is used as a split character.\n    const key = modifier.substring(0, hyphenIndex)\n    let value = modifier.substring(hyphenIndex + 1)\n\n    let tmpValue = value\n\n    // Try to remove time suffixes.\n    let type\n    if (value.endsWith('ms')) {\n      tmpValue = value.substring(-2)\n    } else if (value.endsWith('s')) {\n      type = 's'\n      tmpValue = value.substring(-1)\n    } else if (value.endsWith('m')) {\n      type = 'm'\n      tmpValue = value.substring(-1)\n    } else if (value.endsWith('h')) {\n      type = 'h'\n      tmpValue = value.substring(-1)\n    }\n\n    // Try to parse the value as a number.\n    tmpValue = Number.parseInt(tmpValue)\n    if (!isNaN(tmpValue)) {\n      value = tmpValue\n\n      // Convert to milliseconds if given in a different format.\n      switch (type) {\n        case 'h':\n          value *= 60\n        case 'm':\n          value *= 60\n        case 's':\n          value *= 1000\n          break\n      }\n    }\n\n    // Store modifier data.\n    result[key] = value\n  }\n\n  return result\n}\n\n/**\n * Parse attribute name to list of segments.\n * Valid formats are:\n * - \"d-directive\"\n *    -> [ 'directive', null, null, null ]\n * - \"d-directive:key\"\n *    -> [ 'directive', 'key', 'key', null ]\n * - \"d-directive:key-name\"\n *    -> [ 'directive', 'key-name', 'keyName', null ]\n * - \"d-directive:key-name.modifiers\"\n *    -> [ 'directive', 'key-name', 'keyName', [ 'modifiers' ] ]\n * - \"d-directive.modifiers.multiple\"\n *    -> [ 'directive', null, null, [ 'modifiers', 'multiple' ] ]\n * @param {string} prefix Directive prefix.\n * @param {string} name Name to parse.\n * @returns {Array<string> | undefined} list of segments.\n */\nexport const parseAttributeName = (\n  prefix,\n  name,\n) => {\n  // Match with expression.\n  name = name.match(new RegExp('^' + prefix + '-([a-z][0-9a-z-]{1,}):?([a-z][0-9a-z-]*)?(\\\\..*]*)?$', 'i'))\n  if (!name) {\n    return\n  }\n  // Deconstruct match.\n  let [full, directive, keyRaw, modifiers] = name // eslint-disable-line no-unused-vars\n  // If no key provided set it to null instead of empty.\n  keyRaw = keyRaw !== '' ? keyRaw : null\n  const key = keyRaw ? kebabToCamel(keyRaw) : null\n  // Ensure modifiers is and array.\n  modifiers = modifiers ? modifiers.substring(1).split('.') : []\n  // Return result a single array.\n  return [directive, keyRaw, key, modifiers]\n}\n\n/**\n * Parses for expression. Valid expression formats are:\n * - \"index of 4\"\n *    -> { iterable: \"4\", variables: [ \"index\" ] }\n * - \"item of items\"\n *    -> { iterable: \"items\", variables: [ \"item\" ] }\n * - \"key in object\"\n *    -> { iterable: \"object\", variables: [ \"key\" ] }\n * - \"(key, value) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", \"value\" ] }\n * - \"(key, value, index) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", \"value\", \"index\" ] }\n * - \"(key, , index) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", undefined, \"index\" ] }\n * @param {string} expression For expression to parse.\n * @returns {object | undefined} Iterable type and variables.\n */\nexport const parseForExpression = (\n  expression,\n) => {\n  // Split variables from items expression.\n  const match = expression.match(/^([$_a-z0-9,(){}\\s]{1,}?)\\s+(?:in|of)\\s+([\\s\\S]{1,})$/i)\n  if (!match) {\n    return\n  }\n\n  // Remove parenthesis.\n  let variables = match[1].replace(/^[\\s({]*|[)}\\s]*$/g, '')\n  // Parse for variables.\n  variables = variables.match(/^([$_a-z0-9]{1,})?(?:,\\s+?)?([$_a-z0-9]{1,})?(?:,\\s+)?([$_a-z0-9]{1,})?$/i)\n  if (!variables) {\n    return\n  }\n  variables.shift()\n  return {\n    iterable: match[2].trim(),\n    variables: [...variables], // Convert it to an array instead of a regular expression match.\n  }\n}\n\n/**\n * Parse selector to an attributes object.\n * @param {string} selector Selector to parse.\n * @returns {object | undefined} Attributes. Do note the class property is a list of strings not a single string.\n */\nexport const parseSelector = (\n  selector,\n) => {\n  // Convert to array.\n  if (typeof (selector) === 'string') {\n    selector = selector.split(/(?=\\.)|(?=#)|(?=\\[)/)\n  }\n\n  if (!Array.isArray(selector)) {\n    console.error('Doars: parseSelector expects Array of string or a single string.')\n    return\n  }\n\n  const attributes = {}\n  for (let selectorSegment of selector) {\n    // Trim spaces.\n    selectorSegment = selectorSegment.trim()\n\n    // Base what to do of the leading character.\n    switch (selectorSegment[0]) {\n      case '#':\n        // Remove leading character and store as id.\n        attributes.id = selectorSegment.substring(1)\n        break\n\n      case '.':\n        // Remove leading character.\n        selectorSegment = selectorSegment.substring(1)\n        // Add to classlist.\n        if (!attributes.class) {\n          attributes.class = []\n        }\n        if (!attributes.class.includes(selectorSegment)) {\n          attributes.class.push(selectorSegment)\n        }\n        break\n\n      case '[':\n        // Remove brackets and split key from value.\n        const [full, key, value] = selectorSegment.match(/^(?:\\[)?([-$_.a-z0-9]{1,})(?:[$*^])?(?:=)?([\\s\\S]{0,})(?:\\])$/i) // eslint-disable-line no-unused-vars\n        // Store attribute value in results.\n        attributes[key] = value\n        break\n    }\n  }\n  return attributes\n}\n\nexport default {\n  escapeHtml,\n  kebabToCamel,\n  parseAttributeModifiers,\n  parseAttributeName,\n  parseForExpression,\n  parseSelector,\n}\n", "/**\n * Add attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {object} data Attribute data to add.\n */\nexport const addAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.add(className)\n      }\n      continue\n    }\n\n    // Set attribute.\n    element.setAttribute(name, data[name])\n  }\n}\n\n/**\n * Copy all attributes onto one node from another.\n * @param {HTMLElement} existingNode Node to copy to.\n * @param {HTMLElement} newNode Node to copy from.\n */\nexport const copyAttributes = (\n  existingNode,\n  newNode,\n) => {\n  const existingAttributes = existingNode.attributes\n  const newAttributes = newNode.attributes\n  let attributeNamespaceURI = null\n  let attributeValue = null\n  let fromValue = null\n  let attributeName = null\n  let attribute = null\n\n  for (let i = newAttributes.length - 1; i >= 0; --i) {\n    attribute = newAttributes[i]\n    attributeName = attribute.name\n    attributeNamespaceURI = attribute.namespaceURI\n    attributeValue = attribute.value\n    if (attributeNamespaceURI) {\n      attributeName = attribute.localName || attributeName\n      fromValue = existingNode.getAttributeNS(attributeNamespaceURI, attributeName)\n      if (fromValue !== attributeValue) {\n        existingNode.setAttributeNS(attributeNamespaceURI, attributeName, attributeValue)\n      }\n    } else {\n      if (!existingNode.hasAttribute(attributeName)) {\n        existingNode.setAttribute(attributeName, attributeValue)\n      } else {\n        fromValue = existingNode.getAttribute(attributeName)\n        if (fromValue !== attributeValue) {\n          // apparently values are always cast to strings, ah well\n          if (attributeValue === 'null' || attributeValue === 'undefined') {\n            existingNode.removeAttribute(attributeName)\n          } else {\n            existingNode.setAttribute(attributeName, attributeValue)\n          }\n        }\n      }\n    }\n  }\n\n  // Remove any extra attributes found on the original DOM element that\n  // weren't found on the target element.\n  for (let j = existingAttributes.length - 1; j >= 0; --j) {\n    attribute = existingAttributes[j]\n    if (attribute.specified !== false) {\n      attributeName = attribute.name\n      attributeNamespaceURI = attribute.namespaceURI\n\n      if (attributeNamespaceURI) {\n        attributeName = attribute.localName || attributeName\n        if (!newNode.hasAttributeNS(attributeNamespaceURI, attributeName)) {\n          existingNode.removeAttributeNS(attributeNamespaceURI, attributeName)\n        }\n      } else {\n        if (!newNode.hasAttributeNS(null, attributeName)) {\n          existingNode.removeAttribute(attributeName)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove attributes on an element based of an object.\n * @param {HTMLElement} element Element to remove the attributes from.\n * @param {object} data Attribute data to remove.\n */\nexport const removeAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.remove(className)\n      }\n      continue\n    }\n\n    // Check if optional values match.\n    if (data[name] && element.attributes[name] !== data[name]) {\n      continue\n    }\n\n    // Remove attribute.\n    element.removeAttribute(name)\n  }\n}\n\n/**\n * Set data at key on element as attribute.\n * @param {HTMLElement} element Element to set attribute of.\n * @param {string} key Attribute name.\n * @param {any} data Attribute data.\n */\nexport const setAttribute = (\n  element,\n  key,\n  data,\n) => {\n  // Check if a special attribute key.\n  if (key === 'value' && element.tagName === 'INPUT') {\n    if (!data) {\n      data = ''\n    }\n\n    // Exit early if nothing will change.\n    if (element.getAttribute(key) === data) {\n      return\n    }\n\n    // Update attribute.\n    element.setAttribute(key, data)\n\n    // Exit special cases early.\n    return\n  }\n\n  // If checked attribute then set the checked property instead.\n  if (key === 'checked') {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = !!data\n      return\n    }\n  }\n\n  if (key === 'class') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).filter(([key, value]) => value).map(([key]) => key).join(' ')\n    }\n  }\n\n  if (key === 'style') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).map(([key, value]) => key + ':' + value).join(';')\n    }\n  }\n\n  // Update attribute on element.\n  if (data === false || data === null || data === undefined) {\n    element.removeAttribute(key)\n  } else {\n    element.setAttribute(key, data)\n  }\n}\n\n/**\n * Set attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {object} data Attribute data to set.\n */\nexport const setAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    setAttribute(element, name, data[name])\n  }\n}\n\nexport default {\n  addAttributes,\n  copyAttributes,\n  removeAttributes,\n  setAttribute,\n}\n", "// Import utilities.\nimport { parseSelector } from './String.js'\nimport { addAttributes, removeAttributes } from './Attribute.js'\n\n// Transition name.\nconst TRANSITION_NAME = '-transition:'\n\n/**\n * @callback TransitionEnd\n */\n\n/**\n * Transition an element.\n * @param {string} type Type of transition, for example 'in' and 'out'.\n * @param {object} libraryOptions Library options.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n * @returns {TransitionEnd | undefined} Function to immediately end the transition.\n */\nexport const transition = (\n  type,\n  libraryOptions,\n  element,\n  callback = null,\n) => {\n  // Only transition element nodes.\n  if (element.nodeType !== 1) {\n    if (callback) {\n      callback()\n    }\n    return\n  }\n\n  // Transition attribute name.\n  const transitionDirectiveName = libraryOptions.prefix + TRANSITION_NAME + type\n\n  // Setup dispatcher function.\n  const dispatchEvent = (phase) => {\n    element.dispatchEvent(\n      new CustomEvent('transition-' + phase),\n    )\n    element.dispatchEvent(\n      new CustomEvent('transition-' + type + '-' + phase),\n    )\n  }\n\n  // Declare variables for later.\n  let name, value, timeout, requestFrame\n  let isDone = false\n  const selectors = {}\n\n  // Process transition during attribute.\n  name = transitionDirectiveName\n  value = element.getAttribute(name)\n  // Parse and apply returned selector.\n  if (value) {\n    selectors.during = parseSelector(value)\n    addAttributes(element, selectors.during)\n  }\n\n  // Process transition from attribute.\n  name = transitionDirectiveName + '.from'\n  value = element.getAttribute(name)\n  // Parse and apply returned selector.\n  if (value) {\n    selectors.from = parseSelector(value)\n    addAttributes(element, selectors.from)\n  }\n\n  // Dispatch transition event.\n  dispatchEvent('start')\n\n  requestFrame = requestAnimationFrame(() => {\n    requestFrame = null\n\n    // If cancelled then stop immediately.\n    if (isDone) {\n      return\n    }\n\n    // Remove from selector.\n    if (selectors.from) {\n      removeAttributes(element, selectors.from)\n      selectors.from = undefined\n    }\n\n    // Process transition to attribute.\n    name = transitionDirectiveName + '.to'\n    value = element.getAttribute(name)\n    // Parse and apply returned selector.\n    if (value) {\n      selectors.to = parseSelector(value)\n      addAttributes(element, selectors.to)\n    } else if (!selectors.during) {\n      // Exit early if no active selectors set.\n\n      // Dispatch end event.\n      dispatchEvent('end')\n      // Invoke callback.\n      if (callback) {\n        callback()\n      }\n      // Mark as done.\n      isDone = true\n      return\n    }\n\n    // Get computes style.\n    const styles = getComputedStyle(element)\n\n    let duration = Number(styles.transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000\n    if (duration === 0) {\n      duration = Number(styles.animationDuration.replace('s', '')) * 1000\n    }\n\n    timeout = setTimeout(() => {\n      timeout = null\n\n      // If cancelled then stop immediately.\n      if (isDone) {\n        return\n      }\n\n      // Remove during selector.\n      if (selectors.during) {\n        removeAttributes(element, selectors.during)\n        selectors.during = undefined\n      }\n\n      // Remove to selector.\n      if (selectors.to) {\n        removeAttributes(element, selectors.to)\n        selectors.to = undefined\n      }\n\n      // Dispatch end event.\n      dispatchEvent('end')\n      // Invoke callback.\n      if (callback) {\n        callback()\n      }\n      // Mark as done.\n      isDone = true\n    }, duration)\n  })\n\n  return (\n  ) => {\n    if (!isDone) {\n      return\n    }\n    isDone = true\n\n    // Remove applied selector.\n    if (selectors.during) {\n      removeAttributes(element, selectors.during)\n      selectors.during = undefined\n    }\n    if (selectors.from) {\n      removeAttributes(element, selectors.from)\n      selectors.from = undefined\n    } else if (selectors.to) {\n      removeAttributes(element, selectors.to)\n      selectors.to = undefined\n    }\n\n    // Clear request animation frame and timeout.\n    if (requestFrame) {\n      cancelAnimationFrame(requestFrame)\n      requestFrame = null\n    } else if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n\n    // Dispatch end event.\n    dispatchEvent('end')\n    // Invoke callback.\n    if (callback) {\n      callback()\n    }\n  }\n}\n\n/**\n * Transition an element in.\n * @param {object} libraryOptions Library options.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n * @returns {TransitionEnd | undefined} Function to immediately end the transition.\n */\nexport const transitionIn = (\n  libraryOptions,\n  element,\n  callback,\n) => {\n  return transition('in', libraryOptions, element, callback)\n}\n\n/**\n * Transition an element out.\n * @param {object} libraryOptions Library options.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n * @returns {TransitionEnd | undefined} Function to immediately end the transition.\n */\nexport const transitionOut = (\n  libraryOptions,\n  element,\n  callback,\n) => {\n  return transition('out', libraryOptions, element, callback)\n}\n\nexport default {\n  transition,\n  transitionIn,\n  transitionOut,\n}\n", "import { insertAfter } from './Element.js'\nimport {\n  transitionIn,\n  transitionOut,\n} from './Transition.js'\n\n/**\n * @typedef {import('@doars/doars/src/Attribute.js').default} Attribute\n * @typedef {import('@doars/doars/src/Component.js').default} Component\n * @typedef {import('@doars/doars/src/Directive.js').ProcessExpression} ProcessExpression\n */\n\n/**\n * Hides the indicator.\n * @param {Component} component Instance of the component.\n * @param {Attribute} attribute Instance of the attribute.\n * @returns {void}\n */\nexport const hideIndicator = (\n  component,\n  attribute,\n) => {\n  // Check if a indicator exists.\n  if (!attribute.indicator) {\n    return\n  }\n  // Check if not already transitioning out.\n  if (attribute.indicator.indicatorTransitionOut) {\n    return\n  }\n  // Check if a indicator element exists.\n  if (!attribute.indicator.indicatorElement) {\n    return\n  }\n\n  const libraryOptions = component.getLibrary().getOptions()\n\n  // Transition element in.\n  const indicatorElement = attribute.indicator.indicatorElement\n  attribute.indicator.indicatorTransitionIn =\n    transitionOut(libraryOptions, indicatorElement, () => {\n      if (indicatorElement) {\n        indicatorElement.remove()\n      }\n    })\n}\n\n/**\n * Shows the indicator.\n * @param {Component} component Instance of the component.\n * @param {Attribute} attribute Instance of the attribute.\n * @param {ProcessExpression} processExpression Function to process an expression with.\n * @returns {void}\n */\nexport const showIndicator = (\n  component,\n  attribute,\n  processExpression,\n) => {\n  const libraryOptions = component.getLibrary().getOptions()\n  const element = attribute.getElement()\n  const directive = attribute.getDirective()\n\n  const attributeName = libraryOptions.prefix + '-' + directive + '-' + libraryOptions.indicatorDirectiveName\n  if (!element.hasAttribute(attributeName)) {\n    return\n  }\n  let indicatorTemplate = null\n  if (libraryOptions.indicatorDirectiveEvaluate) {\n    indicatorTemplate = processExpression(\n      component,\n      attribute,\n      element.getAttribute(attributeName),\n    )\n  } else {\n    indicatorTemplate = element.getAttribute(attributeName)\n  }\n  if (!indicatorTemplate) {\n    return\n  }\n  if (typeof (indicatorTemplate) === 'string') {\n    indicatorTemplate = element.querySelector(indicatorTemplate)\n    if (!indicatorTemplate) {\n      return\n    }\n  }\n\n  // Check if placed on a template tag.\n  if (indicatorTemplate.tagName !== 'TEMPLATE') {\n    console.warn('Doars: `' + attributeName + '` must be placed on a `<template>`.')\n    return\n  }\n  if (indicatorTemplate.childCount > 1) {\n    console.warn('Doars: `' + attributeName + '` must have one child.')\n    return\n  }\n\n  // Cancel current transition.\n  if (attribute.indicator) {\n    if (attribute.indicator.indicatorTransitionOut) {\n      attribute.indicator.indicatorTransitionOut()\n      attribute.indicator.indicatorTransitionOut = null\n    } else if (attribute.indicator.indicatorElement) {\n      return\n    }\n  }\n\n  // Create new element from template.\n  let indicatorElement = document.importNode(indicatorTemplate.content, true)\n  // Add element after the template element.\n  insertAfter(indicatorTemplate, indicatorElement)\n  // Get HTMLElement reference instead of DocumentFragment.\n  indicatorElement = indicatorTemplate.nextElementSibling\n  attribute.indicator = {\n    indicatorElement,\n    // Transition element in.\n    indicatorTransitionIn: transitionIn(libraryOptions, indicatorElement),\n  }\n}\n\nexport default {\n  hideIndicator,\n  showIndicator,\n}\n", "// Based on nanomorph, v5.4.3, https://github.com/choojs/nanomorph#readme) and morphdom, https://github.com/patrick-steele-idem/morphdom/tree/master#morphdom.\n\n// Import utilities.\nimport { copyAttributes } from './Attribute.js'\nimport {\n  fromString as elementFromString,\n  isSame as elementIsSame,\n} from './Element.js'\n\n/**\n * Diff elements and apply the resulting patch to the existing node.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nexport const morphNode = (\n  existingNode,\n  newNode,\n) => {\n  const nodeType = newNode.nodeType\n  const nodeName = newNode.nodeName\n\n  // Element node.\n  if (nodeType === 1) {\n    copyAttributes(existingNode, newNode)\n  }\n\n  // Text node or comment node.\n  if (nodeType === 3 || nodeType === 8) {\n    if (existingNode.nodeValue !== newNode.nodeValue) {\n      existingNode.nodeValue = newNode.nodeValue\n    }\n  }\n\n  // Some DOM nodes are weird.\n  // https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n  if (nodeName === 'INPUT') {\n    _updateInput(existingNode, newNode)\n  } else if (nodeName === 'OPTION') {\n    _updateAttribute(existingNode, newNode, 'selected')\n  } else if (nodeName === 'TEXTAREA') {\n    _updateTextarea(existingNode, newNode)\n  }\n}\n\n/**\n * Morph the existing element tree into the given tree.\n * @param {HTMLElement} existingTree The existing tree to convert.\n * @param {HTMLElement | string} newTree The tree to change to.\n * @param {object} options Options to modify the morphing behaviour.\n * @returns {HTMLElement} New tree root element.\n */\nexport const morphTree = (\n  existingTree,\n  newTree,\n  options,\n) => {\n  if (typeof (existingTree) !== 'object') {\n    throw new Error('Existing tree should be an object.')\n  }\n\n  if (typeof (newTree) === 'string') {\n    newTree = elementFromString(newTree)\n  } else if (typeof (newTree) !== 'object') {\n    throw new Error('New tree should be an object.')\n  }\n\n  // Check if outer or inner html should be updated. Always update children only if root node is a document fragment.\n  if ((options && options.childrenOnly) || newTree.nodeType === 11) {\n    _updateChildren(existingTree, newTree)\n    return existingTree\n  }\n\n  return _updateTree(existingTree, newTree)\n}\n\n/**\n * Update attributes on input element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nconst _updateInput = (\n  existingNode,\n  newNode,\n) => {\n  // The \"value\" attribute is special for the <input> element since it sets the initial value. Changing the \"value\" attribute without changing the \"value\" property will have no effect since it is only used to the set the initial value. Similar for the \"checked\" attribute, and \"disabled\".\n\n  const newValue = newNode.value\n  const existingValue = existingNode.value\n\n  _updateAttribute(existingNode, newNode, 'checked')\n  _updateAttribute(existingNode, newNode, 'disabled')\n\n  // The \"indeterminate\" property can not be set using an HTML attribute.\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\n  if (existingNode.indeterminate !== newNode.indeterminate) {\n    existingNode.indeterminate = newNode.indeterminate\n  }\n\n  // Persist file value since file inputs can not be changed programmatically\n  if (existingNode.type === 'file') {\n    return\n  }\n\n  if (existingValue !== newValue) {\n    existingNode.setAttribute('value', newValue)\n    existingNode.value = newValue\n  }\n\n  if (newValue === 'null') {\n    existingNode.value = ''\n    existingNode.removeAttribute('value')\n  }\n\n  if (!newNode.hasAttributeNS(null, 'value')) {\n    existingNode.removeAttribute('value')\n  } else if (existingNode.type === 'range') {\n    // this is so elements like slider move their UI thingy\n    existingNode.value = newValue\n  }\n}\n\n/**\n * Update attributes on textarea element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nconst _updateTextarea = (\n  existingNode,\n  newNode,\n) => {\n  const newValue = newNode.value\n  if (existingNode.value !== newValue) {\n    existingNode.value = newValue\n  }\n\n  if (existingNode.firstChild && existingNode.firstChild.nodeValue !== newValue) {\n    existingNode.firstChild.nodeValue = newValue\n  }\n}\n\n/**\n * Update attributes on element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n * @param {string} name Name of the attribute.\n */\nconst _updateAttribute = (\n  existingNode,\n  newNode,\n  name,\n) => {\n  if (existingNode[name] !== newNode[name]) {\n    existingNode[name] = newNode[name]\n    if (newNode[name]) {\n      existingNode.setAttribute(name, '')\n    } else {\n      existingNode.removeAttribute(name)\n    }\n  }\n}\n\n/**\n * Morph the existing element tree into the given tree.\n * @param {HTMLElement} existingTree The existing tree to convert.\n * @param {HTMLElement} newTree The tree to change to.\n * @returns {HTMLElement} New tree root element.\n */\nconst _updateTree = (\n  existingTree,\n  newTree,\n) => {\n  if (!existingTree) {\n    return newTree\n  }\n\n  if (!newTree) {\n    return null\n  }\n\n  if (existingTree.isSameNode && existingTree.isSameNode(newTree)) {\n    return existingTree\n  }\n\n  if (existingTree.tagName !== newTree.tagName) {\n    return newTree\n  }\n\n  morphNode(existingTree, newTree)\n  _updateChildren(existingTree, newTree)\n\n  return existingTree\n}\n\n/**\n * Change the existing element's children into the given element's children.\n * @param {HTMLElement} existingNode The existing node who's children to update.\n * @param {HTMLElement} newNode The existing node who's children to change to.\n */\nconst _updateChildren = (\n  existingNode,\n  newNode,\n) => {\n  let existingChild, newChild, morphed, existingMatch\n\n  // The offset is only ever increased, and used for [i - offset] in the loop.\n  let offset = 0\n\n  for (let i = 0; ; i++) {\n    existingChild = existingNode.childNodes[i]\n    newChild = newNode.childNodes[i - offset]\n\n    // Both nodes are empty, do nothing.\n    if (!existingChild && !newChild) {\n      break\n\n      // There is no new child, remove old.\n    } else if (!newChild) {\n      existingNode.removeChild(existingChild)\n      i--\n\n      // There is no old child, add new.\n    } else if (!existingChild) {\n      existingNode.appendChild(newChild)\n      offset++\n\n      // Both nodes are the same, morph.\n    } else if (elementIsSame(existingChild, newChild)) {\n      morphed = _updateTree(existingChild, newChild)\n      if (morphed !== existingChild) {\n        existingNode.replaceChild(morphed, existingChild)\n        offset++\n      }\n\n      // Both nodes do not share an ID or a placeholder, try reorder.\n    } else {\n      existingMatch = null\n\n      // Try and find a similar node somewhere in the tree.\n      for (let j = i; j < existingNode.childNodes.length; j++) {\n        if (elementIsSame(existingNode.childNodes[j], newChild)) {\n          existingMatch = existingNode.childNodes[j]\n          break\n        }\n      }\n\n      // If there was a node with the same ID or placeholder in the old list.\n      if (existingMatch) {\n        morphed = _updateTree(existingMatch, newChild)\n        if (morphed !== existingMatch) {\n          offset++\n        }\n        existingNode.insertBefore(morphed, existingChild)\n\n        // It is safe to morph two nodes in-place if neither has an ID.\n      } else if (!newChild.id && !existingChild.id) {\n        morphed = _updateTree(existingChild, newChild)\n        if (morphed !== existingChild) {\n          existingNode.replaceChild(morphed, existingChild)\n          offset++\n        }\n\n        // Insert the node at the index if we could not morph or find a matching node.\n      } else {\n        existingNode.insertBefore(newChild, existingChild)\n        offset++\n      }\n    }\n  }\n}\n\nexport default {\n  morphNode,\n  morphTree,\n}\n", "// Create and cache native promise for comparison.\nconst nativePromise = Function.prototype.toString.call(Function /* A native object */)\n  .replace('Function', 'Promise') // Replace identifier.\n  .replace(/\\(.*\\)/, '()') // Remove possible FormalParameterList.\n\nexport const isNativePromise = (\n  value,\n) => {\n  return value && typeof value.constructor === 'function' && Function.prototype.toString.call(value.constructor).replace(/\\(.*\\)/, '()') === nativePromise\n}\n\nexport const isPromise = (\n  value,\n) => {\n  return value && Object.prototype.toString.call(value) === '[object Promise]'\n}\n\nexport default {\n  isPromise,\n  isNativePromise,\n}\n", "import { walk } from './Element.js'\n\n/**\n * Re-adds a script to the document in order to trigger it again.\n * @param {HTMLElement} element Script to re-add to the DOM.\n * @returns {void}\n */\nconst _readdScript = (\n  element,\n) => {\n  // Check if element is a script without a source.\n  if (\n    element.tagName !== 'SCRIPT' ||\n    element.hasAttribute('src')\n  ) {\n    return false\n  }\n\n  // Set up new script with same content.\n  const newScript = document.createElement('script')\n  newScript.innerText = element.innerText\n\n  // Replace script in the document.\n  element.parentNode.insertBefore(\n    newScript,\n    element,\n  )\n  element.remove()\n  return true\n}\n\n/**\n * Checks the elements for scripts and re-adds these to the DOM.\n * @param  {...HTMLElement} elements Elements to check for scripts.\n * @returns {void}\n */\nexport const readdScripts = (\n  ...elements\n) => {\n  for (const element of elements) {\n    // Try to re-add element in case it is a script.\n    if (!_readdScript(element)) {\n      // Otherwise check its children.\n      const iterate = walk(element)\n      let maybeScript = null\n      while (maybeScript = iterate()) {\n        _readdScript(maybeScript)\n      }\n    }\n  }\n}\n\nexport default {\n  readdScripts,\n}\n", "/**\n * Convert a form data object to XML.\n * @param {FormData} formData Data to serialize.\n * @returns {string} Serialized form data.\n */\nexport const serializeFormData = (\n  formData,\n) => {\n  const xml = document.createElement('xml')\n\n  formData.forEach((value, key) => {\n    const element = document.createElement(key)\n    element.textContent = value\n    xml.appendChild(element)\n  })\n\n  const serializer = new XMLSerializer()\n  return serializer.serializeToString(xml)\n}\n\nexport default {\n  serializeFormData,\n}\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n * @typedef {import('@doars/doars/src/Attribute.js').default} Attribute\n * @typedef {import('@doars/doars/src/Component.js').default} Component\n * @typedef {import('@doars/doars/src/Directive.js').Directive} Directive\n * @typedef {import('@doars/doars/src/Directive.js').DirectiveUtilities} DirectiveUtilities\n */\n\n// Import utilities.\nimport { fetchAndParse } from '@doars/common/src/utilities/Fetch.js'\nimport {\n  fromString as elementFromString,\n  insertAfter,\n  insertBefore,\n} from '@doars/common/src/utilities/Element'\nimport { decode } from '@doars/common/src/utilities/Html.js'\nimport {\n  hideIndicator,\n  showIndicator,\n} from '@doars/common/src/utilities/Indicator.js'\nimport { morphTree } from '@doars/common/src/utilities/Morph.js'\nimport { isPromise } from '@doars/common/src/utilities/Promise'\nimport { readdScripts } from '@doars/common/src/utilities/Script'\n\nimport { serializeFormData } from '../utilities/Xml'\n\nconst FETCH = Symbol('FETCH')\n\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  THROTTLE: 5,\n}\n\n/**\n * @typedef DirectiveOptions\n * @type {object}\n * @property {object} fetchOptions Object of options given to the fetch method when submitting data.\n * @property {string} headerTitle Name of the header that can contain a new document title.\n */\n\n/**\n * @param {DirectiveOptions} options Options used for creating the directive.\n * @returns {Directive} Created fetch directive.\n */\nexport default ({\n  fetchOptions,\n  fetchDirectiveEvaluate,\n  fetchDirectiveName,\n}) => ({\n  name: fetchDirectiveName,\n\n  update: (\n    component,\n    attribute,\n    processExpression,\n  ) => {\n    // Destruct component.\n    const library = component.getLibrary()\n    const libraryOptions = library.getOptions()\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const directive = attribute.getDirective()\n    const modifiers = attribute.getModifiers()\n    const value = attribute.getValue()\n\n    // Handle forms differently since the form values need to be used.\n    const isForm = element.tagName === 'FORM'\n    const isButton = element.tagName === 'BUTTON'\n\n    // Check if existing listener exists.\n    if (attribute[FETCH]) {\n      // Exit early if value has not changed.\n      if (attribute[FETCH].value === value) {\n        return\n      }\n\n      // Remove existing listener so we don't listen twice.\n      attribute[FETCH].target.removeEventListener(\n        attribute[FETCH].eventName,\n        attribute[FETCH].handler,\n      )\n\n      // Clear any ongoing timeouts.\n      if (attribute[FETCH].timeout) {\n        clearTimeout(attribute[FETCH].timeout)\n      }\n\n      // Delete directive data.\n      delete attribute[FETCH]\n    }\n\n    // Process modifiers.\n\n    let eventName = isForm ? 'submit' : 'click'\n    if (modifiers.on) {\n      eventName = modifiers.on\n    }\n    const encoding = (modifiers.encoding ? modifiers.encoding.toLowerCase() : 'urlencoded')\n    const method = (modifiers.method ? modifiers.method.toUpperCase() : 'GET')\n    const position = (modifiers.position ? modifiers.position.toLowerCase() : null)\n\n    // Set listener options.\n    const listenerOptions = {}\n    if (modifiers.capture) {\n      listenerOptions.capture = true\n    }\n    if (modifiers.once) {\n      listenerOptions.once = true\n    }\n    if (modifiers.passive && !modifiers.prevent) {\n      listenerOptions.passive = true\n    }\n\n    // Process execution modifiers.\n    let executionModifier = EXECUTION_MODIFIERS.NONE\n    if (modifiers.buffer) {\n      executionModifier = EXECUTION_MODIFIERS.BUFFER\n      if (modifiers.buffer === true) {\n        modifiers.buffer = 5\n      }\n    } else if (modifiers.debounce) {\n      executionModifier = EXECUTION_MODIFIERS.DEBOUNCE\n      if (modifiers.debounce === true) {\n        modifiers.debounce = 500\n      }\n    } else if (modifiers.throttle) {\n      executionModifier = EXECUTION_MODIFIERS.THROTTLE\n      if (modifiers.throttle === true) {\n        modifiers.throttle = 500\n      }\n    }\n\n    const fetchHeaders = {\n      [libraryOptions.prefix + '-' + libraryOptions.requestHeaderName]: directive,\n      Vary: libraryOptions.prefix + '-' + libraryOptions.requestHeaderName,\n    }\n\n    const dispatchEvent = (\n      suffix = '',\n      data = {},\n    ) => {\n      element.dispatchEvent(\n        new CustomEvent(\n          libraryOptions.prefix + '-' + directive + suffix,\n          {\n            detail: Object.assign({\n              attribute,\n              component,\n            }, data),\n          },\n        ),\n      )\n    }\n\n    /**\n     * Perform a request.\n     * @param {URL} url URL of the request to perform.\n     * @returns {void}\n     */\n    const requestHandler = (\n      url,\n    ) => {\n      /** @type {Request} */\n      const _fetchOptions = {\n        headers: {},\n      }\n\n      if (method) {\n        _fetchOptions.method = method\n      } else if (isForm && element.hasAttribute('method')) {\n        _fetchOptions.method = element.getAttribute('method').toUpperCase()\n      }\n\n      if (isForm) {\n        const formData = new FormData(element)\n        let _encoding = encoding\n        if (\n          !_encoding &&\n          element.hasAttribute('enctype')\n        ) {\n          _encoding = element.getAttribute('enctype').toLowerCase()\n        }\n        if (\n          _fetchOptions.method === 'HEAD' ||\n          _fetchOptions.method === 'GET'\n        ) {\n          _encoding = 'parameters'\n        }\n\n        switch (_encoding) {\n          case 'json':\n            _fetchOptions.headers['Content-Type'] = 'application/json; charset=UTF-8'\n            _fetchOptions.body = JSON.stringify(Object.fromEntries(formData))\n            break\n\n          case 'multipart':\n          case 'multipart/form-data':\n            _fetchOptions.headers['Content-Type'] = 'multipart/form-data'\n            _fetchOptions.body = formData\n            break\n\n          case 'parameters':\n            const parameters = new URLSearchParams(formData).toString()\n            for (const [parameterName, parameterValue] of parameters) {\n              url.searchParams.set(parameterName, parameterValue)\n            }\n            break\n\n          case 'urlencoded':\n          case 'application/x-www-form-urlencoded':\n            _fetchOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'\n            _fetchOptions.body = new URLSearchParams(formData).toString()\n            break\n\n          case 'xml':\n            _fetchOptions.headers['Content-Type'] = 'application/xml; charset=UTF-8'\n            _fetchOptions.body = serializeFormData(formData)\n            break\n\n          default:\n            console.warn('DoarsFetch: \"' + directive + '\" directive\\'s invalid encoding type \"' + _encoding + '\".')\n            break\n        }\n      }\n\n      dispatchEvent('-started', {\n        url,\n      })\n\n      fetchAndParse(\n        url,\n        Object.assign({}, fetchOptions, _fetchOptions, {\n          headers: Object.assign({}, _fetchOptions.headers, fetchHeaders),\n        }),\n      )\n        .then((result) => {\n          isLoading = false\n\n          // Decode string.\n          let html = result.value\n          if (modifiers.decode) {\n            html = decode(result.value)\n          }\n\n          /** @type {HTMLElement | null} */\n          let target = null\n          if (modifiers.document) {\n            target = document.documentElement\n          } else {\n            const attributeName = libraryOptions.prefix + '-' + directive + '-' + libraryOptions.targetDirectiveName\n            if (element.getAttribute(attributeName)) {\n              if (libraryOptions.targetDirectiveEvaluate) {\n                target = processExpression(\n                  component,\n                  attribute,\n                  element.getAttribute(attributeName),\n                )\n              } else {\n                target = element.getAttribute(attributeName)\n              }\n              if (target && typeof (target) === 'string') {\n                target = element.querySelector(target)\n              }\n            }\n            if (!target) {\n              target = element\n            }\n          }\n\n          // Update target.\n          if (position === 'append') {\n            const child = elementFromString(html)\n            target.appendChild(child)\n            if (libraryOptions.allowInlineScript || modifiers.script) {\n              readdScripts(child)\n            }\n          } else if (position === 'prepend') {\n            const child = elementFromString(html)\n            target.prepend(child)\n            if (libraryOptions.allowInlineScript || modifiers.script) {\n              readdScripts(child)\n            }\n          } else if (position === 'after') {\n            const child = elementFromString(html)\n            insertAfter(target, child)\n            if (libraryOptions.allowInlineScript || modifiers.script) {\n              readdScripts(child)\n            }\n          } else if (position === 'before') {\n            const child = elementFromString(html)\n            insertBefore(target, child)\n            if (libraryOptions.allowInlineScript || modifiers.script) {\n              readdScripts(child)\n            }\n          } else if (position === 'outer') {\n            if (modifiers.morph) {\n              morphTree(target, html)\n            } else if (target.outerHTML !== html) {\n              target.outerHTML = html\n              if (libraryOptions.allowInlineScript || modifiers.script) {\n                readdScripts(target)\n              }\n            }\n          } else if (modifiers.morph) {\n            // Ensure element only has one child.\n            if (target.children.length === 0) {\n              target.appendChild(document.createElement('div'))\n            } else if (target.children.length > 1) {\n              for (let i = target.children.length - 1; i >= 1; i--) {\n                target.children[i].remove()\n              }\n            }\n\n            // Morph first child to given target tree.\n            const root = morphTree(target.children[0], html)\n            if (!target.children[0].isSameNode(root)) {\n              target.children[0].remove()\n              target.appendChild(root)\n            }\n          } else if (target.innerHTML !== html) {\n            target.innerHTML = html\n            if (libraryOptions.allowInlineScript || modifiers.script) {\n              readdScripts(...target.children)\n            }\n          }\n\n          // Get new document link.\n          if (libraryOptions.redirectHeaderName && result.headers.has(libraryOptions.prefix + '-' + libraryOptions.titleHeaderName)) {\n            window.location.href = result.headers.get(libraryOptions.prefix + '-' + libraryOptions.titleHeaderName)\n            return\n          }\n\n          // Get new document title.\n          let documentTitle = ''\n          if (libraryOptions.titleHeaderName && result.headers.has(libraryOptions.prefix + '-' + libraryOptions.titleHeaderName)) {\n            documentTitle = result.headers.get(libraryOptions.prefix + '-' + libraryOptions.titleHeaderName)\n          }\n\n          // Update history api.\n          if (modifiers.document && modifiers.history) {\n            history.pushState({}, documentTitle, url)\n          }\n\n          // If document title was not updated via the history update, then set it now.\n          if (documentTitle && document.title !== documentTitle) {\n            document.title = documentTitle\n          }\n\n          hideIndicator(\n            component,\n            attribute,\n          )\n\n          dispatchEvent('-succeeded', {\n            url,\n          })\n        })\n        .catch(() => {\n          hideIndicator(\n            component,\n            attribute,\n          )\n\n          dispatchEvent('-failed', {\n            url,\n          })\n        })\n    }\n\n    let isLoading = false\n    /**\n     * Handles the interaction with a element containing the directive.\n     * @param {Event} event Document event to handle.\n     * @returns {void}\n     */\n    const handler = (\n      event,\n    ) => {\n      // Only fire when self is provided if the target is the element itself.\n      if (modifiers.self && event.target !== element) {\n        return\n      }\n\n      if (isForm && !element.reportValidity()) {\n        dispatchEvent('-invalid')\n        return\n      }\n\n      // Prevent the default event action.\n      if (\n        (isForm && eventName === 'submit') ||\n        (isButton && element.getAttribute('type', 'button') && eventName === 'click') ||\n        modifiers.prevent\n      ) {\n        event.preventDefault()\n      }\n      // Stop propagation if the stop modifier is present.\n      if (modifiers.stop) {\n        event.stopPropagation()\n      }\n\n      const execute = (\n      ) => {\n        let url = null\n        if (value && fetchDirectiveEvaluate) {\n          url = processExpression(\n            component,\n            attribute,\n            value,\n            {\n              $event: event,\n              $events: attribute[FETCH].buffer,\n            },\n          )\n        } else if (isForm && element.hasAttribute('action')) {\n          url = element.getAttribute('action')\n        }\n\n        // Reset the buffer.\n        attribute[FETCH].buffer = []\n\n        if (!url) {\n          return\n        }\n        isLoading = true\n\n        showIndicator(\n          component,\n          attribute,\n          processExpression,\n        )\n\n        if (isPromise(url)) {\n          url.then((url) => requestHandler(url))\n        } else {\n          requestHandler(url)\n        }\n      }\n\n      if (isLoading) {\n        return\n      }\n\n      // Store event in buffer.\n      attribute[FETCH].buffer.push(event)\n\n      // Check if we need to apply an execution modifier.\n      switch (executionModifier) {\n        case EXECUTION_MODIFIERS.BUFFER:\n          // Exit early if buffer is not full.\n          if (attribute[FETCH].buffer.length < modifiers.buffer) {\n            return\n          }\n\n          execute()\n          return\n\n        case EXECUTION_MODIFIERS.DEBOUNCE:\n          // Clear existing timeout.\n          if (attribute[FETCH].timeout) {\n            clearTimeout(attribute[FETCH].timeout)\n            attribute[FETCH].timeout = null\n          }\n\n          // Setup timeout and execute expression when it finishes.\n          attribute[FETCH].timeout = setTimeout(execute, modifiers.debounce)\n          return\n\n        case EXECUTION_MODIFIERS.THROTTLE:\n          // Get current time in milliseconds.\n          const nowThrottle = window.performance.now()\n\n          // Exit early if throttle time has not passed.\n          if (attribute[FETCH].lastExecution && nowThrottle - attribute[FETCH].lastExecution < modifiers.throttle) {\n            return\n          }\n\n          execute()\n\n          // Store new latest execution time.\n          attribute[FETCH].lastExecution = nowThrottle\n          return\n      }\n\n      // Otherwise execute expression immediately.\n      execute()\n    }\n\n    element.addEventListener(\n      eventName,\n      handler,\n      listenerOptions,\n    )\n\n    attribute[FETCH] = {\n      buffer: [],\n      eventName,\n      handler,\n      target: element,\n      timeout: attribute[FETCH] ? attribute[FETCH].timeout : undefined,\n      value,\n    }\n  },\n\n  destroy: (\n    component,\n    attribute,\n  ) => {\n    // Exit early if no listeners can be found.\n    if (!attribute[FETCH]) {\n      return\n    }\n\n    // Remove existing listener.\n    attribute[FETCH].target.removeEventListener(\n      attribute[FETCH].eventName,\n      attribute[FETCH].handler,\n    )\n    // Clear any ongoing timeouts.\n    if (attribute[FETCH].timeout) {\n      clearTimeout(attribute[FETCH].timeout)\n    }\n\n    hideIndicator(\n      component,\n      attribute,\n    )\n\n    // Delete directive data.\n    delete attribute[FETCH]\n  },\n})\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n */\n\nimport createFetchContext from './contexts/fetch.js'\nimport createFetchDirective from './directives/fetch.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    fetchContextName: '$fetch',\n    fetchDirectiveEvaluate: true,\n    fetchDirectiveName: 'fetch',\n    fetchOptions: {},\n  }, options)\n  if (options.defaultInit) {\n    Object.assign(options.fetchOptions, options.defaultInit)\n  }\n\n  // Set private variables.\n  let isEnabled = false\n  // Store contexts and directives.\n  const fetchContext = createFetchContext(options),\n    fetchDirective = createFetchDirective(options)\n\n  const onEnable = (\n  ) => {\n    // Create and add contexts and directives.\n    library.addContexts(0, fetchContext)\n    library.addDirectives(-1, fetchDirective)\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove contexts and directives.\n    library.removeContexts(fetchContext)\n    library.removeDirective(fetchDirective)\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": ["response", "child", "fetch_default", "url", "fetch_default"]
}
