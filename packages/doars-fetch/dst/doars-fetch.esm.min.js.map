{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/utilities/Fetch.js", "../src/factories/contexts/fetch.js", "../src/symbols.js", "../src/factories/directives/fetch.js", "../src/DoarsFetch.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "export const parseResponse = (response, type) => {\n  let promise;\n\n  switch (String.prototype.toLowerCase.call(type)) {\n    default:\n      console.warn('Unknown response type \"' + type + '\" used when using the $fetch context.');\n      break;\n\n    case 'arraybuffer':\n      promise = response.arrayBuffer();\n      break;\n\n    case 'blob':\n      promise = response.blob();\n      break;\n\n    case 'formdata':\n      promise = response.formData();\n      break;\n\n    case 'json':\n      promise = response.json();\n      break;\n    // HTML and xml need to be converted to text before being able to be parsed.\n\n    case 'element':\n    case 'html':\n    case 'svg':\n    case 'text':\n    case 'xml':\n      promise = response.text();\n      break;\n  }\n\n  if (!promise) {\n    return null;\n  }\n\n  return promise.then(response => {\n    switch (type) {\n      // Convert from html to HTMLElement inside a document fragment.\n      case 'element':\n        const template = document.createElement('template');\n        template.innerHTML = response;\n        response = template.content.childNodes[0];\n        break;\n      // Parse some values via the DOM parser.\n\n      case 'html':\n        response = new DOMParser().parseFromString(response, 'text/html');\n        break;\n\n      case 'svg':\n        response = new DOMParser().parseFromString(response, 'image/svg+xml');\n        break;\n\n      case 'xml':\n        response = new DOMParser().parseFromString(response, 'application/xml');\n        break;\n    }\n\n    return response;\n  });\n};\nexport const responseType = response => {\n  switch (String.prototype.toLowerCase(response.headers.get('content-type'))) {\n    case 'text/html':\n      return 'html';\n\n    case 'application/json':\n    case 'application/ld+json':\n    case 'application/vnd.api+json':\n      return 'json';\n\n    case 'image/svg+xml':\n      return 'svg';\n\n    case 'text/plain':\n      return 'text';\n\n    case 'application/xml':\n    case 'text/xml':\n      return 'xml';\n  }\n\n  return null;\n};", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js';\nimport { parseResponse, responseType } from '../../utilities/Fetch.js';\nexport default (({\n  defaultInit\n}) => {\n  return {\n    name: '$fetch',\n    create: () => {\n      return {\n        value: (url, init = null) => {\n          // Apply default options to init.\n          if (defaultInit) {\n            init = deepAssign({}, defaultInit, init);\n          } // Extract optional return type.\n\n\n          let returnType = init.returnType ? init.returnType : null;\n          delete init.returnType; // Perform and process fetch request.\n\n          return fetch(url, init).then(response => {\n            // Automatically base return type on header.\n            if (returnType === 'auto' && response.headers.get('content-type')) {\n              returnType = responseType(response);\n            } // Parse response based on return type.\n\n\n            if (returnType) {\n              response = parseResponse(response, returnType);\n            }\n\n            return response;\n          });\n        }\n      };\n    }\n  };\n});", "export const FETCH = Symbol('FETCH');", "// Import symbols.\nimport { FETCH } from '../../symbols.js';\nexport default (({\n  defaultInit,\n  encodingConverters\n}) => {\n  return {\n    name: 'fetch',\n    update: (component, attribute, {\n      processExpression\n    }) => {// TODO: Add most modifiers from 'on' directive, such as delay, prevent, and once.\n      // TODO: Add delete, get, patch, post, and put modifiers.\n      // TODO: Add inner, outer, inner-append, outer-append, inner-prepend, outer-prepend, morph modifiers.\n      // TODO: Add reference modifier whose first part is the keyword and the second part the name of the reference key. Only available in combination with the inner or outer modifier.\n      // TODO: Add encoding modifier whose first part is the keyword and the second part the name of the encoding type.\n      // TODO: Auto listen to click events on buttons if no event is specified.\n      // TODO: Auto listen to submit events on forms if no event is specified.\n      // TODO: Handle enctype attribute on form.\n      // TODO: Handle form validation. Take required and pattern attributes into account.\n      // TODO: Handle input type form.\n      // TODO: Use method attribute on form if related modifier is not used.\n      // TODO: Use action attribute on form if no attribute value is specified.\n      // TODO: Dispatch d-fetch event on element.\n      // TODO: Dispatch d-fetch-error event on element when a fetch error occurs.\n      // TODO: Dispatch d-fetch-invalid event on element when form validation fails.\n    }\n  };\n});", "// Import contexts.\nimport createFetchContext from './factories/contexts/fetch.js';\nimport createFetchDirective from './factories/directives/fetch.js';\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\n\nexport default function (library, options = null) {\n  // Clone options.\n  options = Object.assign({\n    defaultInit: {},\n    encodingConverters: {\n      'application/json': () => {},\n      'application/x-www-form-urlencoded': () => {},\n      'multipart/formdata': () => {}\n    }\n  }, options); // Set private variables.\n\n  let isEnabled = false; // Store contexts and directives.\n\n  let fetchContext, fetchDirective;\n\n  const onEnable = function () {\n    // Create and add contexts and directives.\n    fetchContext = createFetchContext(options);\n    library.addContexts(0, fetchContext);\n    fetchDirective = createFetchDirective(options);\n    library.addDirectives(-1, fetchDirective);\n  };\n\n  const onDisable = function () {\n    // Remove contexts and directives.\n    library.removeContexts(fetchContext);\n    fetchContext = null;\n    library.removeDirective(fetchDirective);\n    fetchDirective = null;\n  };\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false; // Stop listening to enable state of the library.\n\n      library.removeEventListener('enabling', onEnable);\n      library.removeEventListener('disabling', onDisable);\n    }\n  };\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true; // Listen to enable state of the library.\n\n      library.addEventListener('enabling', onEnable);\n      library.addEventListener('disabling', onDisable);\n    }\n  }; // Automatically enable plugin.\n\n\n  this.enable();\n}"],
  "mappings": "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",
  "names": ["deepAssign", "target", "sources", "source", "isObject", "key", "value", "isObject", "value", "parseResponse", "response", "type", "promise", "template", "responseType", "fetch_default", "defaultInit", "url", "init", "deepAssign", "returnType", "response", "responseType", "parseResponse", "FETCH", "fetch_default", "defaultInit", "encodingConverters", "component", "attribute", "processExpression", "DoarsFetch_default", "library", "options", "isEnabled", "fetchContext", "fetchDirective", "onEnable", "fetch_default", "onDisable"]
}
