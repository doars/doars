{
  "version": 3,
  "sources": ["../src/factories/contexts/store.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../../common/src/utilities/Object.js", "../src/DoarsStore.js"],
  "sourcesContent": ["export default (options, id, store, proxy) => {\n  return {\n    deconstruct: !!options.deconstruct,\n\n    name: '$store',\n\n    create: (component, attribute, update, { RevocableProxy }) => {\n      // Create event handlers.\n      const onDelete = (target, path) => update(id, path.join('.'))\n      const onGet = (target, path) => attribute.accessed(id, path.join('.'))\n      const onSet = (target, path) => update(id, path.join('.'))\n\n      // Add event listeners.\n      proxy.addEventListener('delete', onDelete)\n      proxy.addEventListener('get', onGet)\n      proxy.addEventListener('set', onSet)\n\n      // Wrap in a revocable proxy.\n      const revocable = RevocableProxy(store, {})\n\n      return {\n        value: revocable.proxy,\n\n        // Remove event listeners.\n        destroy: () => {\n          proxy.removeEventListener('delete', onDelete)\n          proxy.removeEventListener('get', onGet)\n          proxy.removeEventListener('set', onSet)\n\n          // Revoke access to store.\n          revocable.revoke()\n        },\n      }\n    },\n  }\n}\n", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = [\n  'apply',\n  'construct',\n  'defineProperty',\n  'deleteProperty',\n  'get',\n  'getOwnPropertyDescriptor',\n  'getPrototypeOf',\n  'isExtensible',\n  'ownKeys',\n  'preventExtensions',\n  'set',\n  'setPrototypeOf',\n]\n\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\nexport default (target, handler) => {\n  // Keep track of status.\n  let revoked = false\n\n  // Add revocable handlers for each given handlers.\n  const revocableHandler = {}\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy')\n        return\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters)\n      }\n      return Reflect[key](...parameters)\n    }\n  }\n\n  // Return proxy and revoke method.\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true\n    },\n  }\n}\n", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {}\n\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = []\n      }\n\n      // Add to events.\n      events[name].push({\n        callback,\n        options,\n      })\n    }\n\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return\n      }\n      const eventData = events[name]\n\n      // Get index of callback in events.\n      let index = -1\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i\n          break\n        }\n      }\n      if (index < 0) {\n        return\n      }\n\n      // Remove item from events.\n      eventData.splice(index, 1)\n\n      // Remove event if list is empty.\n      if (Object.keys(eventData).length === 0) {\n        delete events[name]\n      }\n    }\n\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n    this.removeEventListeners = (name) => {\n      if (!name) {\n        return\n      }\n\n      // Remove all handlers with the event name.\n      delete events[name]\n    }\n\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {}\n    }\n\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return\n      }\n      // Get events by trigger name.\n      const eventData = events[name]\n\n      // Dispatch a call to each event.\n      for (let i = 0; i < eventData.length; i++) {\n        const event = (options && options.reverse) ? eventData[eventData.length - (i + 1)] : eventData[i]\n\n        // If once is truthy then remove the callback.\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1)\n        }\n\n        // Execute callback.\n        event.callback(...parameters)\n      }\n    }\n  }\n}\n\nexport default EventDispatcher\n", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'\n\n// Import event dispatcher.\nimport EventDispatcher from './EventDispatcher.js'\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super()\n\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true,\n    }, options)\n\n    // Setup WeakMap for keep track of created proxies.\n    const map = new WeakMap()\n\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target)\n      }\n\n      // Recursively create proxies for each property.\n      for (const key in target) {\n        if (target[key] && typeof (target[key]) === 'object') {\n          target[key] = this.add(target[key], [...path, key])\n        }\n      }\n\n      // Create handler and add the handler for which a callback exits..\n      const handler = {}\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true\n          }\n\n          // Remove proxy.\n          this.remove(target, key)\n\n          // Delete property.\n          const deleted = Reflect.deleteProperty(target, key)\n\n          // Dispatch delete event.\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]])\n          }\n\n          // Return deleted.\n          return deleted\n        }\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver])\n          }\n\n          // Return value from object.\n          return Reflect.get(target, key, receiver)\n        }\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof value === 'object') {\n            value = this.add(value, [...path, key])\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver])\n\n          // Return success.\n          return true\n        }\n      }\n\n      // Create proxy.\n      const revocable = RevocableProxy(target, handler)\n\n      // Store target at proxy.\n      map.set(revocable, target)\n\n      // Return proxy.\n      return revocable.proxy\n    }\n\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n    this.remove = (target) => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return\n      }\n\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          this.remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n}\n\nexport default ProxyDispatcher\n", "/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\nexport const getDeeply = (object, path) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\nexport const isObject = (value) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "// Import contexts.\nimport createContextStore from './factories/contexts/store.js'\n\n// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'\n\n// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n * @param {Object} dataStore Initial store data.\n */\nexport default function (\n  library,\n  options = null,\n  dataStore = {}\n) {\n  // Clone options.\n  options = Object.assign({\n    deconstruct: false,\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n  let contextStore, dataStoreCopy, proxy, store\n\n  const onEnable = function () {\n    // Create proxy.\n    dataStoreCopy = deepAssign({}, dataStore)\n    proxy = new ProxyDispatcher()\n    store = proxy.add(dataStoreCopy)\n\n    // Create store id.\n    const id = Symbol('ID_STORE')\n\n    // Create contexts.\n    contextStore = createContextStore(options, id, store, proxy)\n    // Get index of state and insert the context directly before it.\n    const existingContexts = library.getContexts()\n    let stateIndex = 0\n    for (let i = existingContexts.length - 1; i >= 0; i--) {\n      const context = existingContexts[i]\n      if (context.name === '$state') {\n        stateIndex = i\n        break\n      }\n    }\n    library.addContexts(stateIndex, contextStore)\n  }\n  const onDisable = function () {\n    // Remove contexts.\n    library.removeContexts(contextStore)\n\n    // Reset references.\n    store = null\n    proxy.remove(dataStoreCopy)\n    proxy = null\n    dataStoreCopy = null\n    contextStore = null\n  }\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": ["target"]
}
