{
  "version": 3,
  "sources": ["../src/factories/contexts/store.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../../common/src/utilities/Object.js", "../src/DoarsStore.js", "../src/DoarsStore.iife.js"],
  "sourcesContent": ["export default ((options, id, store, proxy) => {\n  return {\n    deconstruct: !!options.deconstruct,\n    name: '$store',\n    create: (component, attribute, update, {\n      RevocableProxy\n    }) => {\n      // Create event handlers.\n      const onDelete = (target, path) => update(id, path.join('.'));\n\n      const onGet = (target, path) => attribute.accessed(id, path.join('.'));\n\n      const onSet = (target, path) => update(id, path.join('.')); // Add event listeners.\n\n\n      proxy.addEventListener('delete', onDelete);\n      proxy.addEventListener('get', onGet);\n      proxy.addEventListener('set', onSet); // Wrap in a revocable proxy.\n\n      const revocable = RevocableProxy(store, {});\n      return {\n        value: revocable.proxy,\n        // Remove event listeners.\n        destroy: () => {\n          proxy.removeEventListener('delete', onDelete);\n          proxy.removeEventListener('get', onGet);\n          proxy.removeEventListener('set', onSet); // Revoke access to store.\n\n          revocable.revoke();\n        }\n      };\n    }\n  };\n});", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = ['apply', 'construct', 'defineProperty', 'deleteProperty', 'get', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf'];\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\n\nexport default ((target, handler) => {\n  // Keep track of status.\n  let revoked = false; // Add revocable handlers for each given handlers.\n\n  const revocableHandler = {};\n\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy');\n        return;\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters);\n      }\n\n      return Reflect[key](...parameters);\n    };\n  } // Return proxy and revoke method.\n\n\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true;\n    }\n  };\n});", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {};\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = [];\n      } // Add to events.\n\n\n      events[name].push({\n        callback: callback,\n        options: options\n      });\n    };\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n\n\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return;\n      }\n\n      const eventData = events[name]; // Get index of callback in events.\n\n      let index = -1;\n\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        return;\n      } // Remove item from events.\n\n\n      eventData.splice(index, 1); // Remove event if list is empty.\n\n      if (Object.keys(eventData).length === 0) {\n        delete events[name];\n      }\n    };\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeEventListeners = name => {\n      if (!name) {\n        return;\n      } // Remove all handlers with the event name.\n\n\n      delete events[name];\n    };\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {};\n    };\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n\n\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return;\n      } // Get events by trigger name.\n\n\n      const eventData = events[name]; // Dispatch a call to each event.\n\n      for (let i = 0; i < eventData.length; i++) {\n        const event = options && options.reverse ? eventData[eventData.length - (i + 1)] : eventData[i]; // If once is truthy then remove the callback.\n\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1);\n        } // Execute callback.\n\n\n        event.callback(...parameters);\n      }\n    };\n  }\n\n}\n\nexport default EventDispatcher;", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'; // Import event dispatcher.\n\nimport EventDispatcher from './EventDispatcher.js';\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super();\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true\n    }, options); // Setup WeakMap for keep track of created proxies.\n\n    const map = new WeakMap();\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target);\n      } // Recursively create proxies for each property.\n\n\n      for (const key in target) {\n        if (target[key] && typeof target[key] === 'object') {\n          target[key] = this.add(target[key], [...path, key]);\n        }\n      } // Create handler and add the handler for which a callback exits..\n\n\n      const handler = {};\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true;\n          } // Remove proxy.\n\n\n          this.remove(target, key); // Delete property.\n\n          const deleted = Reflect.deleteProperty(target, key); // Dispatch delete event.\n\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]]);\n          } // Return deleted.\n\n\n          return deleted;\n        };\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver]);\n          } // Return value from object.\n\n\n          return Reflect.get(target, key, receiver);\n        };\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true;\n          } // Add proxy if value is an object.\n\n\n          if (typeof value === 'object') {\n            value = this.add(value, [...path, key]);\n          } // Store value.\n\n\n          target[key] = value; // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver]); // Return success.\n\n          return true;\n        };\n      } // Create proxy.\n\n\n      const revocable = RevocableProxy(target, handler); // Store target at proxy.\n\n      map.set(revocable, target); // Return proxy.\n\n      return revocable.proxy;\n    };\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n\n\n    this.remove = target => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return;\n      }\n\n      const revocable = map.get(target);\n      map.delete(revocable); // Recursively remove properties as well.\n\n      for (const property in revocable.proxy) {\n        if (typeof revocable.proxy[property] === 'object') {\n          this.remove(revocable.proxy[property]);\n        }\n      } // Revoke proxy.\n\n\n      revocable.revoke();\n    };\n  }\n\n}\n\nexport default ProxyDispatcher;", "/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import contexts.\nimport createContextStore from './factories/contexts/store.js'; // Import proxy dispatcher.\n\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'; // Import utilities.\n\nimport { deepAssign } from '@doars/common/src/utilities/Object.js';\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n * @param {Object} dataStore Initial store data.\n */\n\nexport default function (library, options = null, dataStore = {}) {\n  // Clone options.\n  options = Object.assign({\n    deconstruct: false\n  }, options); // Set private variables.\n\n  let isEnabled = false;\n  let contextStore, dataStoreCopy, proxy, store;\n\n  const onEnable = function () {\n    // Create proxy.\n    dataStoreCopy = deepAssign({}, dataStore);\n    proxy = new ProxyDispatcher();\n    store = proxy.add(dataStoreCopy); // Create store id.\n\n    const id = Symbol('ID_STORE'); // Create contexts.\n\n    contextStore = createContextStore(options, id, store, proxy); // Get index of state and insert the context directly before it.\n\n    const existingContexts = library.getContexts();\n    let stateIndex = 0;\n\n    for (let i = existingContexts.length - 1; i >= 0; i--) {\n      const context = existingContexts[i];\n\n      if (context.name === '$state') {\n        stateIndex = i;\n        break;\n      }\n    }\n\n    library.addContexts(stateIndex, contextStore);\n  };\n\n  const onDisable = function () {\n    // Remove contexts.\n    library.removeContexts(contextStore); // Reset references.\n\n    store = null;\n    proxy.remove(dataStoreCopy);\n    proxy = null;\n    dataStoreCopy = null;\n    directiveSyncStore = null;\n    contextStore = null;\n  };\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false; // Stop listening to enable state of the library.\n\n      library.removeEventListener('enabling', onEnable);\n      library.removeEventListener('disabling', onDisable);\n    }\n  };\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true; // Listen to enable state of the library.\n\n      library.addEventListener('enabling', onEnable);\n      library.addEventListener('disabling', onDisable);\n    }\n  }; // Automatically enable plugin.\n\n\n  this.enable();\n}", "import DoarsStore from './DoarsStore.js';\nwindow.DoarsStore = DoarsStore;"],
  "mappings": "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",
  "names": ["target"]
}
