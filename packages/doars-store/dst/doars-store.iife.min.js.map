{
  "version": 3,
  "sources": ["../src/factories/contexts/store.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../../common/src/utilities/Object.js", "../src/DoarsStore.js", "../src/DoarsStore.iife.js"],
  "sourcesContent": ["export default ((options, id, store, proxy) => {\n  return {\n    deconstruct: !!options.deconstruct,\n    name: '$store',\n    create: (component, attribute, update, {\n      RevocableProxy\n    }) => {\n      // Create event handlers.\n      const onDelete = (target, path) => update(id, path.join('.'));\n\n      const onGet = (target, path) => attribute.accessed(id, path.join('.'));\n\n      const onSet = (target, path) => update(id, path.join('.')); // Add event listeners.\n\n\n      proxy.addEventListener('delete', onDelete);\n      proxy.addEventListener('get', onGet);\n      proxy.addEventListener('set', onSet); // Wrap in a revocable proxy.\n\n      const revocable = RevocableProxy(store, {});\n      return {\n        value: revocable.proxy,\n        // Remove event listeners.\n        destroy: () => {\n          proxy.removeEventListener('delete', onDelete);\n          proxy.removeEventListener('get', onGet);\n          proxy.removeEventListener('set', onSet); // Revoke access to store.\n\n          revocable.revoke();\n        }\n      };\n    }\n  };\n});", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = ['apply', 'construct', 'defineProperty', 'deleteProperty', 'get', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf'];\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\n\nexport default ((target, handler) => {\n  // Keep track of status.\n  let revoked = false; // Add revocable handlers for each given handlers.\n\n  const revocableHandler = {};\n\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy');\n        return;\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters);\n      }\n\n      return Reflect[key](...parameters);\n    };\n  } // Return proxy and revoke method.\n\n\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true;\n    }\n  };\n});", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {};\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = [];\n      } // Add to events.\n\n\n      events[name].push({\n        callback: callback,\n        options: options\n      });\n    };\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n\n\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return;\n      }\n\n      const eventData = events[name]; // Get index of callback in events.\n\n      let index = -1;\n\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        return;\n      } // Remove item from events.\n\n\n      eventData.splice(index, 1); // Remove event if list is empty.\n\n      if (Object.keys(eventData).length === 0) {\n        delete events[name];\n      }\n    };\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeEventListeners = name => {\n      if (!name) {\n        return;\n      } // Remove all handlers with the event name.\n\n\n      delete events[name];\n    };\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {};\n    };\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n\n\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return;\n      } // Get events by trigger name.\n\n\n      const eventData = events[name]; // Dispatch a call to each event.\n\n      for (let i = 0; i < eventData.length; i++) {\n        const event = options && options.reverse ? eventData[eventData.length - (i + 1)] : eventData[i]; // If once is truthy then remove the callback.\n\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1);\n        } // Execute callback.\n\n\n        event.callback(...parameters);\n      }\n    };\n  }\n\n}\n\nexport default EventDispatcher;", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'; // Import event dispatcher.\n\nimport EventDispatcher from './EventDispatcher.js';\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super();\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true\n    }, options); // Setup WeakMap for keep track of created proxies.\n\n    const map = new WeakMap();\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target);\n      } // Recursively create proxies for each property.\n\n\n      for (const key in target) {\n        if (target[key] && typeof target[key] === 'object') {\n          target[key] = this.add(target[key], [...path, key]);\n        }\n      } // Create handler and add the handler for which a callback exits..\n\n\n      const handler = {};\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true;\n          } // Remove proxy.\n\n\n          this.remove(target, key); // Delete property.\n\n          const deleted = Reflect.deleteProperty(target, key); // Dispatch delete event.\n\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]]);\n          } // Return deleted.\n\n\n          return deleted;\n        };\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver]);\n          } // Return value from object.\n\n\n          return Reflect.get(target, key, receiver);\n        };\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true;\n          } // Add proxy if value is an object.\n\n\n          if (typeof value === 'object') {\n            value = this.add(value, [...path, key]);\n          } // Store value.\n\n\n          target[key] = value; // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver]); // Return success.\n\n          return true;\n        };\n      } // Create proxy.\n\n\n      const revocable = RevocableProxy(target, handler); // Store target at proxy.\n\n      map.set(revocable, target); // Return proxy.\n\n      return revocable.proxy;\n    };\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n\n\n    this.remove = target => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return;\n      }\n\n      const revocable = map.get(target);\n      map.delete(revocable); // Recursively remove properties as well.\n\n      for (const property in revocable.proxy) {\n        if (typeof revocable.proxy[property] === 'object') {\n          this.remove(revocable.proxy[property]);\n        }\n      } // Revoke proxy.\n\n\n      revocable.revoke();\n    };\n  }\n\n}\n\nexport default ProxyDispatcher;", "/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import contexts.\nimport createContextStore from './factories/contexts/store.js'; // Import proxy dispatcher.\n\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'; // Import utilities.\n\nimport { deepAssign } from '@doars/common/src/utilities/Object.js';\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n * @param {Object} dataStore Initial store data.\n */\n\nexport default function (library, options = null, dataStore = {}) {\n  // Clone options.\n  options = Object.assign({\n    deconstruct: false\n  }, options); // Set private variables.\n\n  let isEnabled = false;\n  let contextStore, dataStoreCopy, proxy, store;\n\n  const onEnable = function () {\n    // Create proxy.\n    dataStoreCopy = deepAssign({}, dataStore);\n    proxy = new ProxyDispatcher();\n    store = proxy.add(dataStoreCopy); // Create store id.\n\n    const id = Symbol('ID_STORE'); // Create contexts.\n\n    contextStore = createContextStore(options, id, store, proxy); // Get index of state and insert the context directly before it.\n\n    const existingContexts = library.getContexts();\n    let stateIndex = 0;\n\n    for (let i = existingContexts.length - 1; i >= 0; i--) {\n      const context = existingContexts[i];\n\n      if (context.name === '$state') {\n        stateIndex = i;\n        break;\n      }\n    }\n\n    library.addContexts(stateIndex, contextStore);\n  };\n\n  const onDisable = function () {\n    // Remove contexts.\n    library.removeContexts(contextStore); // Reset references.\n\n    store = null;\n    proxy.remove(dataStoreCopy);\n    proxy = null;\n    dataStoreCopy = null;\n    directiveSyncStore = null;\n    contextStore = null;\n  };\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false; // Stop listening to enable state of the library.\n\n      library.removeEventListener('enabling', onEnable);\n      library.removeEventListener('disabling', onDisable);\n    }\n  };\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true; // Listen to enable state of the library.\n\n      library.addEventListener('enabling', onEnable);\n      library.addEventListener('disabling', onDisable);\n    }\n  }; // Automatically enable plugin.\n\n\n  this.enable();\n}", "import DoarsStore from './DoarsStore.js';\nwindow.DoarsStore = DoarsStore;"],
  "mappings": "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",
  "names": ["store_default", "options", "id", "store", "proxy", "component", "attribute", "update", "RevocableProxy", "onDelete", "target", "path", "onGet", "onSet", "revocable", "REFLECTION_METHODS", "RevocableProxy_default", "target", "handler", "revoked", "revocableHandler", "key", "parameters", "EventDispatcher", "events", "name", "callback", "options", "eventData", "index", "i", "parameters", "event", "EventDispatcher_default", "ProxyDispatcher", "EventDispatcher_default", "options", "map", "target", "path", "key", "handler", "deleted", "receiver", "value", "revocable", "RevocableProxy_default", "property", "ProxyDispatcher_default", "deepAssign", "target", "sources", "source", "isObject", "key", "value", "isObject", "value", "DoarsStore_default", "library", "options", "dataStore", "isEnabled", "contextStore", "dataStoreCopy", "proxy", "store", "onEnable", "deepAssign", "ProxyDispatcher_default", "id", "store_default", "existingContexts", "stateIndex", "i", "onDisable", "DoarsStore_default"]
}
