{
  "version": 3,
  "sources": ["../src/symbols.js", "../../common/src/events/EventDispatcher.js", "../../common/src/utilities/String.js", "../src/Attribute.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/ProxyDispatcher.js", "../src/utilities/Component.js", "../../common/src/utilities/Attribute.js", "../../common/src/utilities/Transition.js", "../../common/src/utilities/Element.js", "../src/Component.js", "../src/contexts/children.js", "../src/contexts/component.js", "../src/contexts/element.js", "../src/contexts/dispatch.js", "../src/contexts/for.js", "../src/contexts/inContext.js", "../src/contexts/nextTick.js", "../src/contexts/parent.js", "../src/contexts/references.js", "../src/contexts/state.js", "../../common/src/utilities/Promise.js", "../src/directives/attribute.js", "../src/directives/cloak.js", "../src/directives/for.js", "../../common/src/utilities/Html.js", "../src/directives/html.js", "../src/directives/if.js", "../src/directives/initialized.js", "../src/directives/on.js", "../src/directives/reference.js", "../src/directives/select.js", "../src/directives/show.js", "../src/utilities/Context.js", "../../common/src/utilities/Object.js", "../src/directives/sync.js", "../src/directives/text.js", "../src/directives/watch.js", "../src/Doars.js", "../src/utilities/Execute.js", "../src/DoarsExecute.js", "../src/DoarsExecute.iife.js"],
  "sourcesContent": ["export const ATTRIBUTES = Symbol('ATTRIBUTES')\n\nexport const COMPONENT = Symbol('COMPONENT')\n\nexport const FOR = Symbol('FOR')\n\nexport const INITIALIZED = Symbol('INITIALIZED')\n\nexport const ON = Symbol('ON')\n\nexport const REFERENCES = Symbol('REFERENCES')\nexport const REFERENCES_CACHE = Symbol('REFERENCES_CACHE')\n\nexport const SYNC = Symbol('SYNC')\n", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {}\n\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = []\n      }\n\n      // Add to events.\n      events[name].push({\n        callback,\n        options,\n      })\n    }\n\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return\n      }\n      const eventData = events[name]\n\n      // Get index of callback in events.\n      let index = -1\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i\n          break\n        }\n      }\n      if (index < 0) {\n        return\n      }\n\n      // Remove item from events.\n      eventData.splice(index, 1)\n\n      // Remove event if list is empty.\n      if (Object.keys(eventData).length === 0) {\n        delete events[name]\n      }\n    }\n\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n    this.removeEventListeners = (name) => {\n      if (!name) {\n        return\n      }\n\n      // Remove all handlers with the event name.\n      delete events[name]\n    }\n\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {}\n    }\n\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return\n      }\n      // Get events by trigger name.\n      const eventData = events[name]\n\n      // Dispatch a call to each event.\n      for (let i = 0; i < eventData.length; i++) {\n        const event = (options && options.reverse) ? eventData[eventData.length - (i + 1)] : eventData[i]\n\n        // If once is truthy then remove the callback.\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1)\n        }\n\n        // Execute callback.\n        event.callback(...parameters)\n      }\n    }\n  }\n}\n\nexport default EventDispatcher\n", "/**\n * Escape slashes, quotation marks, and new lines.\n * @param {String} text String to escape.\n * @returns {String} Escaped string.\n */\nexport const escapeHtml = (text) => {\n  return text\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\\\\'/g, '\\\\\\'')\n    .replace(/\\\\\"/g, '\\\\\"')\n    .replace(/\\n/g, '\\\\n')\n}\n\n/**\n * Convert a string from kebab-case to camelCase.\n * @param {String} text String to modify.\n * @returns {String} Converted string.\n */\nexport const kebabToCamel = (text) => {\n  return text.replace(/-(\\w)/g, (match, character) => character.toUpperCase())\n}\n\n/**\n * Parse list of modifiers to an object.\n * - [ 'hello', 'there-100', 'general-kenobi' ]\n *    -> { 'hello': true, 'there': 100, 'general': 'kenobi' }\n * @param {Array<String>} modifiers List of modifiers to parse.\n * @returns {Object} Parsed modifiers.\n */\nexport const parseAttributeModifiers = (modifiers) => {\n  const result = {}\n  for (const modifier of modifiers) {\n    // Get index of hyphen.\n    const hyphenIndex = modifier.indexOf('-')\n\n    // If no hyphen then set the modifiers to true.\n    if (hyphenIndex < 0) {\n      result[modifier] = true\n      continue\n    }\n\n    // If it starts with hyphen then set the modifier to false.\n    if (hyphenIndex === 0) {\n      result[modifier.substring(1)] = false\n      continue\n    }\n\n    // If the hyphen is somewhere in the modifier then assume it is used as a split character.\n    const key = modifier.substring(0, hyphenIndex)\n    let value = modifier.substring(hyphenIndex + 1)\n\n    let tmpValue = value\n\n    // Try to remove time suffixes.\n    let type\n    if (value.endsWith('ms')) {\n      tmpValue = value.substring(-2)\n    } else if (value.endsWith('s')) {\n      type = 's'\n      tmpValue = value.substring(-1)\n    } else if (value.endsWith('m')) {\n      type = 'm'\n      tmpValue = value.substring(-1)\n    } else if (value.endsWith('h')) {\n      type = 'h'\n      tmpValue = value.substring(-1)\n    }\n\n    // Try to parse the value as a number.\n    tmpValue = Number.parseInt(tmpValue)\n    if (!isNaN(tmpValue)) {\n      value = tmpValue\n\n      // Convert to milliseconds if given in a different format.\n      switch (type) {\n        case 'h':\n          value *= 60\n        case 'm':\n          value *= 60\n        case 's':\n          value *= 1000\n          break\n      }\n    }\n\n    // Store modifier data.\n    result[key] = value\n  }\n\n  return result\n}\n\n/**\n * Parse attribute name to list of segments.\n * Valid formats are:\n * - \"d-directive\"\n *    -> [ 'directive', null, null, null ]\n * - \"d-directive:key\"\n *    -> [ 'directive', 'key', 'key', null ]\n * - \"d-directive:key-name\"\n *    -> [ 'directive', 'key-name', 'keyName', null ]\n * - \"d-directive:key-name.modifiers\"\n *    -> [ 'directive', 'key-name', 'keyName', [ 'modifiers' ] ]\n * - \"d-directive.modifiers.multiple\"\n *    -> [ 'directive', null, null, [ 'modifiers', 'multiple' ] ]\n * @param {String} name Name to parse.\n * @returns {Array<String>} list of segments.\n */\nexport const parseAttributeName = (prefix, name) => {\n  // Match with expression.\n  name = name.match(new RegExp('^' + prefix + '-([a-z][0-9a-z-]{1,}):?([a-z][0-9a-z-]*)?(\\\\..*]*)?$', 'i'))\n  if (!name) {\n    return\n  }\n  // Deconstruct match.\n  let [full, directive, keyRaw, modifiers] = name // eslint-disable-line no-unused-vars\n  // If no key provided set it to null instead of empty.\n  keyRaw = keyRaw !== '' ? keyRaw : null\n  const key = keyRaw ? kebabToCamel(keyRaw) : null\n  // Ensure modifiers is and array.\n  modifiers = modifiers ? modifiers.substring(1).split('.') : []\n  // Return result a single array.\n  return [directive, keyRaw, key, modifiers]\n}\n\n/**\n * Parses for expression. Valid expression formats are:\n * - \"index of 4\"\n *    -> { iterable: \"4\", variables: [ \"index\" ] }\n * - \"item of items\"\n *    -> { iterable: \"items\", variables: [ \"item\" ] }\n * - \"key in object\"\n *    -> { iterable: \"object\", variables: [ \"key\" ] }\n * - \"(key, value) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", \"value\" ] }\n * - \"(key, value, index) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", \"value\", \"index\" ] }\n * - \"(key, , index) in object\"\n *    -> { iterable: \"object\", variables: [ \"key\", undefined, \"index\" ] }\n */\nexport const parseForExpression = (expression) => {\n  // Split variables from items expression.\n  const match = expression.match(/^([$_a-z0-9,(){}\\s]{1,}?)\\s+(?:in|of)\\s+([\\s\\S]{1,})$/i)\n  if (!match) {\n    return\n  }\n\n  // Remove parenthesis.\n  let variables = match[1].replace(/^[\\s({]*|[)}\\s]*$/g, '')\n  // Parse for variables.\n  variables = variables.match(/^([$_a-z0-9]{1,})?(?:,\\s+?)?([$_a-z0-9]{1,})?(?:,\\s+)?([$_a-z0-9]{1,})?$/i)\n  if (!variables) {\n    return\n  }\n  variables.shift()\n  return {\n    iterable: match[2].trim(),\n    variables: [...variables], // Convert it to an array instead of a regular expression match.\n  }\n}\n\n/**\n * Parse selector to an attributes object.\n * @param {String} selector Selector to parse.\n * @returns {Object} Attributes. Do note the class property is a list of strings not a single string.\n */\nexport const parseSelector = (selector) => {\n  // Convert to array.\n  if (typeof (selector) === 'string') {\n    selector = selector.split(/(?=\\.)|(?=#)|(?=\\[)/)\n  }\n\n  if (!Array.isArray(selector)) {\n    console.error('Doars: parseSelector expects Array of string or a single string.')\n    return\n  }\n\n  const attributes = {}\n  for (let selectorSegment of selector) {\n    // Trim spaces.\n    selectorSegment = selectorSegment.trim()\n\n    // Base what to do of the leading character.\n    switch (selectorSegment[0]) {\n      case '#':\n        // Remove leading character and store as id.\n        attributes.id = selectorSegment.substring(1)\n        break\n\n      case '.':\n        // Remove leading character.\n        selectorSegment = selectorSegment.substring(1)\n        // Add to classlist.\n        if (!attributes.class) {\n          attributes.class = []\n        }\n        if (!attributes.class.includes(selectorSegment)) {\n          attributes.class.push(selectorSegment)\n        }\n        break\n\n      case '[':\n        // Remove brackets and split key from value.\n        const [full, key, value] = selectorSegment.match(/^(?:\\[)?([-$_.a-z0-9]{1,})(?:[$*^])?(?:=)?([\\s\\S]{0,})(?:\\])$/i) // eslint-disable-line no-unused-vars\n        // Store attribute value in results.\n        attributes[key] = value\n        break\n    }\n  }\n  return attributes\n}\n\nexport default {\n  escapeHtml,\n  kebabToCamel,\n  parseAttributeModifiers,\n  parseAttributeName,\n  parseForExpression,\n  parseSelector,\n}\n", "// Import event dispatcher.\nimport EventDispatcher from '@doars/common/src/events/EventDispatcher.js'\n\n// Import symbols.\nimport { ATTRIBUTES } from './symbols.js'\n\n// Import utilities.\nimport { parseAttributeName, parseAttributeModifiers } from '@doars/common/src/utilities/String.js'\n\nexport default class Attribute extends EventDispatcher {\n  /**\n   * Create instance.\n   * @param {Component} component Component instance.\n   * @param {HTMLElement} element Element.\n   * @param {String} name Attribute name (with library prefix removed).\n   * @param {String} value Attribute value.\n   * @param {Boolean} isClone Whether this will be a clone of an existing attribute.\n   */\n  constructor(component, element, name, value, isClone = false) {\n    super()\n\n    // Create unique ID.\n    const id = Symbol('ID_ATTRIBUTE')\n\n    if (!isClone) {\n      // Add attribute reference to the element.\n      if (!element[ATTRIBUTES]) {\n        element[ATTRIBUTES] = []\n      }\n      element[ATTRIBUTES].push(this)\n    }\n\n    // Create private variables.\n    let accessedItems = {}, data = null, directive, key, keyRaw, modifiersRaw, modifiers\n\n    // Parse and store name.\n    if (name) {\n      // Parse and store attribute name.\n      const [_directive, _keyRaw, _key, _modifiers] = parseAttributeName(component.getLibrary().getOptions().prefix, name)\n      directive = _directive\n      key = _key\n      keyRaw = _keyRaw\n      modifiersRaw = _modifiers\n\n      // Parse and store modifiers.\n      if (_modifiers) {\n        modifiers = parseAttributeModifiers(_modifiers)\n      }\n    }\n\n    /**\n     * Get the component this attribute is a part of.\n     * @returns {Component} Attribute's component.\n     */\n    this.getComponent = () => {\n      return component\n    }\n\n    /**\n     * Get the element this attribute belongs to.\n     * @returns {HTMLElement} Element.\n     */\n    this.getElement = () => {\n      return element\n    }\n\n    /**\n     * Get attribute id.\n     * @returns {Symbol} Unique identifier.\n     */\n    this.getId = () => {\n      return id\n    }\n\n    /**\n     * Get the directive this attribute matches.\n     * @returns {String} Directive name.\n     */\n    this.getDirective = () => {\n      return directive\n    }\n\n    /**\n     * Get the optional key of the attribute.\n     * @returns {String} Key.\n     */\n    this.getKey = () => {\n      return key\n    }\n\n    /**\n     * Get the optional key of the attribute before being processed.\n     * @returns {String} Raw key.\n     */\n    this.getKeyRaw = () => {\n      return keyRaw\n    }\n\n    /**\n     * Get the optional modifiers of the attribute.\n     * @returns {Object} Modifiers object.\n     */\n    this.getModifiers = () => {\n      return Object.assign({}, modifiers)\n    }\n\n    /**\n     * Get the optional modifiers of the attribute before being processed.\n     * @returns {Array<String>} List of raw modifiers.\n     */\n    this.getModifiersRaw = () => {\n      return modifiersRaw\n    }\n\n    /**\n     * Get attribute's name.\n     * @returns {String} Attribute name.\n     */\n    this.getName = () => {\n      return name\n    }\n\n    /**\n     * Get the attribute's value.\n     * @returns {String} Value.\n     */\n    this.getValue = () => {\n      return value\n    }\n\n    /**\n     * Set the attribute's value.\n     * @param {String} value New value.\n     */\n    this.setValue = (_value) => {\n      value = _value\n\n      // Dispatch changed event.\n      this.dispatchEvent('changed', [this])\n    }\n\n    /**\n     * Clear custom data set.\n     */\n    this.clearData = () => {\n      data = null\n    }\n\n    /**\n     * Whether there is data set.\n     * @returns {boolean} Whether data is set.\n     */\n    this.hasData = () => {\n      return data !== null\n    }\n\n    /**\n     * Get custom data set previously.\n     * @returns {any} the data.\n     */\n    this.getData = () => {\n      return data\n    }\n\n    /**\n     * Set custom attribute data.\n     * @param {any} data Some data.\n     */\n    this.setData = (_data) => {\n      data = _data\n    }\n\n    /**\n     * Destroy the attribute.\n     */\n    this.destroy = () => {\n      // Clear data.\n      this.setData(null)\n\n      // Clear accessed.\n      this.clearAccessed()\n\n      // Remove attribute from element's attributes.\n      const indexInElement = element[ATTRIBUTES].indexOf(this)\n      if (indexInElement >= 0) {\n        element[ATTRIBUTES].splice(indexInElement, 1)\n      }\n\n      // Dispatch destroy event.\n      this.dispatchEvent('destroyed', [this])\n\n      // Remove all listeners.\n      this.removeAllEventListeners()\n    }\n\n    /**\n     * Mark an item as accessed.\n     * @param {Symbol} id Unique identifier.\n     * @param {String} path Context path.\n     */\n    this.accessed = (id, path) => {\n      if (!accessedItems[id]) {\n        accessedItems[id] = []\n      } else if (accessedItems[id].includes(path)) {\n        return\n      }\n\n      accessedItems[id].push(path)\n\n      // Dispatch accessed event.\n      this.dispatchEvent('accessed', [this, id, path])\n    }\n\n    /**\n     * Clear list of accessed items.\n     */\n    this.clearAccessed = () => {\n      accessedItems = {}\n    }\n\n    /**\n     * Check if attribute accessed any of the item's paths.\n     * @param {Symbol} id Unique identifier.\n     * @param {Array<String>} paths Contexts path.\n     * @returns {Boolean} Whether any item's path was accessed.\n     */\n    this.hasAccessed = (id, paths) => {\n      if (!(id in accessedItems)) {\n        return false\n      }\n      const accessedAtId = accessedItems[id]\n\n      for (const path of paths) {\n        if (accessedAtId.includes(path)) {\n          return true\n        }\n      }\n      return false\n    }\n\n    /**\n     * Creates a clone of the attribute without copying over the id and accessed values.\n     * @returns {Attribute} Cloned attribute.\n     */\n    this.clone = () => {\n      // Create new attribute as clone.\n      return new Attribute(component, element, name, value, true)\n    }\n  }\n}\n", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = [\n  'apply',\n  'construct',\n  'defineProperty',\n  'deleteProperty',\n  'get',\n  'getOwnPropertyDescriptor',\n  'getPrototypeOf',\n  'isExtensible',\n  'ownKeys',\n  'preventExtensions',\n  'set',\n  'setPrototypeOf',\n]\n\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\nexport default (target, handler) => {\n  // Keep track of status.\n  let revoked = false\n\n  // Add revocable handlers for each given handlers.\n  const revocableHandler = {}\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy')\n        return\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters)\n      }\n      return Reflect[key](...parameters)\n    }\n  }\n\n  // Return proxy and revoke method.\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true\n    },\n  }\n}\n", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'\n\n// Import event dispatcher.\nimport EventDispatcher from './EventDispatcher.js'\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super()\n\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true,\n    }, options)\n\n    // Setup WeakMap for keep track of created proxies.\n    const map = new WeakMap()\n\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target)\n      }\n\n      // Recursively create proxies for each property.\n      for (const key in target) {\n        if (target[key] && typeof (target[key]) === 'object') {\n          target[key] = this.add(target[key], [...path, key])\n        }\n      }\n\n      // Create handler and add the handler for which a callback exits..\n      const handler = {}\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true\n          }\n\n          // Remove proxy.\n          this.remove(target, key)\n\n          // Delete property.\n          const deleted = Reflect.deleteProperty(target, key)\n\n          // Dispatch delete event.\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]])\n          }\n\n          // Return deleted.\n          return deleted\n        }\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver])\n          }\n\n          // Return value from object.\n          return Reflect.get(target, key, receiver)\n        }\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof value === 'object') {\n            value = this.add(value, [...path, key])\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver])\n\n          // Return success.\n          return true\n        }\n      }\n\n      // Create proxy.\n      const revocable = RevocableProxy(target, handler)\n\n      // Store target at proxy.\n      map.set(revocable, target)\n\n      // Return proxy.\n      return revocable.proxy\n    }\n\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n    this.remove = (target) => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return\n      }\n\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          this.remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n}\n\nexport default ProxyDispatcher\n", "// Import symbols.\nimport { COMPONENT } from '../symbols.js'\n\n/**\n * Get closest component in hierarchy.\n * @param {HTMLElement} element Element to start searching from.\n * @returns {Component} Closest component.\n */\nexport const closestComponent = (element) => {\n  if (element.parentElement) {\n    element = element.parentElement\n\n    if (element[COMPONENT]) {\n      return element[COMPONENT]\n    }\n\n    return closestComponent(element)\n  }\n}\n\nexport default {\n  closestComponent,\n}\n", "/**\n * Add attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {Object} data Attribute data to add.\n */\nexport const addAttributes = (element, data) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.add(className)\n      }\n      continue\n    }\n\n    // Set attribute.\n    element.setAttribute(name, data[name])\n  }\n}\n\n/**\n * Copy all attributes onto one node from another.\n * @param {HTMLElement} existingNode Node to copy to.\n * @param {HTMLElement} newNode Node to copy from.\n */\nexport const copyAttributes = (existingNode, newNode) => {\n  const existingAttributes = existingNode.attributes\n  const newAttributes = newNode.attributes\n  let attributeNamespaceURI = null\n  let attributeValue = null\n  let fromValue = null\n  let attributeName = null\n  let attribute = null\n\n  for (let i = newAttributes.length - 1; i >= 0; --i) {\n    attribute = newAttributes[i]\n    attributeName = attribute.name\n    attributeNamespaceURI = attribute.namespaceURI\n    attributeValue = attribute.value\n    if (attributeNamespaceURI) {\n      attributeName = attribute.localName || attributeName\n      fromValue = existingNode.getAttributeNS(attributeNamespaceURI, attributeName)\n      if (fromValue !== attributeValue) {\n        existingNode.setAttributeNS(attributeNamespaceURI, attributeName, attributeValue)\n      }\n    } else {\n      if (!existingNode.hasAttribute(attributeName)) {\n        existingNode.setAttribute(attributeName, attributeValue)\n      } else {\n        fromValue = existingNode.getAttribute(attributeName)\n        if (fromValue !== attributeValue) {\n          // apparently values are always cast to strings, ah well\n          if (attributeValue === 'null' || attributeValue === 'undefined') {\n            existingNode.removeAttribute(attributeName)\n          } else {\n            existingNode.setAttribute(attributeName, attributeValue)\n          }\n        }\n      }\n    }\n  }\n\n  // Remove any extra attributes found on the original DOM element that\n  // weren't found on the target element.\n  for (let j = existingAttributes.length - 1; j >= 0; --j) {\n    attribute = existingAttributes[j]\n    if (attribute.specified !== false) {\n      attributeName = attribute.name\n      attributeNamespaceURI = attribute.namespaceURI\n\n      if (attributeNamespaceURI) {\n        attributeName = attribute.localName || attributeName\n        if (!newNode.hasAttributeNS(attributeNamespaceURI, attributeName)) {\n          existingNode.removeAttributeNS(attributeNamespaceURI, attributeName)\n        }\n      } else {\n        if (!newNode.hasAttributeNS(null, attributeName)) {\n          existingNode.removeAttribute(attributeName)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove attributes on an element based of an object.\n * @param {HTMLElement} element Element to remove the attributes from.\n * @param {Object} data Attribute data to remove.\n */\nexport const removeAttributes = (element, data) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.remove(className)\n      }\n      continue\n    }\n\n    // Check if optional values match.\n    if (data[name] && element.attributes[name] !== data[name]) {\n      continue\n    }\n\n    // Remove attribute.\n    element.removeAttribute(name)\n  }\n}\n\n/**\n * Set data at key on element as attribute.\n * @param {HTMLElement} element Element to set attribute of.\n * @param {String} key Attribute name.\n * @param {Any} data Attribute data.\n */\nexport const setAttribute = (element, key, data) => {\n  // Check if a special attribute key.\n  if (key === 'value' && element.tagName === 'INPUT') {\n    if (!data) {\n      data = ''\n    }\n\n    // Exit early if nothing will change.\n    if (element.getAttribute(key) === data) {\n      return\n    }\n\n    // Update attribute.\n    element.setAttribute(key, data)\n\n    // Exit special cases early.\n    return\n  }\n\n  // If checked attribute then set the checked property instead.\n  if (key === 'checked') {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = !!data\n      return\n    }\n  }\n\n  if (key === 'class') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).filter(([key, value]) => value).map(([key]) => key).join(' ')\n    }\n  }\n\n  if (key === 'style') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).map(([key, value]) => key + ':' + value).join(';')\n    }\n  }\n\n  // Update attribute on element.\n  if (data === false || data === null || data === undefined) {\n    element.removeAttribute(key)\n  } else {\n    element.setAttribute(key, data)\n  }\n}\n\n/**\n * Set attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {Object} data Attribute data to set.\n */\nexport const setAttributes = (element, data) => {\n  for (const name in data) {\n    setAttribute(element, name, data[name])\n  }\n}\n\nexport default {\n  addAttributes,\n  copyAttributes,\n  removeAttributes,\n  setAttribute,\n}\n", "// Import utilities.\nimport { parseSelector } from './String.js'\nimport { addAttributes, removeAttributes } from './Attribute.js'\n\n// Transition name.\nconst TRANSITION_NAME = '-transition:'\n\n/**\n * Transition an element.\n * @param {String} type Type of transition, for example 'in' and 'out'.\n * @param {Component} component Component the transitioning element is part of.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n */\nexport const transition = (type, component, element, callback = null) => {\n  // Only transition element nodes.\n  if (element.nodeType !== 1) {\n    if (callback) {\n      callback()\n    }\n    return\n  }\n\n  // Get library options.\n  const { prefix } = component.getLibrary().getOptions()\n\n  // Transition attribute name.\n  const transitionName = prefix + TRANSITION_NAME + type\n\n  // Setup dispatcher function.\n  const dispatchEvent = (phase) => {\n    element.dispatchEvent(\n      new CustomEvent('transition-' + phase)\n    )\n    element.dispatchEvent(\n      new CustomEvent('transition-' + type + '-' + phase)\n    )\n  }\n\n  // Declare variables for later.\n  let name, value, timeout, requestFrame\n  let isDone = false\n  const selectors = {}\n\n  // Process transition during attribute.\n  name = transitionName\n  value = element.getAttribute(name)\n  // Parse and apply returned selector.\n  if (value) {\n    selectors.during = parseSelector(value)\n    addAttributes(element, selectors.during)\n  }\n\n  // Process transition from attribute.\n  name = transitionName + '.from'\n  value = element.getAttribute(name)\n  // Parse and apply returned selector.\n  if (value) {\n    selectors.from = parseSelector(value)\n    addAttributes(element, selectors.from)\n  }\n\n  // Dispatch transition event.\n  dispatchEvent('start')\n\n  requestFrame = requestAnimationFrame(() => {\n    requestFrame = null\n\n    // If cancelled then stop immediately.\n    if (isDone) {\n      return\n    }\n\n    // Remove from selector.\n    if (selectors.from) {\n      removeAttributes(element, selectors.from)\n      selectors.from = undefined\n    }\n\n    // Process transition to attribute.\n    name = transitionName + '.to'\n    value = element.getAttribute(name)\n    // Parse and apply returned selector.\n    if (value) {\n      selectors.to = parseSelector(value)\n      addAttributes(element, selectors.to)\n    } else if (!selectors.during) {\n      // Exit early if no active selectors set.\n\n      // Dispatch end event.\n      dispatchEvent('end')\n      // Invoke callback.\n      if (callback) {\n        callback()\n      }\n      // Mark as done.\n      isDone = true\n      return\n    }\n\n    // Get computes style.\n    const styles = getComputedStyle(element)\n\n    let duration = Number(styles.transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000\n    if (duration === 0) {\n      duration = Number(styles.animationDuration.replace('s', '')) * 1000\n    }\n\n    timeout = setTimeout(() => {\n      timeout = null\n\n      // If cancelled then stop immediately.\n      if (isDone) {\n        return\n      }\n\n      // Remove during selector.\n      if (selectors.during) {\n        removeAttributes(element, selectors.during)\n        selectors.during = undefined\n      }\n\n      // Remove to selector.\n      if (selectors.to) {\n        removeAttributes(element, selectors.to)\n        selectors.to = undefined\n      }\n\n      // Dispatch end event.\n      dispatchEvent('end')\n      // Invoke callback.\n      if (callback) {\n        callback()\n      }\n      // Mark as done.\n      isDone = true\n    }, duration)\n  })\n\n  return () => {\n    if (!isDone) {\n      return\n    }\n    isDone = true\n\n    // Remove applied selector.\n    if (selectors.during) {\n      removeAttributes(element, selectors.during)\n      selectors.during = undefined\n    }\n    if (selectors.from) {\n      removeAttributes(element, selectors.from)\n      selectors.from = undefined\n    } else if (selectors.to) {\n      removeAttributes(element, selectors.to)\n      selectors.to = undefined\n    }\n\n    // Clear request animation frame and timeout.\n    if (requestFrame) {\n      cancelAnimationFrame(requestFrame)\n      requestFrame = null\n    } else if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n\n    // Dispatch end event.\n    dispatchEvent('end')\n    // Invoke callback.\n    if (callback) {\n      callback()\n    }\n  }\n}\n\n/**\n * Transition an element in.\n * @param {Component} component Component the transitioning element is part of.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n */\nexport const transitionIn = (component, element, callback) => {\n  return transition('in', component, element, callback)\n}\n\n/**\n * Transition an element out.\n * @param {Component} component Component the transitioning element is part of.\n * @param {HTMLElement} element Element to transition.\n * @param {Function} callback Function to call after transition is done.\n */\nexport const transitionOut = (component, element, callback) => {\n  return transition('out', component, element, callback)\n}\n\nexport default {\n  transition,\n  transitionIn,\n  transitionOut,\n}\n", "/**\n * Convert string to HTML element.\n * @param {String} string Element contents.\n * @returns {HTMLElement} HTML element part of a document fragment.\n */\nexport const fromString = (string) => {\n  const template = document.createElement('template')\n  template.innerHTML = string\n  return template.content.childNodes[0]\n}\n\n/**\n * Inserts an element after the reference element opposite of insertBefore and more reliable then ChildNode.after()\n * @param {HTMLElement} reference Node to insert after.\n * @param {Node} node Node to insert.\n */\nexport const insertAfter = (reference, node) => {\n  if (reference.nextSibling) {\n    reference.parentNode.insertBefore(node, reference.nextSibling)\n  } else {\n    reference.parentNode.appendChild(node)\n  }\n}\n\n/**\n * Check whether two nodes are the same.\n * @param {HTMElement} a A node.\n * @param {HTMElement} b Another node.\n * @returns {Boolean} Whether the nodes are the same.\n */\nexport const isSame = (a, b) => {\n  if (a.isSameNode) {\n    return a.isSameNode(b)\n  }\n\n  if (a.tagName !== b.tagName) {\n    return false\n  }\n\n  if (a.type === 3) { // Text node.\n    return a.nodeValue === b.nodeValue\n  }\n\n  return false\n}\n\n/**\n * Iterate over all descendants of a given node.\n * @param {HTMLElement} element Element to walk over.\n * @param {Function} filter Filter function, return false to skip element.\n * @returns {Function} Iterator function. Call until a non-truthy value is returned.\n */\nexport const walk = (element, filter) => {\n  let index = -1\n  let iterator = null\n  return () => {\n    // First go over iterator.\n    if (index >= 0 && iterator) {\n      const child = iterator()\n      if (child) {\n        return child\n      }\n    }\n\n    // Get next child that passes the filter.\n    let child = null\n    do {\n      index++\n      if (index >= element.childElementCount) {\n        return null\n      }\n\n      child = element.children[index]\n    } while (!filter(child))\n\n    // Setup iterator for child.\n    if (child.childElementCount) {\n      iterator = walk(child, filter)\n    }\n\n    // Return the child.\n    return child\n  }\n}\n\nexport default {\n  fromString,\n  insertAfter,\n  isSame,\n  walk,\n}\n", "// Import symbols.\nimport { COMPONENT } from './symbols.js'\n\n// Import classes.\nimport Attribute from './Attribute.js'\n\n// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'\n\n// Import utilities.\nimport { closestComponent } from './utilities/Component.js'\nimport { transition, transitionIn, transitionOut } from '@doars/common/src/utilities/Transition.js'\nimport { walk } from '@doars/common/src/utilities/Element.js'\n\nexport default class Component {\n  /**\n   * Create instance.\n   * @param {Doars} library Library instance.\n   * @param {HTMLElement} element Element.\n   */\n  constructor(library, element) {\n    // Create unique ID.\n    const id = Symbol('ID_COMPONENT')\n\n    // Deconstruct library options.\n    const { prefix, processor } = library.getOptions()\n\n    // Get the expression processor.\n    const processorType = typeof (processor)\n    let processExpression\n    if (processorType === 'function') {\n      processExpression = processor\n    } else if (processorType === 'string' && library.constructor[processor + 'Expression']) {\n      processExpression = library.constructor[processor + 'Expression']\n    } else {\n      console.warn('Doars: Expression processor not found. Using fallback instead.')\n      processExpression = library.constructor.executeExpression ?? library.constructor.interpretExpression ?? library.constructor.callExpression\n    }\n    if (!processExpression) {\n      console.error('Doars: No expression processor available. Process option: ', process)\n    }\n\n    // Create a immutable object with the directive utilities.\n    const directiveUtilities = Object.freeze({\n      processExpression,\n      transition,\n      transitionIn,\n      transitionOut,\n    })\n\n    // create private variables.\n    let attributes = [], hasUpdated = false, isInitialized = false, data, proxy, state\n\n    // Check if element has a state attribute.\n    if (!element.attributes[prefix + '-state']) {\n      console.error('Doars: element given to component does not contain a state attribute!')\n      return\n    }\n\n    // Add reference to element.\n    element[COMPONENT] = this\n\n    // Update position in hierarchy.\n    const children = []\n    // Get current parent component.\n    let parent = closestComponent(element)\n    if (parent) {\n      // Add to list of children in parent.\n      if (!parent.getChildren().includes(this)) {\n        parent.getChildren().push(this)\n\n        // Trigger children update.\n        library.update([{\n          id: parent.getId(),\n          path: 'children',\n        }])\n      }\n    }\n\n    /**\n     * Get the attributes in this component.\n     * @returns {Array<Attribute>} List of attributes.\n     */\n    this.getAttributes = () => {\n      return attributes\n    }\n\n    /**\n     * Get child components in hierarchy of this component.\n     * @returns {Array<Component>} List of components.\n     */\n    this.getChildren = () => {\n      return children\n    }\n\n    /**\n     * Get root element of the component.\n     * @returns {HTMLElement} Element.\n     */\n    this.getElement = () => {\n      return element\n    }\n\n    /**\n     * Get component id.\n     * @returns {Symbol} Unique identifier.\n     */\n    this.getId = () => {\n      return id\n    }\n\n    /**\n     * Get the library instance this component is from.\n     * @returns {Doars} Doars instance.\n     */\n    this.getLibrary = () => {\n      return library\n    }\n\n    /**\n     * Get parent component in hierarchy of this component.\n     * @returns {Component} Component.\n     */\n    this.getParent = () => {\n      return parent\n    }\n\n    /**\n     * Get the event dispatcher of state's proxy.\n     * @returns {ProxyDispatcher} State's proxy dispatcher.\n     */\n    this.getProxy = () => {\n      return proxy\n    }\n\n    /**\n     * Get the component's state.\n     * @returns {Proxy} State.\n     */\n    this.getState = () => {\n      return state\n    }\n\n    /**\n     * Set new parent component of this component.\n     * @param {Component} _parent Parent component.\n     */\n    this.setParent = (_parent) => {\n      parent = _parent\n    }\n\n    /**\n     * Initialize the component.\n     */\n    this.initialize = () => {\n      if (isInitialized) {\n        return\n      }\n\n      // Set as enabled.\n      isInitialized = true\n\n      // Get component's state attribute.\n      const componentName = prefix + '-state'\n      const value = element.attributes[componentName].value\n\n      // Process expression for generating the state using a mock attribute.\n      data = value ? processExpression(this, new Attribute(this, element, null, value), value) : {}\n      if (data === null) {\n        data = {}\n      } else if (typeof (data) !== 'object' || Array.isArray(data)) {\n        console.error('Doars: component tag must return an object!')\n        return\n      }\n\n      // Create proxy dispatcher for state.\n      proxy = new ProxyDispatcher()\n      // Add data to dispatcher to create the state.\n      state = proxy.add(data)\n\n      // Scan for attributes.\n      this.scanAttributes(element)\n    }\n\n    /**\n     * Destroy the component.\n     */\n    this.destroy = () => {\n      if (!isInitialized) {\n        return\n      }\n\n      if (attributes.length > 0) {\n        // Filter out directives without a destroy function.\n        const directives = library.getDirectivesObject()\n        for (const key in directives) {\n          if (!directives[key].destroy) {\n            directives[key] = undefined\n          }\n        }\n\n        for (const attribute of attributes) {\n          // Clean up attribute if the directive has a destroy function.\n          const directive = directives[attribute.getKey()]\n          if (directive) {\n            directive.destroy(this, attribute, directiveUtilities)\n          }\n\n          // Destroy the attribute.\n          attribute.destroy()\n        }\n      }\n\n      // Remove reference from element.\n      delete element[COMPONENT]\n\n      // Reset variables.\n      attributes = []\n\n      // Set as not initialized.\n      isInitialized = false\n\n      // Remove state and state handling.\n      proxy.remove(data)\n      state = null\n      proxy = null\n      data = null\n\n      // Store update triggers.\n      const triggers = []\n\n      // Set children as children of parent.\n      if (children.length > 0) {\n        for (const child of children) {\n          // Set new parent of children.\n          child.setParent(parent)\n\n          // Add parent update trigger.\n          triggers.push({\n            id: child.getId(),\n            path: 'parent',\n          })\n        }\n\n        // Add children update trigger.\n        triggers.push({\n          id,\n          path: 'children',\n        })\n      }\n      if (parent) {\n        if (children.length > 0) {\n          // Add children to parent.\n          parent.getChildren().push(...children)\n\n          // Add children update trigger.\n          triggers.push({\n            id: parent.getId(),\n            path: 'children',\n          })\n        }\n\n        // Add parent update trigger.\n        triggers.push({\n          id,\n          path: 'parent',\n        })\n      }\n\n      // Dispatch triggers.\n      if (triggers.length > 0) {\n        library.update(triggers)\n      }\n\n      // Dispatch event.\n      dispatchEvent('destroyed', {\n        element,\n        id,\n      })\n    }\n\n    /**\n     * Create and add an attribute. Assumes this attribute has not been added before.\n     * @param {HTMLElement} element Attribute element.\n     * @param {String} name Name of the attribute.\n     * @param {String} value Value of the attribute.\n     * @returns {Attribute} New attribute.\n     */\n    this.addAttribute = (element, name, value) => {\n      // Get directive keys from library.\n      const directivesKeys = library.getDirectivesNames()\n\n      // Create and add attribute.\n      const attribute = new Attribute(this, element, name, value)\n\n      // Get index to add attribute at.\n      let index = attribute.length\n      const directiveIndex = directivesKeys.indexOf(attribute.getDirective())\n      for (let i = attributes.length - 1; i >= 0; i--) {\n        // If the other attribute is further down the keys list than add it after that item.\n        if (directivesKeys.indexOf(attributes[i].getDirective()) <= directiveIndex) {\n          index = i + 1\n          break\n        }\n      }\n\n      // Add to list of attributes.\n      attributes.splice(index, 0, attribute)\n\n      // Return new attribute.\n      return attribute\n    }\n\n    /**\n     * Remove an attribute.\n     * @param {Attribute} attribute The attribute to remove.\n     */\n    this.removeAttribute = (attribute) => {\n      // Get index of attribute in list.\n      const indexInAttributes = attributes.indexOf(attribute)\n      if (indexInAttributes < 0) {\n        return\n      }\n\n      // Get directives.\n      const directives = library.getDirectivesObject\n\n      // Attribute has been removed, call the destroy directive.\n      const directive = directives[attribute.getKey()]\n      if (directive && directive.destroy) {\n        directive.destroy(this, attribute, directiveUtilities)\n      }\n\n      // Remove attribute from list.\n      attributes.splice(indexInAttributes, 1)\n\n      // Destroy attribute.\n      attribute.destroy()\n    }\n\n    /**\n     * Scans element for new attributes. It assumes this element as not been read before and is part of the component.\n     * @param {HTMLElement} element Element to scan.\n     * @returns {Array<Attribute>} New attributes.\n     */\n    this.scanAttributes = (element) => {\n      // Get component's state attribute.\n      const componentName = prefix + '-state'\n      const ignoreName = prefix + '-ignore'\n\n      // Store new attributes.\n      const newAttributes = []\n\n      // Create iterator for walking over all elements in the component, skipping elements that are components or contain the ignore directive.\n      const iterator = walk(element, (element) => !element.hasAttribute(componentName) && !element.hasAttribute(ignoreName))\n      // Start on the given element then continue iterating over all children.\n      do {\n        for (const { name, value } of element.attributes) {\n          // Skip attribute if it is not that of a directive.\n          if (library.isDirectiveName(name)) {\n            newAttributes.push(this.addAttribute(element, name, value))\n          }\n        }\n      } while (element = iterator())\n\n      // Return new attributes.\n      return newAttributes\n    }\n\n    /**\n     * Update an attribute.\n     * @param {Attribute} attribute The attribute to update.\n     */\n    this.updateAttribute = (attribute) => {\n      // Check if the attribute is still relevant, since the attribute or element could have been removed.\n      if (!attribute.getElement() || attribute.getValue() === null || attribute.getValue() === undefined) {\n        this.removeAttribute(attribute)\n        return\n      }\n\n      // Get directives.\n      const directives = library.getDirectivesObject()\n\n      // Clear accessed.\n      attribute.clearAccessed()\n\n      // Process directive on attribute.\n      const directive = directives[attribute.getDirective()]\n      if (directive) {\n        directive.update(this, attribute, directiveUtilities)\n      }\n    }\n\n    /**\n     * Update the specified attributes of the component.\n     * @param {Array<Attribute>} attributes Attributes to update.\n     */\n    this.updateAttributes = (attributes) => {\n      if (!isInitialized || attributes.length <= 0) {\n        if (!hasUpdated) {\n          // Dispatch updated event anyway.\n          hasUpdated = true\n          dispatchEvent('updated', {\n            attributes,\n            element,\n            id,\n          })\n        }\n        return\n      }\n\n      for (const attribute of attributes) {\n        this.updateAttribute(attribute)\n      }\n\n      // Dispatch updated event.\n      hasUpdated = true\n      dispatchEvent('updated', {\n        attributes,\n        element,\n        id,\n      })\n    }\n\n    /**\n     * Start updating the component's attributes.\n     * @param {Array<Object>} triggers List of triggers.\n     */\n    this.update = (triggers) => {\n      if (!isInitialized) {\n        return\n      }\n\n      // Get all ids of triggers.\n      const triggerIds = Object.getOwnPropertySymbols(triggers)\n\n      // Update all attributes whose accessed items match any update trigger.\n      const updatedAttributes = []\n      for (const attribute of attributes) {\n        for (const id of triggerIds) {\n          if (attribute.hasAccessed(id, triggers[id])) {\n            this.updateAttribute(attribute)\n            updatedAttributes.push(attribute)\n          }\n        }\n      }\n\n      // Dispatch updated event.\n      if (!hasUpdated || updatedAttributes.length > 0) {\n        hasUpdated = true\n        dispatchEvent('updated', {\n          attributes: updatedAttributes,\n          element,\n          id,\n        })\n      }\n    }\n\n    /**\n     * Dispatch an event from this component.\n     * @param {String} name Name of the event.\n     */\n    const dispatchEvent = (name, detail) => {\n      element.dispatchEvent(\n        new CustomEvent(prefix + '-' + name, {\n          detail,\n          bubbles: true,\n        })\n      )\n    }\n  }\n}\n", "export default {\n  name: '$children',\n\n  create: (component, attribute, update, { createContextsProxy, RevocableProxy }) => {\n    // Create contexts proxy for children.\n    let children\n    const revocable = RevocableProxy(component.getChildren(), {\n      get: (target, key, receiver) => {\n        if (!children) {\n          // Create list of child contexts.\n          children = target.map((child) => createContextsProxy(child, attribute, update))\n\n          // Set children of this component as accessed.\n          attribute.accessed(component.getId(), 'children')\n        }\n\n        // If not a number then do a normal access.\n        if (isNaN(key)) {\n          return Reflect.get(children, key, receiver)\n        }\n\n        // Return context from child.\n        const child = Reflect.get(children, key, receiver)\n        if (child) {\n          return child.contexts\n        }\n      },\n    })\n\n    return {\n      value: revocable.proxy,\n\n      destroy: () => {\n        // Call destroy on all created contexts.\n        if (children) {\n          children.forEach((child) => child.destroy())\n        }\n\n        // Revoke proxy.\n        revocable.revoke()\n      },\n    }\n  },\n}\n", "export default {\n  name: '$component',\n\n  create: (component) => {\n    // Return the component's element.\n    return {\n      value: component.getElement(),\n    }\n  },\n}\n", "export default {\n  name: '$element',\n\n  create: (component, attribute) => {\n    // Return the attribute's element.\n    return {\n      value: attribute.getElement(),\n    }\n  },\n}\n", "export default {\n  name: '$dispatch',\n\n  create: (component) => {\n    // Return the dispatch method.\n    return {\n      value: (name, detail = {}) => {\n        // Dispatch the event after the elements have updated.\n        component.getElement().dispatchEvent(\n          new CustomEvent(name, {\n            detail,\n            bubbles: true,\n          })\n        )\n      },\n    }\n  },\n}\n", "// Import symbols.\nimport { FOR } from '../symbols.js'\n\nexport default {\n  deconstruct: true,\n\n  name: '$for',\n\n  create: (component, attribute, update, { RevocableProxy }) => {\n    // Exit early in parent contexts.\n    if (component !== attribute.getComponent()) {\n      return\n    }\n\n    // Deconstruct attribute.\n    let element = attribute.getElement()\n\n    // Walk up the tree until the component's root element is found.\n    const componentElement = component.getElement(), items = [], target = {}\n    while (element && !element.isSameNode(componentElement)) {\n      // Check if element has for symbol.\n      const data = element[FOR]\n      if (data) {\n        items.push(data)\n\n        for (const key in data.variables) {\n          target[key] = data.variables[key]\n        }\n      }\n\n      // Go up the document tree.\n      element = element.parentNode\n    }\n\n    if (items.length === 0) {\n      return\n    }\n\n    // Create revocable proxy.\n    const revocable = RevocableProxy(target, {\n      get: (target, key) => {\n        for (const item of items) {\n          if (key in item.variables) {\n            // Mark as accessed for data.\n            attribute.accessed(item.id, '$for')\n\n            // Return value at key.\n            return item.variables[key]\n          }\n        }\n      },\n    })\n\n    // Set keys and return values.\n    return {\n      value: revocable.proxy,\n\n      destroy: () => {\n        revocable.revoke()\n      },\n    }\n  },\n}\n", "export default {\n  name: '$inContext',\n\n  create: (component, attribute, update, { createContexts }) => {\n    return {\n      value: (callback) => {\n        // Collect update triggers.\n        const triggers = []\n        const contextUpdate = (id, context) => {\n          triggers.push({\n            id,\n            path: context,\n          })\n        }\n\n        // Create contexts.\n        const { contexts, destroy } = createContexts(component, attribute, contextUpdate, {})\n\n        // Invoke callback and store its result.\n        const result = callback(contexts)\n\n        // Destroy contexts.\n        destroy()\n\n        // Dispatch update triggers.\n        if (triggers.length > 0) {\n          component.getLibrary().update(triggers)\n        }\n\n        // Return callback's result.\n        return result\n      },\n    }\n  },\n}\n", "export default {\n  name: '$nextTick',\n\n  create: (component, attribute, update, { createContexts }) => {\n    // Keep track of callbacks.\n    let callbacks\n\n    // The setup process is delayed since we only want this code to run if the context is used.\n    let isSetup = false\n    const setup = () => {\n      // Exit early if already setup.\n      if (isSetup) {\n        return\n      }\n      isSetup = true\n\n      // Deconstruct component.\n      const library = component.getLibrary()\n\n      // Setup callbacks list.\n      callbacks = []\n\n      // Remove and invoke each callback in the list.\n      const handleUpdate = () => {\n        // Stop listening the update has happened.\n        stopListening()\n\n        // Create function context.\n        const { contexts, destroy } = createContexts(component, attribute, update, {})\n\n        // Invoke all callbacks.\n        for (const callback of callbacks) {\n          callback(contexts)\n        }\n\n        // Destroy contexts.\n        destroy()\n      }\n\n      // Stop listening for the update event and attribute changes.\n      const stopListening = () => {\n        // Stop listening for updated event.\n        library.removeEventListener('updated', handleUpdate)\n\n        // Remove self from listening.\n        attribute.removeEventListener('changed', stopListening)\n        attribute.removeEventListener('destroyed', stopListening)\n      }\n\n      // Listen to the libraries updated event.\n      library.addEventListener('updated', handleUpdate)\n\n      // Stop listening if the attribute changes since this directive will be run again.\n      attribute.addEventListener('changed', stopListening)\n      attribute.addEventListener('destroyed', stopListening)\n    }\n\n    return {\n      value: (callback) => {\n        // Do delayed setup now.\n        setup()\n\n        // Add callback to list.\n        callbacks.push(callback)\n      },\n    }\n  },\n}\n", "export default {\n  name: '$parent',\n\n  create: (component, attribute, update, { createContextsProxy }) => {\n    // Deconstruct component.\n    const parent = component.getParent()\n    if (!parent) {\n      return {\n        key: '$parent',\n        value: null,\n      }\n    }\n\n    // Create contexts proxy for parent.\n    const { contexts, destroy } = createContextsProxy(parent, attribute, update)\n\n    return {\n      value: contexts,\n\n      destroy,\n    }\n  },\n}\n", "// Import symbols.\nimport { REFERENCES, REFERENCES_CACHE } from '../symbols.js'\n\nexport default {\n  name: '$references',\n\n  create: (component, attribute, update, { RevocableProxy }) => {\n    // Exit early if no references exist.\n    if (!component[REFERENCES]) {\n      return {\n        key: '$references',\n        value: [],\n      }\n    }\n\n    // Generate references cache.\n    let cache = component[REFERENCES_CACHE]\n    if (!cache) {\n      // Get references from component.\n      const references = component[REFERENCES]\n      const attributeIds = Object.getOwnPropertySymbols(references)\n\n      // Convert references to a named object.\n      cache = {}\n      for (const id of attributeIds) {\n        const { element, name } = references[id]\n        cache[name] = element\n      }\n      component[REFERENCES_CACHE] = cache\n    }\n\n    // Create revocable proxy.\n    const revocable = RevocableProxy(cache, {\n      get: (target, propertyKey, receiver) => {\n        // Mark references as accessed.\n        attribute.accessed(component.getId(), '$references.' + propertyKey)\n\n        // Return reference.\n        return Reflect.get(target, propertyKey, receiver)\n      },\n    })\n\n    // Return references proxy.\n    return {\n      value: revocable.proxy,\n\n      destroy: () => {\n        revocable.revoke()\n      },\n    }\n  },\n}\n", "export default {\n  deconstruct: true,\n\n  name: '$state',\n\n  create: (component, attribute, update, { RevocableProxy }) => {\n    // Deconstruct component.\n    const proxy = component.getProxy()\n    const state = component.getState()\n    if (!proxy || !state) {\n      return\n    }\n\n    // Create event handlers.\n    const onDelete = (target, path) => update(component.getId(), '$state.' + path.join('.'))\n    const onGet = (target, path) => attribute.accessed(component.getId(), '$state.' + path.join('.'))\n    const onSet = (target, path) => update(component.getId(), '$state.' + path.join('.'))\n\n    // Add event listeners.\n    proxy.addEventListener('delete', onDelete)\n    proxy.addEventListener('get', onGet)\n    proxy.addEventListener('set', onSet)\n\n    // Wrap in a revocable proxy.\n    const revocable = RevocableProxy(state, {})\n\n    return {\n      value: revocable.proxy,\n\n      // Remove event listeners.\n      destroy: () => {\n        proxy.removeEventListener('delete', onDelete)\n        proxy.removeEventListener('get', onGet)\n        proxy.removeEventListener('set', onSet)\n\n        // Revoke access to state.\n        revocable.revoke()\n      },\n    }\n  },\n}\n", "// Create and cache native promise for comparison.\nconst nativePromise = Function.prototype.toString.call(Function /* A native object */)\n  .replace('Function', 'Promise') // Replace identifier.\n  .replace(/\\(.*\\)/, '()') // Remove possible FormalParameterList.\n\nexport const isNativePromise = (value) => {\n  return value && typeof value.constructor === 'function' && Function.prototype.toString.call(value.constructor).replace(/\\(.*\\)/, '()') === nativePromise\n}\n\nexport const isPromise = (value) => {\n  return value && Object.prototype.toString.call(value) === '[object Promise]'\n}\n\nexport default {\n  isPromise,\n  isNativePromise,\n}\n", "// Import utilities.\nimport { setAttribute, setAttributes } from '@doars/common/src/utilities/Attribute.js'\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\nimport { parseSelector } from '@doars/common/src/utilities/String.js'\n\nexport default {\n  name: 'attribute',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const modifiers = attribute.getModifiers()\n\n    const set = (value) => {\n      if (modifiers.selector) {\n        if (typeof (value) !== 'string') {\n          console.error('Doars: Value returned to attribute directive must be a string if the selector modifier is set.')\n          return\n        }\n        value = parseSelector(value)\n\n        setAttributes(element, value)\n        return\n      }\n\n      // Deconstruct attribute.\n      const key = attribute.getKeyRaw()\n\n      if (!key) {\n        // Set attributes on element.\n        if (typeof (value) === 'object' && !Array.isArray(value)) {\n          setAttributes(element, value)\n        } else {\n          console.error('Doars: Value returned to attribute directive of invalid type.')\n        }\n\n        return\n      }\n\n      // Set attribute on element at key.\n      setAttribute(element, key, value)\n    }\n\n    // Execute attribute value.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Store results.\n    attribute.setData(result)\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData() !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else {\n      set(result)\n    }\n  },\n}\n", "export default {\n  name: 'cloak',\n\n  update: function (component, attribute, { transitionIn }) {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Remove attribute from element.\n    element.removeAttribute(\n      component.getLibrary().getOptions().prefix + '-' + this.name\n    )\n\n    // Transition in.\n    transitionIn(component, element)\n  },\n}\n", "// Import symbols.\nimport { FOR } from '../symbols.js'\n\n// Import utilities.\nimport { insertAfter } from '@doars/common/src/utilities/Element.js'\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\nimport { parseForExpression } from '@doars/common/src/utilities/String.js'\nimport { transitionIn, transitionOut } from '@doars/common/src/utilities/Transition.js'\n\n/**\n * Add values add object by name in given order.\n * @param {Array<String>} names Names of values.\n * @param  {...Any} values Values to add to object.\n * @returns {Object} Resulting object with values at names.\n */\nconst createVariables = (names, ...values) => {\n  const variables = {}\n  for (let i = 0; i < values.length; i++) {\n    if (i >= names.length) {\n      break\n    }\n    variables[names[i]] = values[i]\n  }\n  return variables\n}\n\n/**\n * Finds the index of an element in list matching the value.\n * @param {HTMLElement} elements List of elements to search through.\n * @param {Any} value Value to compare to.\n * @param {Number} index The index to start searching after.\n */\nconst indexInSiblings = (elements, value, index = -1) => {\n  index++\n  if (index >= elements.length) {\n    return -1\n  }\n\n  if (elements[index][FOR].value === value) {\n    return index\n  }\n\n  return indexInSiblings(elements, value, index)\n}\n\n/**\n * Adds item to document at right index.\n * @param {Component} component Component attribute is part of.\n * @param {Function} update Update trigger function.\n * @param {DocumentFragment} template Template of items.\n * @param {Array<HTMLElement>} elements Existing item elements.\n * @param {Number} index Index to start looking from.\n * @param {Any} value Value of item to add.\n * @param {Object} variables Variables associated with item.\n */\nconst setAfter = (component, update, template, elements, index, value, variables) => {\n  const existingIndex = indexInSiblings(elements, value, index)\n  if (existingIndex >= 0) {\n    // Exit early it is already in place.\n    if (existingIndex === index + 1) {\n      return\n    }\n\n    // Get existing element to move.\n    const element = elements[existingIndex]\n\n    // Move element after element at index or directly after the template.\n    insertAfter(elements[index] ? elements[index] : template, element)\n\n    // Update all attributes using this for item's data.\n    update(element[FOR].id)\n\n    return\n  }\n\n  // Create new element from template.\n  let element = document.importNode(template.content, true)\n  // Add element after template or element at index.\n  const sibling = index === -1 ? template : elements[index]\n  insertAfter(sibling, element)\n  // Get HTMLElement reference instead of DocumentFragment.\n  element = sibling.nextElementSibling\n\n  // Transition in.\n  transitionIn(component, element)\n\n  // Store data.\n  element[FOR] = {\n    id: Symbol('ID_FOR'),\n    value,\n    variables,\n  }\n\n  // Store reference.\n  elements.splice(index + 1, 0, element)\n}\n\n/**\n * Removes elements after maximum length.\n * @param {Array<HTMLElement>} elements List of existing elements.\n * @param {Number} maxLength Maximum number of elements.\n */\nconst removeAfter = (component, elements, maxLength) => {\n  // Exit early if length is not exceeded.\n  if (elements.length < maxLength) {\n    return\n  }\n\n  // Iterate over exceeding elements.\n  for (let i = elements.length - 1; i >= maxLength; i--) {\n    // Remove element from list.\n    const element = elements[i]\n    elements.splice(i, 1)\n\n    // Transition out.\n    transitionOut(component, element, () => {\n      element.remove()\n    })\n  }\n}\n\nexport default {\n  name: 'for',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const template = attribute.getElement()\n\n    // Check if placed on a template tag.\n    if (template.tagName !== 'TEMPLATE') {\n      console.warn('Doars: `for` directive must be placed on a `<template>` tag.')\n      return\n    }\n\n    const expression = parseForExpression(attribute.getValue())\n    if (!expression) {\n      console.error('Doars: Error in `for` expression: ', attribute.getValue())\n      return\n    }\n\n    // Setup update method.\n    const triggers = {}\n    const update = (id) => {\n      if (!triggers[id]) {\n        triggers[id] = ['$for']\n      }\n    }\n\n    const set = (iterable) => {\n      // Get stored data.\n      const data = attribute.getData()\n\n      // Get list of elements already made by this attribute.\n      const elements = data.elements ? data.elements : []\n\n      // Process iterable based on type.\n      const iterableType = typeof (iterable)\n      if (iterable !== null && iterable !== undefined) {\n        if (iterableType === 'number') {\n          for (let index = 0; index < iterable; index++) {\n            // Setup variables for context.\n            const variables = createVariables(expression.variables, index)\n\n            // Add element based on data after previously iterated value.\n            setAfter(component, update, template, elements, index - 1, iterable, variables)\n          }\n\n          // Remove old values.\n          removeAfter(component, elements, iterable)\n        } else if (iterableType === 'string') {\n          for (let index = 0; index < iterable.length; index++) {\n            // Get value at index.\n            const value = iterable[index]\n\n            // Setup variables for context.\n            const variables = createVariables(expression.variables, value, index)\n\n            // Add element based on data after previously iterated value.\n            setAfter(component, update, template, elements, index - 1, value, variables)\n          }\n\n          // Remove old values.\n          removeAfter(component, elements, iterable.length)\n        } else {\n          // We can't rely on Array.isArray since it might be a proxy, therefore we try to convert it to an array.\n          let isArray, length\n          try {\n            const values = [...iterable]\n            isArray = true\n            length = values.length\n          } catch { }\n\n          if (isArray) {\n            for (let index = 0; index < length; index++) {\n              // Get value at index.\n              const value = iterable[index]\n\n              // Setup variables for context.\n              const variables = createVariables(expression.variables, value, index)\n\n              // Add element based on data after previously iterated value.\n              setAfter(component, update, template, elements, index - 1, value, variables)\n            }\n          } else {\n            const keys = Object.keys(iterable)\n            length = keys.length\n\n            for (let index = 0; index < length; index++) {\n              // Get value at index.\n              const key = keys[index]\n              const value = iterable[key]\n\n              // Setup variables for context.\n              const variables = createVariables(expression.variables, key, value, index)\n\n              // Add element based on data after previously iterated value.\n              setAfter(component, update, template, elements, index - 1, value, variables)\n            }\n          }\n\n          // Remove old values.\n          removeAfter(component, elements, length)\n        }\n      }\n\n      // Dispatch triggers.\n      if (Object.getOwnPropertySymbols(triggers).length > 0) {\n        component.update(triggers)\n      }\n\n      // Store results.\n      attribute.setData(\n        Object.assign({}, data, {\n          elements,\n        })\n      )\n    }\n\n    // Get iterable value.\n    let result\n    // Check if iterable is a number.\n    if (!isNaN(expression.iterable)) {\n      result = Number(expression.iterable)\n    } else {\n      // Get iterable data, and this will automatically mark the data as being accessed by this component.\n      result = processExpression(component, attribute, expression.iterable)\n    }\n\n    // Get stored data.\n    const data = attribute.getData()\n\n    // Store results.\n    attribute.setData(\n      Object.assign({}, data, {\n        result,\n      })\n    )\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData().result !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else {\n      set(result)\n    }\n  },\n\n  destroy: (component, attribute) => {\n    // Get stored data.\n    const data = attribute.getData()\n\n    // Get list of elements created by this attribute.\n    if (data.elements) {\n      // Iterate over generated elements.\n      for (const element of data.elements) {\n        // Transition out.\n        transitionOut(component, element, () => {\n          // Remove element.\n          element.remove()\n        })\n      }\n    }\n  },\n}\n", "const DECODE_LOOKUP = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': '\\'',\n  '&#39;': '\\'',\n  '&quot;': '\"',\n  '&#34;': '\"',\n}\nconst DECODE_REGEXP = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g\n\nconst ENCODE_LOOKUP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\\'': '&#39;',\n  '\"': '&quot;',\n}\nconst ENCODE_REGEXP = /[&<>'\"]/g\n\nexport const decode = (string) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(DECODE_REGEXP, (character) => {\n    return DECODE_LOOKUP[character]\n  })\n}\n\nexport const encode = (string) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(ENCODE_REGEXP, (character) => {\n    return ENCODE_LOOKUP[character]\n  })\n}\n\nexport default {\n  decode,\n  encode,\n}\n", "// Import utilities.\nimport { decode } from '@doars/common/src/utilities/Html.js'\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\n\nexport default {\n  name: 'html',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const modifiers = attribute.getModifiers()\n\n    const set = (html) => {\n      // Decode string.\n      if (modifiers.decode && typeof (html) === 'string') {\n        html = decode(html)\n      }\n\n      // Clone and set html as only child for HTMLElements.\n      if (html instanceof HTMLElement) {\n        for (const child of element.children) {\n          child.remove()\n        }\n\n        element.appendChild(html.cloneNode(true))\n        return\n      }\n\n      // Set html via inner html for strings.\n      if (typeof (html) === 'string') {\n        if (element.innerHTML !== html) {\n          element.innerHTML = html\n        }\n        return\n      }\n\n      console.error('Doars/directives/html: Unknown type returned to directive!')\n    }\n\n    // Execute value and retrieve result.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Store results.\n    attribute.setData(result)\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData() !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else {\n      set(result)\n    }\n  },\n}\n", "// Import utilities.\nimport { insertAfter } from '@doars/common/src/utilities/Element.js'\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\n\nexport default {\n  name: 'if',\n\n  update: (component, attribute, { processExpression, transitionIn, transitionOut }) => {\n    // Deconstruct attribute.\n    const template = attribute.getElement()\n\n    // Check if placed on a template tag.\n    if (template.tagName !== 'TEMPLATE') {\n      console.warn('Doars: `if` directive must be placed on a `<template>` tag.')\n      return\n    }\n\n    // Check if it only has one child.\n    if (template.childCount > 1) {\n      console.warn('Doars: `if` directive must have a single child node.')\n      return\n    }\n\n    const set = (result) => {\n      // Get stored data.\n      const data = attribute.getData()\n\n      // Get existing reference element.\n      let element = data.element\n      let transition = data.transition\n\n      if (!result) {\n        // If the element exists then transition out and remove the element.\n        if (element) {\n          // Cancel previous transition.\n          if (transition) {\n            transition()\n          }\n\n          transition = transitionOut(component, element, () => {\n            element.remove()\n          })\n        }\n      } else if (!element) {\n        // If the reference does not exist create the element.\n\n        // Cancel previous transition.\n        if (transition) {\n          transition()\n        }\n\n        // Create new element from template.\n        element = document.importNode(template.content, true)\n        // Add element after the template element.\n        insertAfter(template, element)\n        // Get HTMLElement reference instead of DocumentFragment.\n        element = template.nextElementSibling\n\n        // Transition element in.\n        transition = transitionIn(component, element)\n      }\n\n      // Store results.\n      attribute.setData(\n        Object.assign({}, data, {\n          element,\n          transition,\n        })\n      )\n    }\n\n    // Execute expression.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Get stored data.\n    const data = attribute.getData()\n\n    // Store results.\n    attribute.setData(\n      Object.assign({}, data, {\n        result,\n      })\n    )\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((result) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData().result !== result) {\n            return\n          }\n\n          set(result)\n        })\n    } else {\n      set(result)\n    }\n  },\n\n  destroy: (component, attribute, { transitionOut }) => {\n    // Get stored data.\n    const data = attribute.getData()\n\n    // If the element exists then transition out and remove the element.\n    if (data.element) {\n      transitionOut(component, data.element, () => {\n        data.element.remove()\n      })\n    }\n  },\n}\n", "// Import symbols.\nimport { INITIALIZED } from '../symbols.js'\n\nconst destroy = (component, attribute) => {\n  // Exit early if no listeners can be found.\n  if (!attribute[INITIALIZED]) {\n    return\n  }\n\n  // Deconstruct component.\n  const element = component.getElement()\n\n  // Create event name.\n  const name = component.getLibrary().getOptions().prefix + '-updated'\n\n  // Remove existing listener and delete directive data.\n  element.removeEventListener(name, attribute[INITIALIZED].handler)\n  delete attribute[INITIALIZED]\n}\n\nexport default {\n  name: 'initialized',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct component.\n    const element = component.getElement()\n\n    // Deconstruct attribute.\n    const value = attribute.getValue()\n\n    // Create event name.\n    const name = component.getLibrary().getOptions().prefix + '-updated'\n\n    // Check if existing listener exists.\n    if (attribute[INITIALIZED]) {\n      // Exit early if listener has not changed.\n      if (attribute[INITIALIZED].value === value) {\n        return\n      }\n\n      // Remove existing listener so we don' listen twice.\n      element.removeEventListener(name, attribute[INITIALIZED].handler)\n      delete attribute[INITIALIZED]\n    }\n\n    const handler = ({ detail }) => {\n      // Only execute on self.\n      if (detail.element !== element) {\n        return\n      }\n\n      // Execute value using a copy of the attribute since this attribute does not need to update based on what it accesses.\n      processExpression(component, attribute.clone(), value, {}, {\n        return: false,\n      })\n\n      // Call destroy.\n      destroy(component, attribute)\n    }\n\n    // Add listener to component.\n    element.addEventListener(name, handler, {\n      once: true,\n    })\n\n    // Store listener data on the component.\n    attribute[INITIALIZED] = {\n      handler,\n      value,\n    }\n  },\n\n  destroy,\n}\n", "// Import symbols.\nimport { ON } from '../symbols.js'\n\n// Declare constants.\nconst CANCEL_EVENTS = {\n  keydown: 'keyup',\n  mousedown: 'mouseup',\n  pointerdown: 'pointerup',\n}\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  HELD: 3,\n  HOLD: 4,\n  THROTTLE: 5,\n}\nconst KEYPRESS_MODIFIERS = [\n  'alt',\n  'ctrl',\n  'meta',\n  'shift',\n]\n\nexport default {\n  name: 'on',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    let name = attribute.getKeyRaw()\n\n    // Check if required key is set.\n    if (!name) {\n      console.warn('Doars: `on` directive must have a key.')\n      return\n    }\n\n    // Process keyboard events.\n    let key\n    if (name.startsWith('keydown-')) {\n      key = name.substring(8).toLowerCase()\n      name = 'keydown'\n    } else if (name.startsWith('keyup-')) {\n      key = name.substring(6).toLowerCase()\n      name = 'keyup'\n    }\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const value = attribute.getValue()\n\n    // Check if existing listener exists.\n    if (attribute[ON]) {\n      // Exit early if value has not changed.\n      if (attribute[ON].value === value) {\n        return\n      }\n\n      // Remove existing listener so we don't listen twice.\n      attribute[ON].target.removeEventListener(name, attribute[ON].handler)\n\n      // Clear any ongoing timeouts.\n      if (attribute[ON].timeout) {\n        clearTimeout(attribute[ON].timeout)\n      }\n\n      // Delete directive data.\n      delete attribute[ON]\n    }\n\n    // Deconstruct attribute.\n    const modifiers = attribute.getModifiers()\n\n    // Process modifiers.\n\n    // Set listener options.\n    const options = {}\n    if (modifiers.capture) {\n      options.capture = true\n    }\n    if (modifiers.once) {\n      options.once = true\n    }\n    if (modifiers.passive) {\n      options.passive = true\n    }\n\n    // Process execution modifiers.\n    let executionModifier = EXECUTION_MODIFIERS.NONE\n    if (modifiers.buffer) {\n      executionModifier = EXECUTION_MODIFIERS.BUFFER\n      if (modifiers.buffer === true) {\n        modifiers.buffer = 5\n      }\n    } else if (modifiers.debounce) {\n      executionModifier = EXECUTION_MODIFIERS.DEBOUNCE\n      if (modifiers.debounce === true) {\n        modifiers.debounce = 500\n      }\n    } else if (modifiers.held) {\n      executionModifier = EXECUTION_MODIFIERS.HELD\n      if (modifiers.held === true) {\n        modifiers.held = 500\n      }\n    } else if (modifiers.hold) {\n      executionModifier = EXECUTION_MODIFIERS.HOLD\n      if (modifiers.hold === true) {\n        modifiers.hold = 500\n      }\n    } else if (modifiers.throttle) {\n      executionModifier = EXECUTION_MODIFIERS.THROTTLE\n      if (modifiers.throttle === true) {\n        modifiers.throttle = 500\n      }\n    }\n\n    // Store keypress modifiers.\n    const keypressModifiers = []\n    if (key) {\n      // Convert command and super to meta.\n      modifiers.meta = modifiers.meta ? true : modifiers.cmd || modifiers.super\n\n      for (const modifier of KEYPRESS_MODIFIERS) {\n        if (modifiers[modifier]) {\n          keypressModifiers.push(modifier)\n        }\n      }\n    }\n\n    // Set listener target and start listening.\n    let target = element\n    if (modifiers.document || modifiers.outside) {\n      target = document\n    } else if (modifiers.window) {\n      target = window\n    }\n\n    const handler = (event) => {\n      // Prevent repeat calls if prevent is set.\n      if (attribute[ON].prevent) {\n        return\n      }\n\n      // Disallow repeat calls if the modifier is not present.\n      if (!modifiers.repeat && event.repeat) {\n        return\n      }\n\n      // Only fire when self is provided if the target is the element itself.\n      if (modifiers.self && event.target !== element) {\n        return\n      }\n\n      // Don't fire with outside modifier unless the event came from outside.\n      if (modifiers.outside && element.contains(event.target)) {\n        return\n      }\n\n      // For keyboard events check the key is pressed.\n      if ((name === 'keydown' || name === 'keyup') && key) {\n        // Check if all key press modifiers are held.\n        for (const keypressModifier of keypressModifiers) {\n          if (!event[keypressModifier + 'Key']) {\n            return\n          }\n        }\n\n        // Convert key.\n        let eventKey = modifiers.code ? event.code : event.key\n        if (eventKey === ' ') {\n          eventKey = 'space'\n        }\n        eventKey = eventKey.toLowerCase()\n\n        // Check if the key matches.\n        if (eventKey !== key) {\n          return\n        }\n      }\n\n      // Prevent default if the prevent modifier is present.\n      if (modifiers.prevent) {\n        event.preventDefault()\n      }\n      // Stop propagation if the stop modifier is present.\n      if (modifiers.stop) {\n        event.stopPropagation()\n      }\n\n      const execute = () => {\n        // Execute value using a copy of the attribute since this attribute should not update based on what contexts will be accessed.\n        processExpression(component, attribute.clone(), value, {\n          $event: event,\n          $events: attribute[ON].buffer,\n        }, { return: false })\n\n        // Reset the buffer.\n        attribute[ON].buffer = []\n      }\n\n      // Store event in buffer.\n      attribute[ON].buffer.push(event)\n\n      // Check if we need to apply an execution modifier.\n      switch (executionModifier) {\n        case EXECUTION_MODIFIERS.BUFFER:\n          // Exit early if buffer is not full.\n          if (attribute[ON].buffer.length < modifiers.buffer) {\n            return\n          }\n\n          execute()\n          return\n\n        case EXECUTION_MODIFIERS.DEBOUNCE:\n          // Clear existing timeout.\n          if (attribute[ON].timeout) {\n            clearTimeout(attribute[ON].timeout)\n            attribute[ON].timeout = null\n          }\n\n          // Setup timeout and execute expression when it finishes.\n          attribute[ON].timeout = setTimeout(execute, modifiers.debounce)\n          return\n\n        // Execute the event when let go after the given time has exceeded.\n        case EXECUTION_MODIFIERS.HELD:\n          // Check if cancelable.\n          if (!(name in CANCEL_EVENTS)) {\n            console.warn('Doars: `on` directive, event of name \"' + name + '\" is not cancelable and can not have \"held\" modifier.')\n            return\n          }\n          const cancelHeldName = CANCEL_EVENTS[name]\n\n          // Store time of holding down.\n          const nowHeld = window.performance.now()\n\n          attribute[ON].cancel = (cancelEvent) => {\n            // Check if minimum time has passed.\n            if (window.performance.now() - nowHeld < modifiers.held) {\n              attribute[ON].prevent = false\n              return\n            }\n\n            // For keyboard events check any required key has been depressed.\n            if (cancelHeldName === 'keyup' && key) {\n              // Check if all key press modifiers are held.\n              for (const keypressModifier of keypressModifiers) {\n                if (!cancelEvent[keypressModifier + 'Key']) {\n                  attribute[ON].prevent = false\n                  return\n                }\n              }\n\n              // Convert key.\n              let eventKey = modifiers.code ? cancelEvent.code : cancelEvent.key\n              if (eventKey === ' ') {\n                eventKey = 'space'\n              }\n              eventKey = eventKey.toLowerCase()\n\n              // Check if the key matches.\n              if (eventKey !== key) {\n                attribute[ON].prevent = false\n                return\n              }\n            }\n\n            // Only fire when self is provided if the target is the element itself.\n            if (modifiers.self && cancelEvent.target !== element) {\n              attribute[ON].prevent = false\n              return\n            }\n\n            // Don't fire with outside modifier unless the event came from outside.\n            if (modifiers.outside && element.contains(cancelEvent.target)) {\n              attribute[ON].prevent = false\n              return\n            }\n\n            // Execute expression.\n            execute()\n          }\n\n          // Prevent repeat calls.\n          attribute[ON].prevent = true\n\n          target.addEventListener(cancelHeldName, attribute[ON].cancel, { once: true })\n          return\n\n        // Execute event when keys have been held down for the given time.\n        case EXECUTION_MODIFIERS.HOLD:\n          // Check if cancelable.\n          if (!(name in CANCEL_EVENTS)) {\n            console.warn('Doars: `on` directive, event of name \"' + name + '\" is not cancelable and can not have \"hold\" modifier.')\n            return\n          }\n          const cancelHoldName = CANCEL_EVENTS[name]\n\n          attribute[ON].cancel = (cancelEvent) => {\n            // For keyboard events check any required key has been depressed.\n            if (cancelHoldName === 'keyup' && key) {\n              let keyLetGo = false\n\n              // Check if all key press modifiers are held.\n              for (const keypressModifier of keypressModifiers) {\n                if (!cancelEvent[keypressModifier + 'Key']) {\n                  keyLetGo = true\n                }\n              }\n\n              // Convert key.\n              let eventKey = modifiers.code ? cancelEvent.code : cancelEvent.key\n              if (eventKey === ' ') {\n                eventKey = 'space'\n              }\n              eventKey = eventKey.toLowerCase()\n\n              // Check if the key matches.\n              if (eventKey === key) {\n                keyLetGo = true\n              }\n\n              if (!keyLetGo) {\n                attribute[ON].prevent = false\n                return\n              }\n            }\n\n            // Only fire when self is provided if the target is the element itself.\n            if (modifiers.self && cancelEvent.target !== element) {\n              attribute[ON].prevent = false\n              return\n            }\n\n            // Don't fire with outside modifier unless the event came from outside.\n            if (modifiers.outside && element.contains(cancelEvent.target)) {\n              attribute[ON].prevent = false\n              return\n            }\n\n            // Prevent timeout from firing.\n            clearTimeout(attribute[ON].timeout)\n          }\n          target.addEventListener(cancelHoldName, attribute[ON].cancel, { once: true })\n\n          // Prevent repeat calls.\n          attribute[ON].prevent = true\n\n          // Setup timeout and execute expression when it finishes.\n          attribute[ON].timeout = setTimeout(() => {\n            // Ensure cancel is removed.\n            target.removeEventListener(cancelHoldName, attribute[ON].cancel)\n\n            // Allow calls again.\n            attribute[ON].prevent = false\n\n            // Execute expression.\n            execute()\n          }, modifiers.hold)\n          return\n\n        case EXECUTION_MODIFIERS.THROTTLE:\n          // Get current time in milliseconds.\n          const nowThrottle = window.performance.now()\n\n          // Exit early if throttle time has not passed.\n          if (attribute[ON].lastExecution && nowThrottle - attribute[ON].lastExecution < modifiers.throttle) {\n            return\n          }\n\n          execute()\n\n          // Store new latest execution time.\n          attribute[ON].lastExecution = nowThrottle\n          return\n      }\n\n      // Otherwise execute expression immediately.\n      execute()\n    }\n\n    target.addEventListener(name, handler, options)\n\n    // Store listener data on the component.\n    attribute[ON] = {\n      buffer: [],\n      handler,\n      target,\n      timeout: attribute[ON] ? attribute[ON].timeout : undefined,\n      value,\n      prevent: false,\n    }\n  },\n\n  destroy: (component, attribute) => {\n    // Exit early if no listeners can be found.\n    if (!attribute[ON]) {\n      return\n    }\n\n    // Deconstruct attribute.\n    const key = attribute.getKeyRaw()\n\n    // Remove existing listener.\n    attribute[ON].target.removeEventListener(key, attribute[ON].handler)\n\n    // Clear any ongoing callbacks and timeouts.\n    if (attribute[ON].cancel) {\n      attribute[ON].target\n        .removeEventListener(\n          CANCEL_EVENTS[key],\n          attribute[ON].cancel\n        )\n    }\n    if (attribute[ON].timeout) {\n      clearTimeout(attribute[ON].timeout)\n    }\n\n    // Delete directive data.\n    delete attribute[ON]\n  },\n}\n", "// Import symbols.\nimport { REFERENCES, REFERENCES_CACHE } from '../symbols.js'\n\nconst destroy = (component, attribute) => {\n  // Exit early if not set.\n  if (!component[REFERENCES]) {\n    return\n  }\n\n  // Deconstruct attribute.\n  const attributeId = attribute.getId()\n\n  // Exit early if not the same attribute.\n  if (!component[REFERENCES][attributeId]) {\n    return\n  }\n\n  // Deconstruct component.\n  const library = component.getLibrary()\n  const componentId = component.getId()\n\n  // Deconstruct attribute.\n  const value = attribute.getValue().trim()\n\n  // Remove reference from object.\n  delete component[REFERENCES][attributeId]\n\n  // Remove context cache.\n  delete component[REFERENCES_CACHE]\n\n  // Remove object if it is empty now.\n  if (Object.keys(component[REFERENCES]).length === 0) {\n    delete component[REFERENCES]\n  }\n\n  // Trigger references update.\n  library.update([{ id: componentId, path: '$references.' + value }])\n}\n\nexport default {\n  name: 'reference',\n\n  update: (component, attribute) => {\n    // Deconstruct attribute.\n    const value = attribute.getValue().trim()\n\n    // Check if value is a valid variable name.\n    if (!/^[_$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(value)) {\n      destroy(component, attribute)\n      console.warn('Doars: `reference` directive\\'s value not a valid variable name: \"' + value + '\".')\n      return\n    }\n\n    // Deconstruct component.\n    const library = component.getLibrary()\n    const componentId = component.getId()\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const attributeId = attribute.getId()\n\n    // Check if references object exists.\n    if (!component[REFERENCES]) {\n      component[REFERENCES] = {}\n    }\n\n    // Store reference.\n    component[REFERENCES][attributeId] = {\n      element,\n      name: value,\n    }\n\n    // Remove context cache.\n    delete component[REFERENCES_CACHE]\n\n    // Trigger references update.\n    library.update([{ id: componentId, path: '$references.' + value }])\n  },\n\n  destroy,\n}\n", "// Import utilities.\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\n\nconst TAG_SELECT = 'SELECT'\nconst CHECKED = 'checked'\nconst SELECTED = 'selected'\nconst TYPE_CHECKBOX = 'checkbox'\n\nexport default {\n  name: 'select',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Check if placed on a select tag.\n    const type = element.getAttribute('type')\n    if (element.tagName !== TAG_SELECT && !(element.tagName === 'INPUT' && (type === TYPE_CHECKBOX || type === 'radio'))) {\n      console.warn('Doars: `select` directive must be placed on a `select` tag or `input` of type checkbox or radio.')\n      return\n    }\n\n    const set = (data) => {\n      // Iterate over the select options.\n      if (element.tagName === TAG_SELECT) {\n        for (const option of Array.from(element.options)) {\n          // Update option if the selected value has changed.\n          const select = Array.isArray(data) ? data.includes(option.value) : data === option.value\n          if (option.selected !== select) {\n            // Update option's status.\n            option.selected = select\n\n            // Update option's attribute.\n            if (select) {\n              option.setAttribute(SELECTED, '')\n            } else {\n              option.removeAttribute(SELECTED)\n            }\n          }\n        }\n      } else if (type === TYPE_CHECKBOX) {\n        // Update option if the checked value has changed.\n        const checked = data.includes(element.value)\n        if (element.checked !== checked) {\n          // Update checked attribute.\n          if (checked) {\n            element.setAttribute(CHECKED, '')\n          } else {\n            element.removeAttribute(CHECKED)\n          }\n        }\n      } else {\n        // Update option if the checked value has changed.\n        const checked = data === element.value\n        if (element.checked !== checked) {\n          // Update checked attribute.\n          if (checked) {\n            element.setAttribute(CHECKED, '')\n          } else {\n            element.removeAttribute(CHECKED)\n          }\n        }\n      }\n    }\n\n    // Execute attribute value.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Store results.\n    attribute.setData(result)\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData() !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else {\n      set(result)\n    }\n  },\n}\n", "// Import utilities.\nimport { isPromise } from '@doars/common/src/utilities/Promise.js'\n\nexport default {\n  name: 'show',\n\n  update: (component, attribute, { processExpression, transitionIn, transitionOut }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    const set = () => {\n      // Get stored data.\n      const data = attribute.getData()\n\n      // Cancel previous transition.\n      if (data.transition) {\n        data.transition()\n      }\n\n      // Assign display based on truthiness of expression result.\n      let transition\n      if (data.result) {\n        element.style.display = null\n        transition = transitionIn(component, element)\n      } else {\n        transition = transitionOut(component, element, () => {\n          element.style.display = 'none'\n        })\n      }\n\n      // Store new transition.\n      attribute.setData(\n        Object.assign({}, data, {\n          transition,\n        })\n      )\n    }\n\n    // Execute attribute value.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Get stored data.\n    const data = attribute.getData()\n\n    // Handle promises.\n    if (isPromise(result)) {\n      // Store results.\n      attribute.setData(\n        Object.assign({}, data, {\n          result,\n        })\n      )\n\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData().result !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else if (!data || data.result !== result) {\n      // Store results.\n      attribute.setData(\n        Object.assign({}, data, {\n          result,\n        })\n      )\n\n      set()\n    }\n  },\n}\n", "// Import polyfill.\nimport RevocableProxy from '@doars/common/src/polyfills/RevocableProxy.js'\n\n/**\n * Create an object with utility function.\n * @returns {Object} Utilities.\n */\nconst createContextUtilities = () => {\n  return {\n    createContexts,\n    createContextsProxy,\n    RevocableProxy,\n  }\n}\n\n/**\n * Create component's contexts for an attributes expression.\n * @param {Component} component Instance of the component.\n * @param {Attribute} attribute Instance of the attribute.\n * @param {Function} update Called when update needs to be invoked.\n * @param {Object} extra Optional extra context items.\n * @returns {Array<Object, Function>} Expressions contexts and destroy functions.\n */\nexport const createContexts = (component, attribute, update, extra = null) => {\n  // Get library.\n  const library = component.getLibrary()\n\n  // Start with the simple contexts.\n  const contexts = library.getSimpleContexts()\n\n  const deconstructed = []\n  let after = '', before = ''\n  // Iterate over all contexts.\n  const creatableContexts = library.getContexts()\n  // Store destroy functions.\n  const destroyFunctions = []\n  for (const creatableContext of creatableContexts) {\n    if (!creatableContext || !creatableContext.name) {\n      continue\n    }\n\n    // Get context result.\n    const result = creatableContext.create(component, attribute, update, createContextUtilities())\n    if (!result || !result.value) {\n      continue\n    }\n\n    // Store destroy functions.\n    if (result.destroy && typeof (result.destroy) === 'function') {\n      destroyFunctions.push(result.destroy)\n    }\n\n    // Deconstruct options if marked as such.\n    if (creatableContext.deconstruct && typeof (result.value) === 'object') {\n      deconstructed.push(creatableContext.name)\n      before += 'with(' + creatableContext.name + ') { '\n      after += ' }'\n    }\n\n    // Store result value in context results.\n    contexts[creatableContext.name] = result.value\n  }\n\n  // Add extra items to context.\n  if (typeof (extra) === 'object') {\n    for (const name in extra) {\n      contexts[name] = extra[name]\n    }\n  }\n\n  return {\n    contexts,\n    destroy: () => {\n      // Call all destroy functions.\n      for (const destroyFunction of destroyFunctions) {\n        destroyFunction(createContextUtilities())\n      }\n    },\n\n    after,\n    before,\n    deconstructed,\n  }\n}\n\n/**\n * Create component's contexts only after the context gets used.\n * @param {Component} component Instance of the component.\n * @param {Attribute} attribute Instance of the attribute.\n * @param {Object} extra Optional extra context items.\n * @param {Function} update Called when update needs to be invoked.\n * @returns {Proxy} Expressions contexts' proxy.\n */\nexport const createContextsProxy = (component, attribute, update, extra = null) => {\n  // Store context after first call.\n  let data = null\n  // Create context proxy.\n  const revocable = RevocableProxy({}, {\n    get: (target, property) => {\n      // Create context.\n      if (!data) {\n        data = createContexts(component, attribute, update, extra)\n      }\n\n      // Check if name exists in context.\n      if (property in data.contexts) {\n        // Call accessed callback if element or state is accessed.\n        attribute.accessed(component.getId(), property)\n\n        // Return value.\n        return data.contexts[property]\n      }\n\n      // Try and get value from state.\n      if (data.contexts.$state) {\n        if (property in data.contexts.$state) {\n          // Call accessed callback if element or state is accessed.\n          attribute.accessed(component.getId(), '$state')\n\n          // Return value.\n          return data.contexts.$state[property]\n        }\n      }\n    },\n  })\n\n  // Return context.\n  return {\n    contexts: revocable.proxy,\n    destroy: () => {\n      // Call destroy on created context.\n      if (data && data.destroy) {\n        data.destroy(component, attribute)\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    },\n  }\n}\n\nexport const createAutoContexts = (\n  component,\n  attribute,\n  extra = null\n) => {\n  // Collect update triggers.\n  const triggers = []\n  const update = (id, context) => {\n    triggers.push({\n      id,\n      path: context,\n    })\n  }\n\n  // Create function context.\n  const { contexts, destroy } = createContexts(component, attribute, update, extra)\n\n  return [contexts, () => {\n    // Invoke destroy.\n    destroy()\n\n    // Dispatch update triggers.\n    if (triggers.length > 0) {\n      component.getLibrary().update(triggers)\n    }\n  }]\n}\n\nexport default {\n  createAutoContexts,\n  createContexts,\n  createContextsProxy,\n}\n", "/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\nexport const getDeeply = (object, path) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\nexport const isObject = (value) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "// Import symbols.\nimport { SYNC } from '../symbols.js'\nimport { createAutoContexts } from '../utilities/Context.js'\nimport { getDeeply, setDeeply } from '@doars/common/src/utilities/Object.js'\nimport { escapeHtml } from '@doars/common/src/utilities/String.js'\n\nexport default {\n  name: 'sync',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Store whether this call is an update.\n    const isNew = !attribute[SYNC]\n\n    if (isNew) {\n      // Check if placed on a valid tag.\n      if (\n        !(element.tagName === 'DIV' && element.hasAttribute('contenteditable')) &&\n        element.tagName !== 'INPUT' &&\n        element.tagName !== 'SELECT' &&\n        element.tagName !== 'TEXTAREA'\n      ) {\n        console.warn('Doars: `sync` directive must be placed on an `<input>`, `<select>`, `<textarea>` tag, or a content editable `div`.')\n        return\n      }\n    }\n\n    // Deconstruct attribute.\n    let value = attribute.getValue().trim()\n    const key = attribute.getKey()\n    if (key) {\n      value = '$' + key + '.' + value\n    }\n\n    // Check if value is a valid variable name.\n    if (!/^[_$a-z]{1}[._$a-z0-9]{0,}$/i.test(value)) {\n      console.warn('Doars: `sync` directive\\'s value not a valid variable name: \"' + value + '\".')\n      return\n    }\n    value = value.split('.')\n\n    if (isNew) {\n      // Set handler that updates data based of node tag.\n      let handler\n      switch (element.tagName) {\n        case 'DIV':\n          handler = () => {\n            // Update value.\n            const [contexts, destroyContexts] = createAutoContexts(component, attribute.clone())\n            setDeeply(contexts, value, escapeHtml(element.innerText))\n            destroyContexts()\n          }\n          break\n\n        case 'INPUT':\n          handler = () => {\n            const attributeClone = attribute.clone()\n            const elementValue = escapeHtml(element.value)\n            // Setup contexts.\n            const [contexts, destroyContexts] = createAutoContexts(component, attributeClone)\n\n            if (element.type === 'checkbox') {\n              // Get current value.\n              const dataValue = getDeeply(contexts, value)\n\n              // Update value.\n              if (element.checked) {\n                if (!dataValue) {\n                  setDeeply(contexts, value, [elementValue])\n                } if (!dataValue.includes(element.value)) {\n                  dataValue.push(elementValue)\n                }\n              } else if (dataValue) {\n                const index = dataValue.indexOf(element.value)\n                if (index >= 0) {\n                  dataValue.splice(index, 1)\n                }\n              }\n            } else if (element.type === 'radio') {\n              // Get current value.\n              const dataValue = getDeeply(contexts, value)\n\n              if (element.checked) {\n                if (dataValue !== element.value) {\n                  setDeeply(contexts, value, elementValue)\n                }\n              } else if (dataValue === element.value) {\n                setDeeply(contexts, value, null)\n              }\n            } else {\n              setDeeply(contexts, value, elementValue)\n            }\n\n            // Cleanup contexts.\n            destroyContexts()\n          }\n          break\n\n        case 'TEXTAREA':\n          handler = () => {\n            // Update value.\n            const [contexts, destroyContexts] = createAutoContexts(component, attribute.clone())\n            setDeeply(contexts, value, escapeHtml(element.innerText))\n            destroyContexts()\n          }\n          break\n\n        case 'SELECT':\n          handler = () => {\n            // Create contexts.\n            const [contexts, destroyContexts] = createAutoContexts(component, attribute.clone())\n\n            if (element.multiple) {\n              // Combine options.\n              const elementValues = []\n              for (const option of element.selectedOptions) {\n                elementValues.push(\n                  escapeHtml(option.value)\n                )\n              }\n              // Update value.\n              setDeeply(contexts, value, [elementValues.join('\\',\\'')])\n            } else {\n              // Update value.\n              setDeeply(contexts, value, escapeHtml(element.selectedOptions[0].value))\n            }\n\n            // Cleanup contexts.\n            destroyContexts()\n          }\n          break\n      }\n\n      // Add event listener.\n      element.addEventListener('input', handler)\n\n      // Store handler wrapper.\n      attribute[SYNC] = handler\n    }\n\n    const dataValue = processExpression(component, attribute, value)\n    switch (element.tagName) {\n      case 'DIV':\n      case 'TEXTAREA':\n        // Check if current value is different than attribute value.\n        if (dataValue !== element.innerText) {\n          // Update current value.\n          element.innerText = dataValue\n        }\n        break\n\n      case 'INPUT':\n        if (element.type === 'checkbox') {\n          // Update option if the checked value has changed.\n          const checked = dataValue.includes(element.value)\n          if (element.checked !== checked) {\n            // Update checked value.\n            element.checked = checked\n\n            // Update checked attribute.\n            if (checked) {\n              element.setAttribute('checked', '')\n            } else {\n              element.removeAttribute('checked')\n            }\n          }\n        } else if (element.type === 'radio') {\n          // Update option if the checked value has changed.\n          const checked = dataValue === element.value\n          if (element.checked !== checked) {\n            // Update checked value.\n            element.checked = checked\n\n            // Update checked attribute.\n            if (checked) {\n              element.setAttribute('checked', '')\n            } else {\n              element.removeAttribute('checked')\n            }\n          }\n        } else {\n          // Check if current value is different than attribute value.\n          if (dataValue !== element.value) {\n            // Update current value.\n            element.setAttribute('value', dataValue)\n          }\n        }\n        break\n\n      case 'SELECT':\n        // Iterate over the select options.\n        for (const option of Array.from(element.options)) {\n          // Update option if the selected value has changed.\n          const select = Array.isArray(dataValue) ? dataValue.includes(option.value) : dataValue === option.value\n          if (option.selected !== select) {\n            // Update option status.\n            option.selected = select\n\n            // Update option attribute.\n            if (select) {\n              option.setAttribute('selected', '')\n            } else {\n              option.removeAttribute('selected')\n            }\n          }\n        }\n        break\n    }\n  },\n\n  destroy: (component, attribute) => {\n    // Exit early if nothing to destroy.\n    if (!attribute[SYNC]) {\n      return\n    }\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Remove existing event listeners.\n    element.removeEventListener('input', attribute[SYNC])\n\n    // Remove data from attribute.\n    delete attribute[SYNC]\n  },\n}\n", "import { isPromise } from '@doars/common/src/utilities/Promise.js'\n\nexport default {\n  name: 'text',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const modifiers = attribute.getModifiers()\n\n    const set = (text) => {\n      // Assign text.\n      if (modifiers.content) {\n        if (element.textContent !== text) {\n          element.textContent = text\n        }\n      } else if (element.innerText !== text) {\n        element.innerText = text\n      }\n    }\n\n    // Execute value and retrieve result.\n    const result = processExpression(component, attribute, attribute.getValue())\n\n    // Store results.\n    attribute.setData(result)\n\n    // Handle promises.\n    if (isPromise(result)) {\n      Promise.resolve(result)\n        .then((resultResolved) => {\n          // If stored data has changed then this promise should be ignored.\n          if (attribute.getData() !== result) {\n            return\n          }\n\n          set(resultResolved)\n        })\n    } else {\n      set(result)\n    }\n  },\n}\n", "export default {\n  name: 'watch',\n\n  update: (component, attribute, { processExpression }) => {\n    // Deconstruct attribute.\n    const value = attribute.getValue()\n\n    // Execute attribute expression.\n    processExpression(component, attribute, value, {}, {\n      return: false,\n    })\n  },\n}\n", "// Import symbols.\nimport { ATTRIBUTES, COMPONENT } from './symbols.js'\n\n// Import classes.\nimport Component from './Component.js'\n\n// Import contexts.\nimport contextChildren from './contexts/children.js'\nimport contextComponent from './contexts/component.js'\nimport contextElement from './contexts/element.js'\nimport contextDispatch from './contexts/dispatch.js'\nimport contextFor from './contexts/for.js'\nimport contextInContext from './contexts/inContext.js'\nimport contextNextTick from './contexts/nextTick.js'\nimport contextParent from './contexts/parent.js'\nimport contextReferences from './contexts/references.js'\nimport contextState from './contexts/state.js'\n\n// Import directives.\nimport directiveAttribute from './directives/attribute.js'\nimport directiveCloak from './directives/cloak.js'\nimport directiveFor from './directives/for.js'\nimport directiveHtml from './directives/html.js'\nimport directiveIf from './directives/if.js'\nimport directiveInitialized from './directives/initialized.js'\nimport directiveOn from './directives/on.js'\nimport directiveReference from './directives/reference.js'\nimport directiveSelect from './directives/select.js'\nimport directiveShow from './directives/show.js'\nimport directiveSync from './directives/sync.js'\nimport directiveText from './directives/text.js'\nimport directiveWatch from './directives/watch.js'\n\n// Import event dispatcher.\nimport EventDispatcher from '@doars/common/src/events/EventDispatcher.js'\n\n// Import utilities.\nimport { closestComponent } from './utilities/Component.js'\nimport { walk } from '@doars/common/src/utilities/Element.js'\n\nexport default class Doars extends EventDispatcher {\n  /**\n   * Create instance.\n   * @param {Object} options Options.\n   */\n  constructor(options) {\n    super()\n\n    // Deconstruct options.\n    let { prefix, root } = options = Object.assign({\n      prefix: 'd',\n      processor: 'execute',\n      root: document.body,\n    }, options)\n    // If root is a string assume it is a selector.\n    if (typeof (root) === 'string') {\n      options.root = root = document.querySelector(root)\n    }\n    // Validate options.\n    if (!prefix) {\n      console.error('Doars: `prefix` option not set.')\n      return\n    }\n    if (typeof (prefix) !== 'string') {\n      console.error('Doars: `prefix` option must be of type string.')\n      return\n    }\n    if (!root) {\n      console.error('Doars: `root` option not set.')\n      return\n    }\n    if (typeof (root) !== 'object') {\n      console.error('Doars: `root` option must be a string or HTMLElement.')\n      return\n    }\n\n    // Create unique identifier.\n    const id = Symbol('ID_DOARS')\n\n    // Create private variables.\n    let isEnabled = false, isUpdating = false, mutations, observer, triggers\n\n    const components = []\n    const contextsBase = {}, contexts = [\n      contextChildren,\n      contextComponent,\n      contextElement,\n      contextDispatch,\n      contextInContext,\n      contextNextTick,\n      contextParent,\n      contextReferences,\n\n      // Order of `state` before `for` context is important for deconstruction.\n      contextState,\n      contextFor,\n    ]\n    const directives = [\n      // Must happen first as other directives can rely on it.\n      directiveReference,\n\n      // Then execute those that modify the document tree, since it could make other directives redundant and save on processing.\n      directiveAttribute,\n      directiveFor,\n      directiveHtml,\n      directiveIf,\n      directiveText,\n\n      // Order does not matter any more.\n      directiveCloak,\n      directiveInitialized,\n      directiveOn,\n      directiveSelect,\n      directiveShow,\n      directiveSync,\n      directiveWatch,\n    ]\n    let directivesNames, directivesObject, directivesRegexp\n\n    /**\n     * Get the unique identifier.\n     * @returns {Symbol} Unique identifier.\n     */\n    this.getId = () => {\n      return id\n    }\n\n    /**\n     * Get the current options.\n     * @returns {Object} Current options.\n     */\n    this.getOptions = () => {\n      return Object.assign({}, options)\n    }\n\n    /* State */\n\n    /**\n     * Whether this is currently enabled.\n     * @returns {Boolean} Whether the library is enabled.\n     */\n    this.getEnabled = () => {\n      return isEnabled\n    }\n\n    /**\n     * Enable the library.\n     * @returns {Doars} This instance.\n     */\n    this.enable = () => {\n      if (isEnabled) {\n        return this\n      }\n\n      // Setup values.\n      isUpdating = false\n      mutations = []\n      triggers = {}\n\n      // Dispatch event.\n      this.dispatchEvent('enabling', [this])\n\n      // Mark as enabled.\n      isEnabled = true\n\n      // Create list of directive names.\n      directivesNames = directives.map((directive) => directive.name)\n\n      // Create directives object.\n      directivesObject = {}\n      for (const directive of directives) {\n        directivesObject[directive.name] = directive\n      }\n\n      // Dynamically create expression for matching any attribute names to known directive keys.\n      directivesRegexp = new RegExp('^' + prefix + '-(' + directivesNames.join('|') + ')(?:[$-_.a-z0-9]{0,})?$', 'i') // eslint-disable-line prefer-regex-literals\n\n      // Create mutation observer.\n      observer = new MutationObserver((handleMutation).bind(this))\n      observer.observe(root, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n      })\n\n      // Scan for components.\n      const componentName = prefix + '-state'\n      const ignoreName = prefix + '-ignore'\n      const componentElements = [...root.querySelectorAll('[' + componentName + ']')]\n      // Remove any elements that should be ignored.\n      for (let i = componentElements.length - 1; i >= 0; i--) {\n        if (componentElements[i].closest('[' + ignoreName + ']')) {\n          componentElements.splice(i, 1)\n        }\n      }\n      addComponents((root.hasAttribute(componentName) && !root.hasAttribute(ignoreName)) ? root : null, ...componentElements)\n\n      // Dispatch events.\n      this.dispatchEvent('enabled', [this])\n      this.dispatchEvent('updated', [this])\n\n      return this\n    }\n\n    /**\n     * Disable the library.\n     * @returns {Doars} This instance.\n     */\n    this.disable = () => {\n      if (!isEnabled) {\n        return this\n      }\n\n      // Disable mutation observer.\n      observer.disconnect()\n      observer = null\n\n      // Reset values.\n      isUpdating = mutations = triggers = null\n\n      // Dispatch event.\n      this.dispatchEvent('disabling', [this], { reverse: true })\n\n      // Remove components.\n      removeComponents(...components)\n\n      // Reset directives helper.\n      directivesNames = directivesObject = directivesRegexp = null\n\n      // Mark as disabled.\n      isEnabled = false\n\n      // Dispatch event.\n      this.dispatchEvent('disabled', [this], { reverse: true })\n\n      return this\n    }\n\n    /* Components */\n\n    /**\n     * Add components to instance.\n     * @param  {...HTMLElement} elements Elements to add as components.\n     * @returns {Array<Component>} List of added components.\n     */\n    const addComponents = (...elements) => {\n      const results = []\n      const resultElements = []\n      for (const element of elements) {\n        if (!element) {\n          continue\n        }\n\n        // Skip if already a component.\n        if (element[COMPONENT]) {\n          continue\n        }\n\n        // Create component.\n        const component = new Component(this, element)\n        // Add to list.\n        components.push(component)\n\n        // Add to results.\n        results.push(component)\n        resultElements.push(element)\n      }\n\n      if (resultElements.length > 0) {\n        // Dispatch event.\n        this.dispatchEvent('components-added', [this, resultElements])\n      }\n\n      // Initialize new components.\n      for (const component of results) {\n        component.initialize()\n      }\n\n      // Update all attributes on new components.\n      for (const component of results) {\n        component.updateAttributes(component.getAttributes())\n      }\n\n      return results\n    }\n\n    /**\n     * Remove components from instance.\n     * @param  {...Component} components Component to remove.\n     * @returns {Array<HTMLElement>} List of elements of removed components.\n     */\n    const removeComponents = (..._components) => {\n      const results = []\n      for (const component of _components) {\n        // Skip if not in list.\n        const index = components.indexOf(component)\n        if (index < 0) {\n          continue\n        }\n\n        // Add to results.\n        results.push(component.getElement())\n\n        // Destroy component.\n        component.destroy()\n        // Remove from list.\n        components.splice(index, 1)\n      }\n\n      if (results.length > 0) {\n        // Dispatch event.\n        this.dispatchEvent('components-removed', [this, results])\n      }\n\n      return results\n    }\n\n    /* Simple contexts */\n\n    /**\n     * Get simple contexts.\n     * @returns {Object} Stored simple contexts.\n     */\n    this.getSimpleContexts = () => Object.assign({}, contextsBase)\n\n    /**\n     * Add a value directly to the contexts without needing to use an object or having to deal with indices.\n     * @param {String} name Property name under which to add the context.\n     * @param {Any} value The value to add, null removes the context.\n     * @returns {Boolean} Whether the value was successfully set.\n     */\n    this.setSimpleContext = (name, value = null) => {\n      // Delete context if value is null.\n      if (value === null) {\n        delete contextsBase[name]\n\n        // Dispatch event.\n        this.dispatchEvent('simple-context-removed', [this, name])\n        return true\n      }\n\n      // Validate name.\n      if (!name.match('^([a-zA-Z_$][a-zA-Z\\\\d_$]*)$')) {\n        console.warn('Doars: name of a bind can not start with a \"$\".')\n        return false\n      }\n\n      // Store value on contexts base.\n      contextsBase[name] = value\n\n      // Dispatch event.\n      this.dispatchEvent('simple-context-added', [this, name, value])\n\n      return true\n    }\n\n    /**\n     * Adds simple contexts by looping through the object and calling the the setSimpleContext function with the data.\n     * @param {Object} contexts An object where the key is the name for the simple context and the value the simple context.\n     * @returns {Object} Which simple context was successfully set.\n     */\n    this.setSimpleContexts = (contexts) => {\n      const result = {}\n      for (const name in contexts) {\n        if (Object.hasOwnProperty.call(contexts, name)) {\n          result[name] = this.setSimpleContext(name, contexts[name])\n        }\n      }\n      return result\n    }\n\n    /* Contexts */\n\n    /**\n     * Get list contexts.\n     * @returns {Array<Object>} List of contexts.\n     */\n    this.getContexts = () => [...contexts]\n\n    /**\n     * Add contexts at the index. *Can only be called when NOT enabled.*\n     * @param {Number} index Index to start adding at.\n     * @param {...Object} _contexts List of contexts to add.\n     * @returns {Array<Object>} List of added contexts.\n     */\n    this.addContexts = (index, ..._contexts) => {\n      if (isEnabled) {\n        console.warn('Doars: Unable to add contexts after being enabled!')\n        return\n      }\n\n      if (index < 0) {\n        index = contexts.length + (index % contexts.length)\n      } else if (index > contexts.length) {\n        index = contexts.length\n      }\n\n      const results = []\n      for (let i = 0; i < _contexts.length; i++) {\n        // Get context from list.\n        const context = _contexts[i]\n\n        // Skip if already in list.\n        if (contexts.includes(context)) {\n          continue\n        }\n\n        // Add to list.\n        contexts.splice(index + i, 0, context)\n\n        // Add to results.\n        results.push(context)\n      }\n\n      if (results.length > 0) {\n        // Dispatch event.\n        this.dispatchEvent('contexts-added', [this, results])\n      }\n\n      return results\n    }\n\n    /**\n     * Remove contexts. *Can only be called when NOT enabled.*\n     * @param {...Object} _contexts List of contexts to remove.\n     * @returns {Array<Object>} List of removed contexts.\n     */\n    this.removeContexts = (..._contexts) => {\n      if (isEnabled) {\n        console.warn('Doars: Unable to remove contexts after being enabled!')\n        return\n      }\n\n      const results = []\n      for (const context of _contexts) {\n        // Skip if not in list.\n        const index = contexts.indexOf(context)\n        if (index < 0) {\n          continue\n        }\n\n        // Remove from list.\n        contexts.slice(index, 1)\n\n        // Add to results.\n        results.push(context)\n      }\n\n      if (results.length > 0) {\n        // Dispatch event.\n        this.dispatchEvent('contexts-removed', [this, results])\n      }\n\n      return results\n    }\n\n    /* Directives */\n\n    /**\n     * Get list directives.\n     * @returns {Array<Object>} List of directives.\n     */\n    this.getDirectives = () => [...directives]\n\n    /**\n     * Get list of directive names.\n     * @returns {Array<String>} List of directive names.\n     */\n    this.getDirectivesNames = () => [...directivesNames]\n\n    /**\n     * Get object of directives with the directive name as key.\n     * @returns {Object} Object of directives.\n     */\n    this.getDirectivesObject = () => Object.assign({}, directivesObject)\n\n    /**\n     * Check whether a name matches that of a directive.\n     * @param {String} attributeName Name of the attribute to match.\n     * @returns {Boolean} Whether the name matches that of a directive.\n     */\n    this.isDirectiveName = (attributeName) => directivesRegexp.test(attributeName)\n\n    /**\n     * Add directives at the index. *Can only be called when NOT enabled.*\n     * @param {Number} index Index to start adding at.\n     * @param  {...Object} _directives List of directives to add.\n     * @returns {Array<Object>} List of added directives.\n     */\n    this.addDirectives = (index, ..._directives) => {\n      if (isEnabled) {\n        console.warn('Doars: Unable to add directives after being enabled!')\n        return\n      }\n\n      if (index < 0) {\n        index = directives.length + (index % directives.length)\n      } else if (index > directives.length) {\n        index = directives.length\n      }\n\n      const results = []\n      for (let i = 0; i < _directives.length; i++) {\n        // Get directive from list.\n        const directive = _directives[i]\n\n        // Skip if already in list.\n        if (directives.includes(directive)) {\n          continue\n        }\n\n        // Add to list.\n        directives.splice(index + i, 0, directive)\n\n        // Add to results.\n        results.push(directive)\n      }\n\n      if (results.length > 0) {\n        // Reset directives helpers.\n        directivesNames = directivesObject = directivesRegexp = null\n\n        // Dispatch event.\n        this.dispatchEvent('directives-added', [this, results])\n      }\n\n      return results\n    }\n\n    /**\n     * Remove directives. *Can only be called when NOT enabled.*\n     * @param  {...Object} _directives List of directives to remove.\n     * @returns {Array<Object>} List of removed directives.\n     */\n    this.removeDirectives = (..._directives) => {\n      if (isEnabled) {\n        console.warn('Doars: Unable to remove directives after being enabled!')\n        return\n      }\n\n      const results = []\n      for (const directive of _directives) {\n        // Skip if not in list.\n        const index = directives.indexOf(directive)\n        if (index < 0) {\n          continue\n        }\n\n        // Remove from list.\n        directives.slice(index, 1)\n\n        // Add to results\n        results.push(directive)\n      }\n\n      if (results.length > 0) {\n        // Reset directives helpers.\n        directivesNames = directivesObject = directivesRegexp = null\n\n        // Dispatch event.\n        this.dispatchEvent('directives-removed', [this, results])\n      }\n\n      return results\n    }\n\n    /* Update */\n\n    /**\n     * Update directives based on triggers. *Can only be called when enabled.*\n     * @param {Array<Object>} _triggers List of triggers to update with.\n     */\n    this.update = (_triggers) => {\n      if (!isEnabled) {\n        // Exit early since it needs to enabled first.\n        return\n      }\n\n      if (_triggers) {\n        // Add new triggers to existing triggers.\n        for (const trigger of _triggers) {\n          // Deconstruct new trigger.\n          const { id, path } = trigger\n\n          // Create list at id if not already there.\n          if (!(id in triggers)) {\n            triggers[id] = [\n              path,\n            ]\n            continue\n          }\n\n          // Add path to list at id.\n          if (!triggers[id].includes(path)) {\n            triggers[id].push(path)\n          }\n        }\n      }\n\n      // Don't update while another update is going on.\n      if (isUpdating) {\n        return\n      }\n\n      // Check if there is something to update.\n      if (Object.getOwnPropertySymbols(triggers).length === 0) {\n        return\n      }\n\n      this.dispatchEvent('updating', [this])\n\n      // Set as updating.\n      isUpdating = true\n\n      // Move update triggers to local scope only.\n      _triggers = triggers\n      triggers = {}\n\n      // Update each component and collect any triggers.\n      for (const component of components) {\n        component.update(_triggers)\n        // If this ever needs to be done in hierarchical order try the following. Go over each component and check if its parent is further down in the list. If so place the component directly after the parent. Then continue iteration over the components. This sorting only has to happen when a component is added to or moved in the hierarchy.\n      }\n\n      // Set as NOT updating.\n      isUpdating = false\n\n      // If there are triggers again then update again.\n      if (Object.getOwnPropertySymbols(triggers).length > 0) {\n        console.warn('Doars: during an update another update has been triggered. Normally this should not happen unless an expression in one of the directives is modifying a state which could cause a infinite loop!')\n        // Use an animation frame to delay the update to prevent freezing.\n        window.requestAnimationFrame(() => this.update())\n        return\n      }\n\n      // If there are any mutation to handle then handle them.\n      if (mutations.length > 0) {\n        handleMutation()\n        return\n      }\n\n      this.dispatchEvent('updated', [this])\n    }\n\n    /**\n     * Handle document mutations by update internal data and executing directives.\n     * @param {Array<MutationRecord>} newMutations List of mutations.\n     */\n    const handleMutation = (newMutations) => {\n      // Add mutations to existing list.\n      mutations.push(...newMutations)\n\n      // Don't handle mutations while an update is going on.\n      if (isUpdating) {\n        return\n      }\n\n      // Check if there are any mutations to handle.\n      if (mutations.length === 0) {\n        return\n      }\n\n      // Set as updating.\n      isUpdating = true\n\n      // Get mutations to handle.\n      newMutations = [...mutations]\n      mutations = []\n\n      // Construct component name.\n      const componentName = prefix + '-state'\n      const ignoreName = prefix + '-ignore'\n\n      // Store new attribute and elements that define new components.\n      const componentsToAdd = []\n      const componentsToRemove = []\n\n      const remove = (element) => {\n        // Skip if not an element.\n        if (element.nodeType !== 1) {\n          return\n        }\n\n        // Check if element is a component itself.\n        if (element[COMPONENT]) {\n          // Add component to remove list.\n          componentsToRemove.unshift(element[COMPONENT])\n          // Scan for more components inside this.\n          const componentElements = element.querySelectorAll(componentName)\n          for (const componentElement of componentElements) {\n            if (componentElement[COMPONENT]) {\n              componentsToRemove.unshift(componentElement)\n            }\n          }\n        } else {\n          // Create iterator for walking over all elements in the component, skipping elements that are components and adding those to the remove list.\n          const iterator = walk(element, (element) => {\n            if (element[COMPONENT]) {\n              componentsToRemove.unshift(element[COMPONENT])\n              return false\n            }\n            return true\n          })\n          do {\n            // Check if element has attributes.\n            if (!element[ATTRIBUTES]) {\n              continue\n            }\n\n            // Remove attributes from their component.\n            for (const attribute of element[ATTRIBUTES]) {\n              attribute.getComponent().removeAttribute(attribute)\n            }\n          } while (element = iterator())\n        }\n      }\n      const add = (element) => {\n        // Skip if not an element.\n        if (element.nodeType !== 1) {\n          return\n        }\n\n        // Skip if inside an ignore tag.\n        const ignoreParent = element.closest('[' + ignoreName + ']')\n        if (ignoreParent) {\n          return\n        }\n\n        // Scan for new components and add them to the list.\n        const componentElements = element.querySelectorAll('[' + componentName + ']')\n        for (const componentElement of componentElements) {\n          // Skip if inside an ignore tag.\n          const ignoreParent = componentElement.closest('[' + ignoreName + ']')\n          if (ignoreParent) {\n            continue\n          }\n\n          componentsToAdd.push(componentElement)\n        }\n\n        // Check if this elements defines a new component.\n        if (element.hasAttribute(componentName)) {\n          // Store new component element and exit early.\n          componentsToAdd.push(element)\n          return\n        }\n\n        // Find nearest component.\n        const component = closestComponent(element)\n        if (component) {\n          // Scan for and update new attributes.\n          const attributes = component.scanAttributes(element)\n          component.updateAttributes(attributes)\n        }\n      }\n\n      // Iterate over mutations.\n      for (const mutation of newMutations) {\n        if (mutation.type === 'childList') {\n          // Iterate over removed elements.\n          for (const element of mutation.removedNodes) {\n            remove(element)\n          }\n\n          // Iterate over added elements.\n          for (const element of mutation.addedNodes) {\n            add(element)\n          }\n        } else if (mutation.type === 'attributes') {\n          const element = mutation.target\n          // Check if new component is defined.\n          if (mutation.attributeName === componentName) {\n            // If a component is already defined ignore the change.\n            if (element[COMPONENT]) {\n              continue\n            }\n\n            // Get nearest component, this will become the parent.\n            const component = closestComponent(element)\n            if (component) {\n              // Remove attributes part of nearest component, that will become part of the new component.\n              let currentElement = element\n              const iterator = walk(element, (element) => element.hasAttribute(componentName))\n              do {\n                for (const attribute of currentElement[ATTRIBUTES]) {\n                  component.removeAttribute(attribute)\n                }\n              } while (currentElement = iterator())\n            }\n\n            // Add new component.\n            addComponents(element)\n            continue\n          } else if (mutation.attributeName === ignoreName) {\n            if (element.hasAttribute(ignoreName)) {\n              // Remove everything inside.\n              remove(element)\n              continue\n            }\n\n            // Add everything inside.\n            add(element)\n            continue\n          }\n\n          // Check if a directive is added.\n          if (!directivesRegexp.test(mutation.attributeName)) {\n            continue\n          }\n\n          // Get component of mutated element.\n          const component = closestComponent(element)\n          if (!component) {\n            continue\n          }\n\n          // Get attribute from component and value from element.\n          let attribute = null\n          for (const targetAttribute of element[ATTRIBUTES]) {\n            if (targetAttribute.getName() === mutation.attributeName) {\n              attribute = targetAttribute\n              break\n            }\n          }\n          const value = element.getAttribute(mutation.attributeName)\n\n          // If no attribute found add it.\n          if (!attribute) {\n            if (value) {\n              component.addAttribute(element, mutation.attributeName, value)\n            }\n            continue\n          }\n\n          // Update attribute.\n          attribute.setValue(value)\n          component.updateAttribute(attribute)\n        }\n      }\n\n      // Remove old components.\n      if (componentsToRemove.length > 0) {\n        removeComponents(...componentsToRemove)\n      }\n      // Add new components.\n      if (componentsToAdd.length > 0) {\n        addComponents(...componentsToAdd)\n      }\n\n      // Set as NOT updating.\n      isUpdating = false\n\n      // If there are any mutation to handle then handle them.\n      if (mutations.length > 0) {\n        handleMutation()\n        return\n      }\n\n      // If there are any triggers then trigger an update.\n      if (Object.getOwnPropertySymbols(triggers).length > 0) {\n        this.update()\n      }\n    }\n  }\n}\n", "import { createContexts } from './Context.js'\n\n/**\n * Executes value in the correct context.\n * @param {Component} component Instance of the component.\n * @param {Attribute} attribute Instance of the attribute.\n * @param {String} expression Expression to execute.\n * @param {Object} extra Optional extra context items.\n * @param {Object} options Optional options object.\n * @returns {Any} Result of expression.\n */\nexport const execute = (component, attribute, expression, extra = null, options = null) => {\n  // Override default with given options.\n  options = Object.assign({\n    return: true,\n  }, options)\n\n  // Collect update triggers.\n  const triggers = []\n  const update = (id, context) => {\n    triggers.push({\n      id,\n      path: context,\n    })\n  }\n\n  // Create function context.\n  let { after, before, contexts, destroy } = createContexts(component, attribute, update, extra)\n\n  // Apply options.\n  if (options.return) {\n    before += 'return '\n  }\n\n  // Try to execute code.\n  let result\n  try {\n    result = new Function(...Object.keys(contexts), before + expression + after)(...Object.values(contexts)) // eslint-disable-line no-new-func\n  } catch (error) {\n    console.error('ExpressionError in:', expression, '\\n' + error.name + ': ' + error.message)\n    result = null\n  }\n\n  // Invoke destroy.\n  destroy()\n\n  // Dispatch update triggers.\n  if (triggers.length > 0) {\n    component.getLibrary().update(triggers)\n  }\n\n  return result\n}\n\nexport default {\n  execute,\n}\n", "import Doars from './Doars.js'\nimport { execute } from './utilities/Execute.js'\n\nDoars.executeExpression = execute\n\nexport default Doars\n", "import Doars from './DoarsExecute.js'\n\nwindow.Doars = Doars\n"],
  "mappings": "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",
  "names": ["ATTRIBUTES", "COMPONENT", "FOR", "INITIALIZED", "ON", "REFERENCES", "REFERENCES_CACHE", "SYNC", "EventDispatcher", "events", "name", "callback", "options", "eventData", "index", "i", "parameters", "event", "EventDispatcher_default", "escapeHtml", "text", "kebabToCamel", "match", "character", "parseAttributeModifiers", "modifiers", "result", "modifier", "hyphenIndex", "key", "value", "tmpValue", "type", "parseAttributeName", "prefix", "name", "full", "directive", "keyRaw", "parseForExpression", "expression", "variables", "parseSelector", "selector", "attributes", "selectorSegment", "Attribute", "_Attribute", "EventDispatcher_default", "component", "element", "name", "value", "isClone", "id", "ATTRIBUTES", "accessedItems", "data", "directive", "key", "keyRaw", "modifiersRaw", "modifiers", "_directive", "_keyRaw", "_key", "_modifiers", "parseAttributeName", "parseAttributeModifiers", "_value", "_data", "indexInElement", "path", "paths", "accessedAtId", "REFLECTION_METHODS", "RevocableProxy_default", "target", "handler", "revoked", "revocableHandler", "key", "parameters", "ProxyDispatcher", "EventDispatcher_default", "options", "map", "target", "path", "key", "handler", "deleted", "receiver", "value", "revocable", "RevocableProxy_default", "property", "ProxyDispatcher_default", "closestComponent", "element", "COMPONENT", "addAttributes", "element", "data", "name", "className", "removeAttributes", "element", "data", "name", "className", "setAttribute", "key", "value", "setAttributes", "TRANSITION_NAME", "transition", "type", "component", "element", "callback", "prefix", "transitionName", "dispatchEvent", "phase", "name", "value", "timeout", "requestFrame", "isDone", "selectors", "parseSelector", "addAttributes", "removeAttributes", "styles", "duration", "transitionIn", "transitionOut", "insertAfter", "reference", "node", "walk", "element", "filter", "index", "iterator", "child", "Component", "library", "element", "_a", "_b", "id", "prefix", "processor", "processorType", "processExpression", "directiveUtilities", "transition", "transitionIn", "transitionOut", "attributes", "hasUpdated", "isInitialized", "data", "proxy", "state", "COMPONENT", "children", "parent", "closestComponent", "_parent", "componentName", "value", "Attribute", "ProxyDispatcher_default", "directives", "key", "attribute", "directive", "triggers", "child", "dispatchEvent", "name", "directivesKeys", "index", "directiveIndex", "i", "indexInAttributes", "ignoreName", "newAttributes", "iterator", "walk", "triggerIds", "updatedAttributes", "detail", "children_default", "component", "attribute", "update", "createContextsProxy", "RevocableProxy", "children", "revocable", "target", "key", "receiver", "child", "component_default", "component", "element_default", "component", "attribute", "dispatch_default", "component", "name", "detail", "for_default", "component", "attribute", "update", "RevocableProxy", "element", "componentElement", "items", "target", "data", "FOR", "key", "revocable", "item", "inContext_default", "component", "attribute", "update", "createContexts", "callback", "triggers", "contextUpdate", "id", "context", "contexts", "destroy", "result", "nextTick_default", "component", "attribute", "update", "createContexts", "callbacks", "isSetup", "setup", "library", "handleUpdate", "stopListening", "contexts", "destroy", "callback", "parent_default", "component", "attribute", "update", "createContextsProxy", "parent", "contexts", "destroy", "references_default", "component", "attribute", "update", "RevocableProxy", "REFERENCES", "cache", "REFERENCES_CACHE", "references", "attributeIds", "id", "element", "name", "revocable", "target", "propertyKey", "receiver", "state_default", "component", "attribute", "update", "RevocableProxy", "proxy", "state", "onDelete", "target", "path", "onGet", "onSet", "revocable", "nativePromise", "isPromise", "value", "attribute_default", "component", "attribute", "processExpression", "element", "modifiers", "set", "value", "parseSelector", "setAttributes", "key", "setAttribute", "result", "isPromise", "resultResolved", "cloak_default", "component", "attribute", "transitionIn", "element", "createVariables", "names", "values", "variables", "i", "indexInSiblings", "elements", "value", "index", "FOR", "setAfter", "component", "update", "template", "existingIndex", "element", "insertAfter", "sibling", "transitionIn", "removeAfter", "maxLength", "transitionOut", "for_default", "attribute", "processExpression", "expression", "parseForExpression", "triggers", "id", "set", "iterable", "data", "iterableType", "isArray", "length", "e", "keys", "key", "result", "isPromise", "resultResolved", "DECODE_LOOKUP", "DECODE_REGEXP", "decode", "string", "DECODE_REGEXP", "character", "DECODE_LOOKUP", "html_default", "component", "attribute", "processExpression", "element", "modifiers", "set", "html", "decode", "child", "result", "isPromise", "resultResolved", "if_default", "component", "attribute", "processExpression", "transitionIn", "transitionOut", "template", "set", "result", "data", "element", "transition", "insertAfter", "isPromise", "destroy", "component", "attribute", "INITIALIZED", "element", "name", "initialized_default", "processExpression", "value", "handler", "detail", "CANCEL_EVENTS", "EXECUTION_MODIFIERS", "KEYPRESS_MODIFIERS", "on_default", "component", "attribute", "processExpression", "name", "key", "element", "value", "ON", "modifiers", "options", "executionModifier", "keypressModifiers", "modifier", "target", "handler", "event", "keypressModifier", "eventKey", "execute", "cancelHeldName", "nowHeld", "cancelEvent", "cancelHoldName", "keyLetGo", "nowThrottle", "destroy", "component", "attribute", "REFERENCES", "attributeId", "library", "componentId", "value", "REFERENCES_CACHE", "reference_default", "element", "TAG_SELECT", "CHECKED", "SELECTED", "TYPE_CHECKBOX", "select_default", "component", "attribute", "processExpression", "element", "type", "set", "data", "option", "select", "checked", "result", "isPromise", "resultResolved", "show_default", "component", "attribute", "processExpression", "transitionIn", "transitionOut", "element", "set", "data", "transition", "result", "isPromise", "resultResolved", "createContextUtilities", "createContexts", "createContextsProxy", "RevocableProxy_default", "component", "attribute", "update", "extra", "library", "contexts", "deconstructed", "after", "before", "creatableContexts", "destroyFunctions", "creatableContext", "result", "name", "destroyFunction", "data", "revocable", "target", "property", "createAutoContexts", "triggers", "id", "context", "destroy", "getDeeply", "object", "path", "objectTemp", "i", "setDeeply", "object", "path", "value", "i", "sync_default", "component", "attribute", "processExpression", "element", "isNew", "SYNC", "value", "key", "handler", "contexts", "destroyContexts", "createAutoContexts", "setDeeply", "escapeHtml", "attributeClone", "elementValue", "dataValue", "getDeeply", "index", "elementValues", "option", "checked", "select", "text_default", "component", "attribute", "processExpression", "element", "modifiers", "set", "text", "result", "isPromise", "resultResolved", "watch_default", "component", "attribute", "processExpression", "value", "Doars", "EventDispatcher_default", "options", "prefix", "root", "id", "isEnabled", "isUpdating", "mutations", "observer", "triggers", "components", "contextsBase", "contexts", "children_default", "component_default", "element_default", "dispatch_default", "inContext_default", "nextTick_default", "parent_default", "references_default", "state_default", "for_default", "directives", "reference_default", "attribute_default", "html_default", "if_default", "text_default", "cloak_default", "initialized_default", "on_default", "select_default", "show_default", "sync_default", "watch_default", "directivesNames", "directivesObject", "directivesRegexp", "directive", "handleMutation", "componentName", "ignoreName", "componentElements", "i", "addComponents", "removeComponents", "elements", "results", "resultElements", "element", "COMPONENT", "component", "Component", "_components", "index", "name", "value", "result", "_contexts", "context", "attributeName", "_directives", "_triggers", "trigger", "path", "newMutations", "componentsToAdd", "componentsToRemove", "remove", "componentElement", "iterator", "walk", "ATTRIBUTES", "attribute", "add", "closestComponent", "attributes", "mutation", "currentElement", "targetAttribute", "execute", "component", "attribute", "expression", "extra", "options", "triggers", "update", "id", "context", "after", "before", "contexts", "destroy", "createContexts", "result", "error", "Doars", "execute", "DoarsExecute_default", "DoarsExecute_default"]
}
