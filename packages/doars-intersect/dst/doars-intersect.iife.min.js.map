{
  "version": 3,
  "sources": ["../src/symbols.js", "../src/factories/directives/intersect.js", "../src/IntersectionObserver.js", "../src/DoarsIntersect.js", "../src/DoarsIntersect.iife.js"],
  "sourcesContent": ["export const INTERSECT = Symbol('VIEW');", "// Import symbols.\nimport { INTERSECT } from '../../symbols.js'; // Declare constants.\n\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  THROTTLE: 3\n};\nexport default (observer => {\n  return {\n    name: 'intersect',\n    update: (component, attribute, {\n      processExpression\n    }) => {\n      // Deconstruct attribute.\n      const element = attribute.getElement();\n      const key = attribute.getKey();\n      const value = attribute.getValue(); // Check if existing handler exists.\n\n      if (attribute[INTERSECT]) {\n        // Exit early if value has not changed.\n        if (attribute[INTERSECT].value === value) {\n          return;\n        } // Stop observing the element.\n\n\n        observer.remove(element, attribute[INTERSECT].handler); // Clear any ongoing timeouts.\n\n        if (attribute[INTERSECT].timeout) {\n          clearTimeout(attribute[INTERSECT].timeout);\n        } // Delete directive data.\n\n\n        delete attribute[INTERSECT];\n      } // Deconstruct attribute.\n\n\n      const modifiers = attribute.getModifiers(); // Process execution modifiers.\n\n      let executionModifier = EXECUTION_MODIFIERS.NONE;\n\n      if (modifiers.buffer) {\n        executionModifier = EXECUTION_MODIFIERS.BUFFER;\n\n        if (modifiers.buffer === true) {\n          modifiers.buffer = 5;\n        }\n      } else if (modifiers.debounce) {\n        executionModifier = EXECUTION_MODIFIERS.DEBOUNCE;\n\n        if (modifiers.debounce === true) {\n          modifiers.debounce = 500;\n        }\n      } else if (modifiers.throttle) {\n        executionModifier = EXECUTION_MODIFIERS.THROTTLE;\n\n        if (modifiers.throttle === true) {\n          modifiers.throttle = 500;\n        }\n      } // Create intersection handler.\n\n\n      const handler = event => {\n        // Check if intersection has changed.\n        const isChanged = attribute[INTERSECT].isIntersecting !== event.isIntersecting;\n\n        if (!isChanged) {\n          return;\n        } // Update state in attribute data.\n\n\n        attribute[INTERSECT].isIntersecting = event.isIntersecting; // Exit early if expression should not be executed.\n\n        if (key === 'enter' && !event.isIntersecting || key === 'leave' && event.isIntersecting) {\n          // Clear existing timeout.\n          if (attribute[INTERSECT].timeout) {\n            clearTimeout(attribute[INTERSECT].timeout);\n            attribute[INTERSECT].timeout = null;\n          }\n\n          return;\n        }\n\n        const execute = () => {\n          // Execute value using a copy of the attribute since this attribute should not update based on what contexts will be accessed.\n          processExpression(component, attribute.clone(), value, {\n            $event: event\n          }, {\n            return: false\n          }); // Reset the buffer.\n\n          attribute[INTERSECT].buffer = [];\n        }; // Store event in buffer.\n\n\n        attribute[INTERSECT].buffer.push(event); // Check if we need to apply an execution modifier.\n\n        if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n          // Exit early if buffer is not full.\n          if (attribute[INTERSECT].buffer.length < modifiers.buffer) {\n            return;\n          }\n\n          execute();\n        } else if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n          // Clear existing timeout.\n          if (attribute[INTERSECT].timeout) {\n            clearTimeout(attribute[INTERSECT].timeout);\n            attribute[INTERSECT].timeout = null;\n          } // Setup timeout and execute expression when it finishes.\n\n\n          attribute[INTERSECT].timeout = setTimeout(execute, modifiers.debounce);\n        } else if (executionModifier === EXECUTION_MODIFIERS.THROTTLE) {\n          // Get current time in milliseconds.\n          const now = window.performance.now(); // Exit early if throttle time has not passed.\n\n          if (attribute[INTERSECT].lastExecution && now - attribute[INTERSECT].lastExecution < modifiers.throttle) {\n            return;\n          }\n\n          execute(); // Store new latest execution time.\n\n          attribute[INTERSECT].lastExecution = now;\n        } else {\n          // Execute expression.\n          execute();\n        }\n      }; // Start observing the element.\n\n\n      observer.add(element, handler); // Store handler.\n\n      attribute[INTERSECT] = {\n        buffer: [],\n        handler,\n        isIntersecting: false,\n        timeout: attribute[INTERSECT] ? attribute[INTERSECT].timeout : null,\n        value\n      };\n    },\n    destroy: (component, attribute) => {\n      // Check if a handler exists.\n      if (!attribute[INTERSECT]) {\n        return;\n      } // Deconstruct attribute.\n\n\n      const element = attribute.getElement(); // Stop observing the element.\n\n      observer.remove(element, attribute[INTERSECT].handler); // Clear any ongoing timeouts.\n\n      if (attribute[INTERSECT].timeout) {\n        clearTimeout(attribute[INTERSECT].timeout);\n      } // Delete directive data.\n\n\n      delete attribute[INTERSECT];\n    }\n  };\n});", "export default class IntersectionObserver {\n  /**\n   * Create observer instance.\n   * @param {Object} options Intersection observer options.\n   */\n  constructor(options = null) {\n    // Overwrite default options.\n    options = Object.assign({\n      root: null,\n      rootMargin: '0px',\n      threshold: 0\n    }, options); // Store data per element.\n\n    const items = new WeakMap();\n    /**\n     * Intersection observer handler.\n     * @param {Array<IntersectionObserverEntry>} entries Intersection observer entries.\n     */\n\n    const intersect = entries => {\n      // Invoke callbacks of each entry.\n      for (const entry of entries) {\n        for (const callback of items.get(entry.target)) {\n          callback(entry);\n        }\n      }\n    }; // Create intersection observer.\n\n\n    const intersectionObserver = new IntersectionObserver(intersect, options);\n    /**\n     * Add element to observe.\n     * @param {HTMLElement} element Element to observer.\n     * @param {Function} callback Callback to call on intersection change.\n     */\n\n    this.add = (element, callback) => {\n      // Add callback to list.\n      if (!items.has(element)) {\n        items.set(element, []);\n      }\n\n      items.get(element).push(callback); // Start observing element.\n\n      intersectionObserver.observe(element);\n    };\n    /**\n     * Remove element from observing.\n     * @param {HTMLElement} element Element that is observed.\n     * @param {Function} callback Callback that is called on intersection change.\n     */\n\n\n    this.remove = (element, callback) => {\n      // Remove callback from list.\n      if (!items.has(element)) {\n        return;\n      }\n\n      const list = items.get(element);\n      const index = list.indexOf(callback);\n\n      if (index >= 0) {\n        list.splice(index, 1);\n      } // Check if there are no more callbacks.\n\n\n      if (list.length === 0) {\n        // Remove element from callbacks list.\n        items.delete(element); // Stop observing element.\n\n        intersectionObserver.unobserve(element);\n      }\n    };\n  }\n\n}", "// Import directives.\nimport createDirectiveIntersect from './factories/directives/intersect.js'; // Import observer.\n\nimport IntersectionObserver from './IntersectionObserver.js';\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\n\nexport default function (library, options = null) {\n  // Clone options.\n  options = Object.assign({}, options); // Set private variables.\n\n  let isEnabled = false;\n  let directiveView, intersectionObserver;\n\n  const onEnable = function () {\n    // Overwrite default options.\n    const _options = Object.assign({}, options);\n\n    if (!_options.root) {\n      _options.root = library.getOptions().root;\n    } // Setup observer.\n\n\n    intersectionObserver = new IntersectionObserver(options); // Create and add directive.\n\n    directiveView = createDirectiveIntersect(intersectionObserver);\n    library.addDirectives(-1, directiveView);\n  };\n\n  const onDisable = function () {\n    // Remove directive.\n    library.removeDirectives(directiveView);\n    directiveView = null; // Remove observer.\n\n    intersectionObserver = null;\n  };\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false; // Stop listening to enable state of the library.\n\n      library.removeEventListener('enabling', onEnable);\n      library.removeEventListener('disabling', onDisable);\n    }\n  };\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true; // Listen to enable state of the library.\n\n      library.addEventListener('enabling', onEnable);\n      library.addEventListener('disabling', onDisable);\n    }\n  }; // Automatically enable plugin.\n\n\n  this.enable();\n}", "import DoarsIntersect from './DoarsIntersect.js';\nwindow.DoarsIntersect = DoarsIntersect;"],
  "mappings": "MAAO,IAAMA,EAAY,OAAO,MAAM,ECGtC,IAAMC,EAAsB,CAC1B,KAAM,EACN,OAAQ,EACR,SAAU,EACV,SAAU,CACZ,EACOC,EAASC,IACP,CACL,KAAM,YACN,OAAQ,CAACC,EAAWC,EAAW,CAC7B,kBAAAC,CACF,IAAM,CAEJ,IAAMC,EAAUF,EAAU,WAAW,EAC/BG,EAAMH,EAAU,OAAO,EACvBI,EAAQJ,EAAU,SAAS,EAEjC,GAAIA,EAAUK,GAAY,CAExB,GAAIL,EAAUK,GAAW,QAAUD,EACjC,OAIFN,EAAS,OAAOI,EAASF,EAAUK,GAAW,OAAO,EAEjDL,EAAUK,GAAW,SACvB,aAAaL,EAAUK,GAAW,OAAO,EAI3C,OAAOL,EAAUK,EACnB,CAGA,IAAMC,EAAYN,EAAU,aAAa,EAErCO,EAAoBX,EAAoB,KAExCU,EAAU,QACZC,EAAoBX,EAAoB,OAEpCU,EAAU,SAAW,KACvBA,EAAU,OAAS,IAEZA,EAAU,UACnBC,EAAoBX,EAAoB,SAEpCU,EAAU,WAAa,KACzBA,EAAU,SAAW,MAEdA,EAAU,WACnBC,EAAoBX,EAAoB,SAEpCU,EAAU,WAAa,KACzBA,EAAU,SAAW,MAKzB,IAAME,EAAUC,GAAS,CAIvB,GAAI,EAFcT,EAAUK,GAAW,iBAAmBI,EAAM,gBAG9D,OAMF,GAFAT,EAAUK,GAAW,eAAiBI,EAAM,eAExCN,IAAQ,SAAW,CAACM,EAAM,gBAAkBN,IAAQ,SAAWM,EAAM,eAAgB,CAEnFT,EAAUK,GAAW,UACvB,aAAaL,EAAUK,GAAW,OAAO,EACzCL,EAAUK,GAAW,QAAU,MAGjC,MACF,CAEA,IAAMK,EAAU,IAAM,CAEpBT,EAAkBF,EAAWC,EAAU,MAAM,EAAGI,EAAO,CACrD,OAAQK,CACV,EAAG,CACD,OAAQ,EACV,CAAC,EAEDT,EAAUK,GAAW,OAAS,CAAC,CACjC,EAKA,GAFAL,EAAUK,GAAW,OAAO,KAAKI,CAAK,EAElCF,IAAsBX,EAAoB,OAAQ,CAEpD,GAAII,EAAUK,GAAW,OAAO,OAASC,EAAU,OACjD,OAGFI,EAAQ,CACV,SAAWH,IAAsBX,EAAoB,OAE/CI,EAAUK,GAAW,UACvB,aAAaL,EAAUK,GAAW,OAAO,EACzCL,EAAUK,GAAW,QAAU,MAIjCL,EAAUK,GAAW,QAAU,WAAWK,EAASJ,EAAU,QAAQ,UAC5DC,IAAsBX,EAAoB,SAAU,CAE7D,IAAMe,EAAM,OAAO,YAAY,IAAI,EAEnC,GAAIX,EAAUK,GAAW,eAAiBM,EAAMX,EAAUK,GAAW,cAAgBC,EAAU,SAC7F,OAGFI,EAAQ,EAERV,EAAUK,GAAW,cAAgBM,CACvC,MAEED,EAAQ,CAEZ,EAGAZ,EAAS,IAAII,EAASM,CAAO,EAE7BR,EAAUK,GAAa,CACrB,OAAQ,CAAC,EACT,QAAAG,EACA,eAAgB,GAChB,QAASR,EAAUK,GAAaL,EAAUK,GAAW,QAAU,KAC/D,MAAAD,CACF,CACF,EACA,QAAS,CAACL,EAAWC,IAAc,CAEjC,GAAI,CAACA,EAAUK,GACb,OAIF,IAAMH,EAAUF,EAAU,WAAW,EAErCF,EAAS,OAAOI,EAASF,EAAUK,GAAW,OAAO,EAEjDL,EAAUK,GAAW,SACvB,aAAaL,EAAUK,GAAW,OAAO,EAI3C,OAAOL,EAAUK,EACnB,CACF,GChKF,IAAqBO,EAArB,KAA0C,CAKxC,YAAYC,EAAU,KAAM,CAE1BA,EAAU,OAAO,OAAO,CACtB,KAAM,KACN,WAAY,MACZ,UAAW,CACb,EAAGA,CAAO,EAEV,IAAMC,EAAQ,IAAI,QAMZC,EAAYC,GAAW,CAE3B,QAAWC,KAASD,EAClB,QAAWE,KAAYJ,EAAM,IAAIG,EAAM,MAAM,EAC3CC,EAASD,CAAK,CAGpB,EAGME,EAAuB,IAAIP,EAAqBG,EAAWF,CAAO,EAOxE,KAAK,IAAM,CAACO,EAASF,IAAa,CAE3BJ,EAAM,IAAIM,CAAO,GACpBN,EAAM,IAAIM,EAAS,CAAC,CAAC,EAGvBN,EAAM,IAAIM,CAAO,EAAE,KAAKF,CAAQ,EAEhCC,EAAqB,QAAQC,CAAO,CACtC,EAQA,KAAK,OAAS,CAACA,EAASF,IAAa,CAEnC,GAAI,CAACJ,EAAM,IAAIM,CAAO,EACpB,OAGF,IAAMC,EAAOP,EAAM,IAAIM,CAAO,EACxBE,EAAQD,EAAK,QAAQH,CAAQ,EAE/BI,GAAS,GACXD,EAAK,OAAOC,EAAO,CAAC,EAIlBD,EAAK,SAAW,IAElBP,EAAM,OAAOM,CAAO,EAEpBD,EAAqB,UAAUC,CAAO,EAE1C,CACF,CAEF,EClEe,SAARG,EAAkBC,EAASC,EAAU,KAAM,CAEhDA,EAAU,OAAO,OAAO,CAAC,EAAGA,CAAO,EAEnC,IAAIC,EAAY,GACZC,EAAeC,EAEbC,EAAW,UAAY,CAE3B,IAAMC,EAAW,OAAO,OAAO,CAAC,EAAGL,CAAO,EAErCK,EAAS,OACZA,EAAS,KAAON,EAAQ,WAAW,EAAE,MAIvCI,EAAuB,IAAIG,EAAqBN,CAAO,EAEvDE,EAAgBK,EAAyBJ,CAAoB,EAC7DJ,EAAQ,cAAc,GAAIG,CAAa,CACzC,EAEMM,EAAY,UAAY,CAE5BT,EAAQ,iBAAiBG,CAAa,EACtCA,EAAgB,KAEhBC,EAAuB,IACzB,EAEA,KAAK,QAAU,UAAY,CAErB,CAACJ,EAAQ,WAAW,GAAKE,IAC3BA,EAAY,GAEZF,EAAQ,oBAAoB,WAAYK,CAAQ,EAChDL,EAAQ,oBAAoB,YAAaS,CAAS,EAEtD,EAEA,KAAK,OAAS,UAAY,CACnBP,IACHA,EAAY,GAEZF,EAAQ,iBAAiB,WAAYK,CAAQ,EAC7CL,EAAQ,iBAAiB,YAAaS,CAAS,EAEnD,EAGA,KAAK,OAAO,CACd,CC5DA,OAAO,eAAiBC",
  "names": ["INTERSECT", "EXECUTION_MODIFIERS", "intersect_default", "observer", "component", "attribute", "processExpression", "element", "key", "value", "INTERSECT", "modifiers", "executionModifier", "handler", "event", "execute", "now", "IntersectionObserver", "options", "items", "intersect", "entries", "entry", "callback", "intersectionObserver", "element", "list", "index", "DoarsIntersect_default", "library", "options", "isEnabled", "directiveView", "intersectionObserver", "onEnable", "_options", "IntersectionObserver", "intersect_default", "onDisable", "DoarsIntersect_default"]
}
