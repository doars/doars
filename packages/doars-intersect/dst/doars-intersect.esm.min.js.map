{
  "version": 3,
  "sources": ["../src/directives/intersect.js", "../../common/src/polyfills/IntersectionDispatcher.js", "../src/DoarsIntersect.js"],
  "sourcesContent": ["const INTERSECT = Symbol('INTERSECT')\n// Declare constants.\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  THROTTLE: 5,\n  DELAY: 6,\n}\n\nexport default ({\n  intersectDirectiveName,\n}, intersectionDispatcher,\n) => ({\n  name: intersectDirectiveName,\n\n  update: (\n    component,\n    attribute,\n    processExpression,\n  ) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const key = attribute.getKey()\n    const value = attribute.getValue()\n\n    // Check if existing handler exists.\n    if (attribute[INTERSECT]) {\n      // Exit early if value has not changed.\n      if (attribute[INTERSECT].value === value) {\n        return\n      }\n\n      // Stop observing the element.\n      intersectionDispatcher.remove(element, attribute[INTERSECT].handler)\n      // Clear any ongoing timeouts.\n      if (attribute[INTERSECT].timeout) {\n        clearTimeout(attribute[INTERSECT].timeout)\n      }\n      // Delete directive data.\n      delete attribute[INTERSECT]\n    }\n\n    // Deconstruct attribute.\n    const modifiers = attribute.getModifiers()\n\n    // Process execution modifiers.\n    let executionModifier = EXECUTION_MODIFIERS.NONE\n    if (modifiers.buffer) {\n      executionModifier = EXECUTION_MODIFIERS.BUFFER\n      if (modifiers.buffer === true) {\n        modifiers.buffer = 5\n      }\n    } else if (modifiers.debounce) {\n      executionModifier = EXECUTION_MODIFIERS.DEBOUNCE\n      if (modifiers.debounce === true) {\n        modifiers.debounce = 500\n      }\n    } else if (modifiers.throttle) {\n      executionModifier = EXECUTION_MODIFIERS.THROTTLE\n      if (modifiers.throttle === true) {\n        modifiers.throttle = 500\n      }\n    } else if (modifiers.delay) {\n      executionModifier = EXECUTION_MODIFIERS.DELAY\n      if (modifiers.delay === true) {\n        modifiers.delay = 500\n      }\n    }\n\n    // Create intersection handler.\n    const handler = (\n      event,\n    ) => {\n      // Check if intersection has changed.\n      const isChanged = attribute[INTERSECT].isIntersecting !== event.isIntersecting\n      if (!isChanged) {\n        return\n      }\n\n      // Update state in attribute data.\n      attribute[INTERSECT].isIntersecting = event.isIntersecting\n\n      // Exit early if expression should not be executed.\n      if ((key === 'enter' && !event.isIntersecting) || (key === 'leave' && event.isIntersecting)) {\n        // Clear existing timeout.\n        if (attribute[INTERSECT].timeout) {\n          clearTimeout(attribute[INTERSECT].timeout)\n          attribute[INTERSECT].timeout = null\n        }\n        return\n      }\n\n      const execute = (\n      ) => {\n        // Execute value using a copy of the attribute since this attribute should not update based on what contexts will be accessed.\n        processExpression(\n          component,\n          attribute.clone(),\n          value,\n          { $event: event },\n          { return: false },\n        )\n\n        // Reset the buffer.\n        attribute[INTERSECT].buffer = []\n      }\n\n      // Store event in buffer.\n      attribute[INTERSECT].buffer.push(event)\n\n      // Check if we need to apply an execution modifier.\n      if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n        // Exit early if buffer is not full.\n        if (attribute[INTERSECT].buffer.length < modifiers.buffer) {\n          return\n        }\n\n        execute()\n      } else if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n        // Clear existing timeout.\n        if (attribute[INTERSECT].timeout) {\n          clearTimeout(attribute[INTERSECT].timeout)\n          attribute[INTERSECT].timeout = null\n        }\n\n        // Setup timeout and execute expression when it finishes.\n        attribute[INTERSECT].timeout = setTimeout(execute, modifiers.debounce)\n      } else if (executionModifier === EXECUTION_MODIFIERS.THROTTLE) {\n        // Get current time in milliseconds.\n        const now = window.performance.now()\n\n        // Exit early if throttle time has not passed.\n        if (attribute[INTERSECT].lastExecution && now - attribute[INTERSECT].lastExecution < modifiers.throttle) {\n          return\n        }\n\n        execute()\n\n        // Store new latest execution time.\n        attribute[INTERSECT].lastExecution = now\n      } else if (EXECUTION_MODIFIERS.DELAY) {\n        // Setup timeout and execute expression when it finishes.\n        attribute[INTERSECT].timeout = setTimeout(execute, modifiers.delay)\n      } else {\n        // Execute expression.\n        execute()\n      }\n    }\n\n    // Start observing the element.\n    intersectionDispatcher.add(element, handler)\n\n    // Store handler.\n    attribute[INTERSECT] = {\n      buffer: [],\n      handler,\n      isIntersecting: false,\n      timeout: attribute[INTERSECT] ? attribute[INTERSECT].timeout : null,\n      value,\n    }\n  },\n\n  destroy: (\n    component,\n    attribute,\n  ) => {\n    // Check if a handler exists.\n    if (!attribute[INTERSECT]) {\n      return\n    }\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Stop observing the element.\n    intersectionDispatcher.remove(element, attribute[INTERSECT].handler)\n    // Clear any ongoing timeouts.\n    if (attribute[INTERSECT].timeout) {\n      clearTimeout(attribute[INTERSECT].timeout)\n    }\n    // Delete directive data.\n    delete attribute[INTERSECT]\n  },\n})\n", "export default class IntersectionDispatcher {\n  /**\n   * Create observer instance.\n   * @param {object} options Intersection observer options.\n   */\n  constructor(\n    options = null,\n  ) {\n    // Store data per element.\n    const items = new WeakMap()\n\n    /**\n     * Intersection observer handler.\n     * @param {Array<IntersectionObserverEntry>} entries Intersection observer entries.\n     */\n    const intersect = (\n      entries,\n    ) => {\n      // Invoke callbacks of each entry.\n      for (const entry of entries) {\n        for (const callback of items.get(entry.target)) {\n          callback(entry)\n        }\n      }\n    }\n\n    // Create intersection observer.\n    const observer = new window.IntersectionObserver(intersect, options)\n\n    /**\n     * Add element to observe.\n     * @param {HTMLElement} element Element to observer.\n     * @param {Function} callback Callback to call on intersection change.\n     */\n    this.add = (\n      element,\n      callback,\n    ) => {\n      // Add callback to list.\n      if (!items.has(element)) {\n        items.set(element, [])\n      }\n      items.get(element).push(callback)\n\n      // Start observing element.\n      observer.observe(element)\n    }\n\n    /**\n     * Remove element from observing.\n     * @param {HTMLElement} element Element that is observed.\n     * @param {Function} callback Callback that is called on intersection change.\n     */\n    this.remove = (\n      element,\n      callback,\n    ) => {\n      // Remove callback from list.\n      if (!items.has(element)) {\n        return\n      }\n      const list = items.get(element)\n      const index = list.indexOf(callback)\n      if (index >= 0) {\n        list.splice(index, 1)\n      }\n\n      // Check if there are no more callbacks.\n      if (list.length === 0) {\n        // Remove element from callbacks list.\n        items.delete(element)\n\n        // Stop observing element.\n        observer.unobserve(element)\n      }\n    }\n  }\n}\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n */\n\nimport createIntersectDirective from './directives/intersect.js'\nimport IntersectionDispatcher from '@doars/common/src/polyfills/IntersectionDispatcher.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    intersectDirectiveName: 'intersect',\n\n    intersectionRoot: null,\n    intersectionMargin: '0px',\n    intersectionThreshold: 0,\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n\n  // Setup observer.\n  const intersectionDispatcher = new IntersectionDispatcher({\n    root: options.intersectionRoot\n      ? options.intersectionRoot\n      : library.getOptions().root,\n    rootMargin: options.intersectionMargin,\n    threshold: options.intersectionThreshold,\n  })\n\n  // Create directive.\n  const intersectionDirective = createIntersectDirective(\n    options,\n    intersectionDispatcher,\n  )\n\n  const onEnable = (\n  ) => {\n    // Add directive.\n    library.addDirectives(-1, intersectionDirective)\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove directive.\n    library.removeDirectives(intersectionDirective)\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": ["INTERSECT", "EXECUTION_MODIFIERS", "intersect_default", "intersectDirectiveName", "intersectionDispatcher", "component", "attribute", "processExpression", "element", "key", "value", "modifiers", "executionModifier", "handler", "event", "execute", "now", "IntersectionDispatcher", "options", "items", "intersect", "entries", "entry", "callback", "observer", "element", "list", "index", "DoarsIntersect_default", "library", "options", "isEnabled", "intersectionDispatcher", "IntersectionDispatcher", "intersectionDirective", "intersect_default", "onEnable", "onDisable"]
}
