{
  "version": 3,
  "sources": ["../src/directives/intersect.js", "../../common/src/polyfills/IntersectionDispatcher.js", "../src/DoarsIntersect.js"],
  "sourcesContent": ["const INTERSECT = Symbol('INTERSECT')\n// Declare constants.\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  THROTTLE: 5,\n  DELAY: 6,\n}\n\nexport default ({\n  intersectDirectiveName,\n}, intersectionDispatcher,\n) => ({\n  name: intersectDirectiveName,\n\n  update: (\n    component,\n    attribute,\n    processExpression,\n  ) => {\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n    const key = attribute.getKey()\n    const value = attribute.getValue()\n\n    // Check if existing handler exists.\n    if (attribute[INTERSECT]) {\n      // Exit early if value has not changed.\n      if (attribute[INTERSECT].value === value) {\n        return\n      }\n\n      // Stop observing the element.\n      intersectionDispatcher.remove(element, attribute[INTERSECT].handler)\n      // Clear any ongoing timeouts.\n      if (attribute[INTERSECT].timeout) {\n        clearTimeout(attribute[INTERSECT].timeout)\n      }\n      // Delete directive data.\n      delete attribute[INTERSECT]\n    }\n\n    // Deconstruct attribute.\n    const modifiers = attribute.getModifiers()\n\n    // Process execution modifiers.\n    let executionModifier = EXECUTION_MODIFIERS.NONE\n    if (modifiers.buffer) {\n      executionModifier = EXECUTION_MODIFIERS.BUFFER\n      if (modifiers.buffer === true) {\n        modifiers.buffer = 5\n      }\n    } else if (modifiers.debounce) {\n      executionModifier = EXECUTION_MODIFIERS.DEBOUNCE\n      if (modifiers.debounce === true) {\n        modifiers.debounce = 500\n      }\n    } else if (modifiers.throttle) {\n      executionModifier = EXECUTION_MODIFIERS.THROTTLE\n      if (modifiers.throttle === true) {\n        modifiers.throttle = 500\n      }\n    } else if (modifiers.delay) {\n      executionModifier = EXECUTION_MODIFIERS.DELAY\n      if (modifiers.delay === true) {\n        modifiers.delay = 500\n      }\n    }\n\n    // Create intersection handler.\n    const handler = (\n      event,\n    ) => {\n      // Check if intersection has changed.\n      const isChanged = attribute[INTERSECT].isIntersecting !== event.isIntersecting\n      if (!isChanged) {\n        return\n      }\n\n      // Update state in attribute data.\n      attribute[INTERSECT].isIntersecting = event.isIntersecting\n\n      // Exit early if expression should not be executed.\n      if ((key === 'enter' && !event.isIntersecting) || (key === 'leave' && event.isIntersecting)) {\n        // Clear existing timeout.\n        if (attribute[INTERSECT].timeout) {\n          clearTimeout(attribute[INTERSECT].timeout)\n          attribute[INTERSECT].timeout = null\n        }\n        return\n      }\n\n      const execute = (\n      ) => {\n        // Execute value using a copy of the attribute since this attribute should not update based on what contexts will be accessed.\n        processExpression(\n          component,\n          attribute.clone(),\n          value,\n          { $event: event },\n          { return: false },\n        )\n\n        // Reset the buffer.\n        attribute[INTERSECT].buffer = []\n      }\n\n      // Store event in buffer.\n      attribute[INTERSECT].buffer.push(event)\n\n      // Check if we need to apply an execution modifier.\n      if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n        // Exit early if buffer is not full.\n        if (attribute[INTERSECT].buffer.length < modifiers.buffer) {\n          return\n        }\n\n        execute()\n      } else if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n        // Clear existing timeout.\n        if (attribute[INTERSECT].timeout) {\n          clearTimeout(attribute[INTERSECT].timeout)\n          attribute[INTERSECT].timeout = null\n        }\n\n        // Setup timeout and execute expression when it finishes.\n        attribute[INTERSECT].timeout = setTimeout(execute, modifiers.debounce)\n      } else if (executionModifier === EXECUTION_MODIFIERS.THROTTLE) {\n        // Get current time in milliseconds.\n        const now = window.performance.now()\n\n        // Exit early if throttle time has not passed.\n        if (attribute[INTERSECT].lastExecution && now - attribute[INTERSECT].lastExecution < modifiers.throttle) {\n          return\n        }\n\n        execute()\n\n        // Store new latest execution time.\n        attribute[INTERSECT].lastExecution = now\n      } else if (EXECUTION_MODIFIERS.DELAY) {\n        // Setup timeout and execute expression when it finishes.\n        attribute[INTERSECT].timeout = setTimeout(execute, modifiers.delay)\n      } else {\n        // Execute expression.\n        execute()\n      }\n    }\n\n    // Start observing the element.\n    intersectionDispatcher.add(element, handler)\n\n    // Store handler.\n    attribute[INTERSECT] = {\n      buffer: [],\n      handler,\n      isIntersecting: false,\n      timeout: attribute[INTERSECT] ? attribute[INTERSECT].timeout : null,\n      value,\n    }\n  },\n\n  destroy: (\n    component,\n    attribute,\n  ) => {\n    // Check if a handler exists.\n    if (!attribute[INTERSECT]) {\n      return\n    }\n\n    // Deconstruct attribute.\n    const element = attribute.getElement()\n\n    // Stop observing the element.\n    intersectionDispatcher.remove(element, attribute[INTERSECT].handler)\n    // Clear any ongoing timeouts.\n    if (attribute[INTERSECT].timeout) {\n      clearTimeout(attribute[INTERSECT].timeout)\n    }\n    // Delete directive data.\n    delete attribute[INTERSECT]\n  },\n})\n", "export default class IntersectionDispatcher {\n  /**\n   * Create observer instance.\n   * @param {object} options Intersection observer options.\n   */\n  constructor(\n    options = null,\n  ) {\n    // Store data per element.\n    const items = new WeakMap()\n\n    /**\n     * Intersection observer handler.\n     * @param {Array<IntersectionObserverEntry>} entries Intersection observer entries.\n     */\n    const intersect = (\n      entries,\n    ) => {\n      // Invoke callbacks of each entry.\n      for (const entry of entries) {\n        for (const callback of items.get(entry.target)) {\n          callback(entry)\n        }\n      }\n    }\n\n    // Create intersection observer.\n    const observer = new window.IntersectionObserver(intersect, options)\n\n    /**\n     * Add element to observe.\n     * @param {HTMLElement} element Element to observer.\n     * @param {Function} callback Callback to call on intersection change.\n     */\n    this.add = (\n      element,\n      callback,\n    ) => {\n      // Add callback to list.\n      if (!items.has(element)) {\n        items.set(element, [])\n      }\n      items.get(element).push(callback)\n\n      // Start observing element.\n      observer.observe(element)\n    }\n\n    /**\n     * Remove element from observing.\n     * @param {HTMLElement} element Element that is observed.\n     * @param {Function} callback Callback that is called on intersection change.\n     */\n    this.remove = (\n      element,\n      callback,\n    ) => {\n      // Remove callback from list.\n      if (!items.has(element)) {\n        return\n      }\n      const list = items.get(element)\n      const index = list.indexOf(callback)\n      if (index >= 0) {\n        list.splice(index, 1)\n      }\n\n      // Check if there are no more callbacks.\n      if (list.length === 0) {\n        // Remove element from callbacks list.\n        items.delete(element)\n\n        // Stop observing element.\n        observer.unobserve(element)\n      }\n    }\n  }\n}\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n */\n\nimport createIntersectDirective from './directives/intersect.js'\nimport IntersectionDispatcher from '@doars/common/src/polyfills/IntersectionDispatcher.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    intersectDirectiveName: 'intersect',\n\n    intersectionRoot: null,\n    intersectionMargin: '0px',\n    intersectionThreshold: 0,\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n\n  // Setup observer.\n  const intersectionDispatcher = new IntersectionDispatcher({\n    root: options.intersectionRoot\n      ? options.intersectionRoot\n      : library.getOptions().root,\n    rootMargin: options.intersectionMargin,\n    threshold: options.intersectionThreshold,\n  })\n\n  // Create directive.\n  const intersectionDirective = createIntersectDirective(\n    options,\n    intersectionDispatcher,\n  )\n\n  const onEnable = (\n  ) => {\n    // Add directive.\n    library.addDirectives(-1, intersectionDirective)\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove directive.\n    library.removeDirectives(intersectionDirective)\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": []
}
