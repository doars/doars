{
  "version": 3,
  "sources": ["../src/constants.js", "../src/symbols.js", "../../common/src/utilities/Element.js", "../../common/src/utilities/Html.js", "../../common/src/utilities/Attribute.js", "../../common/src/utilities/Morph.js", "../src/factories/directives/navigate.js", "../src/DoarsNavigate.js"],
  "sourcesContent": ["export const PRELOAD_INTERACT = 'interact'\nexport const PRELOAD_INTERSECT = 'intersect'\n", "export const NAVIGATE = Symbol('NAVIGATE')\n", "/**\n * Convert string to HTML element.\n * @param {String} string Element contents.\n * @returns {HTMLElement} HTML element part of a document fragment.\n */\nexport const fromString = (\n  string,\n) => {\n  const stringStart = string.substring(0, 15).toLowerCase()\n  const isDocument = (\n    stringStart.startsWith('<!doctype html>') ||\n    stringStart.startsWith('<html>')\n  )\n  if (isDocument) {\n    const html = document.createElement('html')\n    html.innerHTML = string\n    return html\n  }\n\n  const template = document.createElement('template')\n  template.innerHTML = string\n  return template.content.childNodes[0]\n}\n\n/**\n * Inserts an element after the reference element opposite of insertBefore and more reliable then ChildNode.after()\n * @param {HTMLElement} reference Node to insert after.\n * @param {Node} node Node to insert.\n */\nexport const insertAfter = (\n  reference,\n  node,\n) => {\n  if (reference.nextSibling) {\n    reference.parentNode.insertBefore(node, reference.nextSibling)\n  } else {\n    reference.parentNode.appendChild(node)\n  }\n}\n\n/**\n * Check whether two nodes are the same.\n * @param {HTMElement} a A node.\n * @param {HTMElement} b Another node.\n * @returns {Boolean} Whether the nodes are the same.\n */\nexport const isSame = (\n  a,\n  b,\n) => {\n  if (a.isSameNode && a.isSameNode(b)) {\n    return true\n  }\n\n  if (a.type === 3) { // Text node.\n    return a.nodeValue === b.nodeValue\n  }\n\n  if (a.tagName === b.tagName) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Iterate over all descendants of a given node.\n * @param {HTMLElement} element Element to walk over.\n * @param {Function} filter Filter function, return false to skip element.\n * @returns {Function} Iterator function. Call until a non-truthy value is returned.\n */\nexport const walk = (\n  element,\n  filter,\n) => {\n  let index = -1\n  let iterator = null\n  return () => {\n    // First go over iterator.\n    if (index >= 0 && iterator) {\n      const child = iterator()\n      if (child) {\n        return child\n      }\n    }\n\n    // Get next child that passes the filter.\n    let child = null\n    do {\n      index++\n      if (index >= element.childElementCount) {\n        return null\n      }\n\n      child = element.children[index]\n    } while (!filter(child))\n\n    // Setup iterator for child.\n    if (child.childElementCount) {\n      iterator = walk(child, filter)\n    }\n\n    // Return the child.\n    return child\n  }\n}\n\nexport default {\n  fromString,\n  insertAfter,\n  isSame,\n  walk,\n}\n", "const DECODE_LOOKUP = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': '\\'',\n  '&#39;': '\\'',\n  '&quot;': '\"',\n  '&#34;': '\"',\n}\nconst DECODE_REGEXP = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g\n\nconst ENCODE_LOOKUP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\\'': '&#39;',\n  '\"': '&quot;',\n}\nconst ENCODE_REGEXP = /[&<>'\"]/g\n\nexport const decode = (\n  string,\n) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(DECODE_REGEXP, (character) => {\n    return DECODE_LOOKUP[character]\n  })\n}\n\nexport const encode = (\n  string,\n) => {\n  if (typeof (string) !== 'string') {\n    return string\n  }\n\n  return string.replaceAll(ENCODE_REGEXP, (character) => {\n    return ENCODE_LOOKUP[character]\n  })\n}\n\nexport default {\n  decode,\n  encode,\n}\n", "/**\n * Add attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {Object} data Attribute data to add.\n */\nexport const addAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.add(className)\n      }\n      continue\n    }\n\n    // Set attribute.\n    element.setAttribute(name, data[name])\n  }\n}\n\n/**\n * Copy all attributes onto one node from another.\n * @param {HTMLElement} existingNode Node to copy to.\n * @param {HTMLElement} newNode Node to copy from.\n */\nexport const copyAttributes = (\n  existingNode,\n  newNode,\n) => {\n  const existingAttributes = existingNode.attributes\n  const newAttributes = newNode.attributes\n  let attributeNamespaceURI = null\n  let attributeValue = null\n  let fromValue = null\n  let attributeName = null\n  let attribute = null\n\n  for (let i = newAttributes.length - 1; i >= 0; --i) {\n    attribute = newAttributes[i]\n    attributeName = attribute.name\n    attributeNamespaceURI = attribute.namespaceURI\n    attributeValue = attribute.value\n    if (attributeNamespaceURI) {\n      attributeName = attribute.localName || attributeName\n      fromValue = existingNode.getAttributeNS(attributeNamespaceURI, attributeName)\n      if (fromValue !== attributeValue) {\n        existingNode.setAttributeNS(attributeNamespaceURI, attributeName, attributeValue)\n      }\n    } else {\n      if (!existingNode.hasAttribute(attributeName)) {\n        existingNode.setAttribute(attributeName, attributeValue)\n      } else {\n        fromValue = existingNode.getAttribute(attributeName)\n        if (fromValue !== attributeValue) {\n          // apparently values are always cast to strings, ah well\n          if (attributeValue === 'null' || attributeValue === 'undefined') {\n            existingNode.removeAttribute(attributeName)\n          } else {\n            existingNode.setAttribute(attributeName, attributeValue)\n          }\n        }\n      }\n    }\n  }\n\n  // Remove any extra attributes found on the original DOM element that\n  // weren't found on the target element.\n  for (let j = existingAttributes.length - 1; j >= 0; --j) {\n    attribute = existingAttributes[j]\n    if (attribute.specified !== false) {\n      attributeName = attribute.name\n      attributeNamespaceURI = attribute.namespaceURI\n\n      if (attributeNamespaceURI) {\n        attributeName = attribute.localName || attributeName\n        if (!newNode.hasAttributeNS(attributeNamespaceURI, attributeName)) {\n          existingNode.removeAttributeNS(attributeNamespaceURI, attributeName)\n        }\n      } else {\n        if (!newNode.hasAttributeNS(null, attributeName)) {\n          existingNode.removeAttribute(attributeName)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove attributes on an element based of an object.\n * @param {HTMLElement} element Element to remove the attributes from.\n * @param {Object} data Attribute data to remove.\n */\nexport const removeAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    if (name === 'class') {\n      // Add classes to classlist.\n      for (const className of data.class) {\n        element.classList.remove(className)\n      }\n      continue\n    }\n\n    // Check if optional values match.\n    if (data[name] && element.attributes[name] !== data[name]) {\n      continue\n    }\n\n    // Remove attribute.\n    element.removeAttribute(name)\n  }\n}\n\n/**\n * Set data at key on element as attribute.\n * @param {HTMLElement} element Element to set attribute of.\n * @param {String} key Attribute name.\n * @param {Any} data Attribute data.\n */\nexport const setAttribute = (\n  element,\n  key,\n  data,\n) => {\n  // Check if a special attribute key.\n  if (key === 'value' && element.tagName === 'INPUT') {\n    if (!data) {\n      data = ''\n    }\n\n    // Exit early if nothing will change.\n    if (element.getAttribute(key) === data) {\n      return\n    }\n\n    // Update attribute.\n    element.setAttribute(key, data)\n\n    // Exit special cases early.\n    return\n  }\n\n  // If checked attribute then set the checked property instead.\n  if (key === 'checked') {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = !!data\n      return\n    }\n  }\n\n  if (key === 'class') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).filter(([key, value]) => value).map(([key]) => key).join(' ')\n    }\n  }\n\n  if (key === 'style') {\n    if (Array.isArray(data)) {\n      // Join values together if it is a list of classes.\n      data = data.join(' ')\n    } else if (typeof (data) === 'object') {\n      // List keys of object as a string if the value is truthy.\n      data = Object.entries(data).map(([key, value]) => key + ':' + value).join(';')\n    }\n  }\n\n  // Update attribute on element.\n  if (data === false || data === null || data === undefined) {\n    element.removeAttribute(key)\n  } else {\n    element.setAttribute(key, data)\n  }\n}\n\n/**\n * Set attributes on an element based of an object.\n * @param {HTMLElement} element Element to add the attributes to.\n * @param {Object} data Attribute data to set.\n */\nexport const setAttributes = (\n  element,\n  data,\n) => {\n  for (const name in data) {\n    setAttribute(element, name, data[name])\n  }\n}\n\nexport default {\n  addAttributes,\n  copyAttributes,\n  removeAttributes,\n  setAttribute,\n}\n", "// Based on nanomorph, v5.4.3, https://github.com/choojs/nanomorph#readme) and morphdom, https://github.com/patrick-steele-idem/morphdom/tree/master#morphdom.\n\n// Import utilities.\nimport { copyAttributes } from './Attribute.js'\nimport {\n  fromString as elementFromString,\n  isSame as elementIsSame,\n} from './Element.js'\n\n/**\n * Diff elements and apply the resulting patch to the existing node.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n*/\nexport const morphNode = (\n  existingNode,\n  newNode,\n) => {\n  const nodeType = newNode.nodeType\n  const nodeName = newNode.nodeName\n\n  // Element node.\n  if (nodeType === 1) {\n    copyAttributes(existingNode, newNode)\n  }\n\n  // Text node or comment node.\n  if (nodeType === 3 || nodeType === 8) {\n    if (existingNode.nodeValue !== newNode.nodeValue) {\n      existingNode.nodeValue = newNode.nodeValue\n    }\n  }\n\n  // Some DOM nodes are weird.\n  // https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n  if (nodeName === 'INPUT') {\n    _updateInput(existingNode, newNode)\n  } else if (nodeName === 'OPTION') {\n    _updateAttribute(existingNode, newNode, 'selected')\n  } else if (nodeName === 'TEXTAREA') {\n    _updateTextarea(existingNode, newNode)\n  }\n}\n\n/**\n * Morph the existing element tree into the given tree.\n * @param {HTMLElement} existingTree The existing tree to convert.\n * @param {HTMLElement | string} newTree The tree to change to.\n * @param {Object} options Options to modify the morphing behaviour.\n * @returns {HTMLElement} New tree root element.\n */\nexport const morphTree = (\n  existingTree,\n  newTree,\n  options,\n) => {\n  if (typeof (existingTree) !== 'object') {\n    throw new Error('Existing tree should be an object.')\n  }\n\n  if (typeof (newTree) === 'string') {\n    newTree = elementFromString(newTree)\n  } else if (typeof (newTree) !== 'object') {\n    throw new Error('New tree should be an object.')\n  }\n\n  // Check if outer or inner html should be updated. Always update children only if root node is a document fragment.\n  if ((options && options.childrenOnly) || newTree.nodeType === 11) {\n    _updateChildren(existingTree, newTree)\n    return existingTree\n  }\n\n  return _updateTree(existingTree, newTree)\n}\n\n/**\n * Update attributes on input element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nconst _updateInput = (\n  existingNode,\n  newNode,\n) => {\n  // The \"value\" attribute is special for the <input> element since it sets the initial value. Changing the \"value\" attribute without changing the \"value\" property will have no effect since it is only used to the set the initial value. Similar for the \"checked\" attribute, and \"disabled\".\n\n  const newValue = newNode.value\n  const existingValue = existingNode.value\n\n  _updateAttribute(existingNode, newNode, 'checked')\n  _updateAttribute(existingNode, newNode, 'disabled')\n\n  // The \"indeterminate\" property can not be set using an HTML attribute.\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\n  if (existingNode.indeterminate !== newNode.indeterminate) {\n    existingNode.indeterminate = newNode.indeterminate\n  }\n\n  // Persist file value since file inputs can not be changed programmatically\n  if (existingNode.type === 'file') {\n    return\n  }\n\n  if (existingValue !== newValue) {\n    existingNode.setAttribute('value', newValue)\n    existingNode.value = newValue\n  }\n\n  if (newValue === 'null') {\n    existingNode.value = ''\n    existingNode.removeAttribute('value')\n  }\n\n  if (!newNode.hasAttributeNS(null, 'value')) {\n    existingNode.removeAttribute('value')\n  } else if (existingNode.type === 'range') {\n    // this is so elements like slider move their UI thingy\n    existingNode.value = newValue\n  }\n}\n\n/**\n * Update attributes on textarea element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nconst _updateTextarea = (\n  existingNode,\n  newNode,\n) => {\n  const newValue = newNode.value\n  if (existingNode.value !== newValue) {\n    existingNode.value = newValue\n  }\n\n  if (existingNode.firstChild && existingNode.firstChild.nodeValue !== newValue) {\n    existingNode.firstChild.nodeValue = newValue\n  }\n}\n\n/**\n * Update attributes on element.\n * @param {HTMLElement} existingNode Existing node to update.\n * @param {HTMLElement} newNode Element to update existing node with.\n */\nconst _updateAttribute = (\n  existingNode,\n  newNode,\n  name,\n) => {\n  if (existingNode[name] !== newNode[name]) {\n    existingNode[name] = newNode[name]\n    if (newNode[name]) {\n      existingNode.setAttribute(name, '')\n    } else {\n      existingNode.removeAttribute(name)\n    }\n  }\n}\n\n/**\n * Morph the existing element tree into the given tree.\n * @param {HTMLElement} existingTree The existing tree to convert.\n * @param {HTMLElement} newTree The tree to change to.\n * @returns {HTMLElement} New tree root element.\n */\nconst _updateTree = (\n  existingTree,\n  newTree,\n) => {\n  if (!existingTree) {\n    return newTree\n  }\n\n  if (!newTree) {\n    return null\n  }\n\n  if (existingTree.isSameNode && existingTree.isSameNode(newTree)) {\n    return existingTree\n  }\n\n  if (existingTree.tagName !== newTree.tagName) {\n    return newTree\n  }\n\n  morphNode(existingTree, newTree)\n  _updateChildren(existingTree, newTree)\n\n  return existingTree\n}\n\n/**\n * Change the existing element's children into the given element's children.\n * @param {HTMLElement} existingNode The existing node who's children to update.\n * @param {HTMLElement} newNode The existing node who's children to change to.\n */\nconst _updateChildren = (\n  existingNode,\n  newNode,\n) => {\n  let existingChild, newChild, morphed, existingMatch\n\n  // The offset is only ever increased, and used for [i - offset] in the loop.\n  let offset = 0\n\n  for (let i = 0; ; i++) {\n    existingChild = existingNode.childNodes[i]\n    newChild = newNode.childNodes[i - offset]\n\n    // Both nodes are empty, do nothing.\n    if (!existingChild && !newChild) {\n      break\n\n      // There is no new child, remove old.\n    } else if (!newChild) {\n      existingNode.removeChild(existingChild)\n      i--\n\n      // There is no old child, add new.\n    } else if (!existingChild) {\n      existingNode.appendChild(newChild)\n      offset++\n\n      // Both nodes are the same, morph.\n    } else if (elementIsSame(existingChild, newChild)) {\n      morphed = _updateTree(existingChild, newChild)\n      if (morphed !== existingChild) {\n        existingNode.replaceChild(morphed, existingChild)\n        offset++\n      }\n\n      // Both nodes do not share an ID or a placeholder, try reorder.\n    } else {\n      existingMatch = null\n\n      // Try and find a similar node somewhere in the tree.\n      for (let j = i; j < existingNode.childNodes.length; j++) {\n        if (elementIsSame(existingNode.childNodes[j], newChild)) {\n          existingMatch = existingNode.childNodes[j]\n          break\n        }\n      }\n\n      // If there was a node with the same ID or placeholder in the old list.\n      if (existingMatch) {\n        morphed = _updateTree(existingMatch, newChild)\n        if (morphed !== existingMatch) {\n          offset++\n        }\n        existingNode.insertBefore(morphed, existingChild)\n\n        // It is safe to morph two nodes in-place if neither has an ID.\n      } else if (!newChild.id && !existingChild.id) {\n        morphed = _updateTree(existingChild, newChild)\n        if (morphed !== existingChild) {\n          existingNode.replaceChild(morphed, existingChild)\n          offset++\n        }\n\n        // Insert the node at the index if we could not morph or find a matching node.\n      } else {\n        existingNode.insertBefore(newChild, existingChild)\n        offset++\n      }\n    }\n  }\n}\n\nexport default {\n  morphNode,\n  morphTree,\n}\n", "// Import constants.\nimport {\n  PRELOAD_INTERACT,\n  PRELOAD_INTERSECT,\n} from '../../constants.js'\n// Import symbols.\nimport { NAVIGATE } from '../../symbols.js'\n\n// Import utilities.\nimport { insertAfter } from '@doars/common/src/utilities/Element.js'\nimport { decode } from '@doars/common/src/utilities/Html.js'\nimport { morphTree } from '@doars/common/src/utilities/Morph.js'\n\n// Cannot be renamed...\nconst NAME_LOADER = '-loader'\nconst NAME_TARGET = '-target'\nconst HEADER_DATE = 'Date'\nconst HEADER_CACHE_CONTROL = 'Cache-Control'\nconst CACHE_INVALIDATION_CLAUSES = [\n  'no-cache',\n  'must-revalidate',\n  'no-store',\n]\n\nconst loaderAdd = (\n  attribute,\n  component,\n  libraryOptions,\n  processExpression,\n  transitionIn,\n) => {\n  const element = attribute.getElement()\n  const directive = attribute.getDirective()\n\n  const attributeName = libraryOptions.prefix + '-' + directive + NAME_LOADER\n  if (!element.hasAttribute(attributeName)) {\n    return\n  }\n  let loaderTemplate = processExpression(\n    component,\n    attribute,\n    element.getAttribute(attributeName),\n  )\n  if (!loaderTemplate) {\n    return\n  }\n\n  if (typeof (loaderTemplate) === 'string') {\n    loaderTemplate = element.querySelector(loaderTemplate)\n  }\n\n  // Check if placed on a template tag.\n  if (loaderTemplate.tagName !== 'TEMPLATE') {\n    console.warn('Doars: `' + attributeName + '` directive must be placed on a `<template>` tag.')\n    return\n  }\n  if (loaderTemplate.childCount > 1) {\n    console.warn('Doars: `' + attributeName + '` directive must have a single child node.')\n    return\n  }\n\n  // Cancel current transition.\n  if (attribute[NAVIGATE].loaderTransitionOut) {\n    attribute[NAVIGATE].loaderTransitionOut()\n    attribute[NAVIGATE].loaderTransitionOut = null\n  } else if (attribute[NAVIGATE].loaderElement) {\n    return\n  }\n\n  // Create new element from template.\n  let loaderElement = document.importNode(loaderTemplate.content, true)\n  // Add element after the template element.\n  insertAfter(loaderTemplate, loaderElement)\n  // Get HTMLElement reference instead of DocumentFragment.\n  attribute[NAVIGATE].loaderElement = loaderElement = loaderTemplate.nextElementSibling\n\n  // Transition element in.\n  attribute[NAVIGATE].loaderTransitionIn = transitionIn(component, loaderElement)\n}\n\nconst loaderRemove = (\n  attribute,\n  component,\n  transitionOut,\n) => {\n  // Check if not already transitioning out and if a loader element exists.\n  if (\n    attribute[NAVIGATE].loaderTransitionOut ||\n    !attribute[NAVIGATE].loaderElement\n  ) {\n    return\n  }\n  // Transition element in.\n  const loaderElement = attribute[NAVIGATE].loaderElement\n  attribute[NAVIGATE].loaderTransitionIn =\n    transitionOut(component, loaderElement, () => {\n      if (loaderElement) {\n        loaderElement.remove()\n      }\n    })\n}\n\nconst validCacheFromHeaders = (\n  headers,\n  maxAge = null,\n) => {\n  if (\n    !headers.has(HEADER_DATE) ||\n    !headers.has(HEADER_CACHE_CONTROL)\n  ) {\n    return false\n  }\n  const cacheDate = new Date(headers.get(HEADER_DATE))\n  const currentDate = new Date()\n\n  // Exit early if the cached date is in the future.\n  if (cacheDate > currentDate) {\n    return false\n  }\n\n  if (maxAge) {\n    // Calculate expiration date.\n    const expireDate = new Date(cacheDate.getTime() + maxAge)\n    if (currentDate > expireDate) {\n      return false\n    }\n  }\n\n  // Get max age of the cached item.\n  const cacheControl = (headers.get(HEADER_CACHE_CONTROL)).split(',')\n  let cacheMaxAge = 0\n  for (const cacheControlItem of cacheControl) {\n    if (cacheControlItem.trim().startsWith('max-age=')) {\n      cacheMaxAge = parseInt(cacheControlItem.split('=')[1].trim(), 10)\n    }\n    if (cacheControlItem.trim().startsWith('s-maxage=')) {\n      cacheMaxAge = parseInt(cacheControlItem.split('=')[1].trim(), 10)\n      break // Break since max-age should not overwrite this.\n    }\n  }\n  // Exit early on invalid max ages.\n  if (cacheMaxAge <= 0) {\n    return false\n  }\n\n  // Calculate expiration date.\n  const expireDate = new Date(cacheDate.getTime() + (cacheMaxAge * 1e3))\n  return expireDate >= currentDate\n}\n\nlet clearCacheCounter = 0\nlet clearCacheInterval = null\n\nexport default (\n  options,\n) => {\n  let cache = {}\n  const setupCacheClearing = (\n  ) => {\n    // Exit early if a cache clearer is already set.\n    if (clearCacheCounter > 0) {\n      clearCacheCounter++\n      return\n    }\n\n    // Every x amount of seconds remove stale items from the cache, therefore reducing the memory footprint of the plugin.\n    clearCacheInterval = setInterval(\n      () => {\n        for (const location in cache) {\n          if (\n            !Object.hasOwnProperty.call(cache, location) ||\n            !cache.headers\n          ) {\n            continue\n          }\n          if (!validCacheFromHeaders(cache.headers, options.cacheMaxAge)) {\n            delete cache[location]\n          }\n        }\n      },\n      options.cacheInterval,\n    )\n  }\n  const getFromUrl = (\n    url,\n    dispatchEvent,\n  ) => {\n    return new Promise((resolve) => {\n      // Check if same website.\n      if (window.location.hostname !== url.hostname) {\n        resolve(null)\n      }\n\n      // Try and get item from cache.\n      if (Object.hasOwnProperty.call(cache, url.location)) {\n        if (\n          cache[url.location].headers &&\n          validCacheFromHeaders(cache[url.location].headers)\n        ) {\n          resolve(cache[url.location])\n          return\n        }\n\n        if (cache[url.location].listeners) {\n          cache[url.location].listeners.push(\n            () => {\n              resolve(cache[url.location])\n            },\n          )\n        } else {\n          cache[url.location] = {\n            listeners: [],\n          }\n        }\n      } else {\n        cache[url.location] = {\n          listeners: [],\n        }\n      }\n\n      // Dispatch navigation started event.\n      dispatchEvent('-started', {\n        url,\n      })\n\n      fetch(url, options.defaultInit).then((response) => {\n        if (\n          response.status < 200 ||\n          response.status >= 300\n        ) {\n          // Dispatch navigation failed event.\n          dispatchEvent('-failed', {\n            response,\n            url,\n          })\n\n          resolve(null)\n          return\n        }\n\n        // Validate content type. Allow all but notify on invalid.\n        const contentType = response.headers.get('Content-Type')\n        if (!contentType.toLowerCase().startsWith('text/html')) {\n          console.warn('Returned response not of header type text/html, content type is \"' + contentType + '\".')\n        }\n\n        // Check if the request can be cached.\n        let allowCache = true\n        if (response.headers.has(HEADER_CACHE_CONTROL)) {\n          const cacheControl = response.headers.get(HEADER_CACHE_CONTROL).split(',')\n          let maxAge = 0\n          for (const cacheControlItem of cacheControl) {\n            const cacheClause = cacheControlItem.trim()\n\n            if (CACHE_INVALIDATION_CLAUSES.indexOf(cacheClause) >= 0) {\n              allowCache = false\n              break\n            }\n\n            if (cacheClause.startsWith('s-maxage=')) {\n              maxAge = parseInt(cacheClause.split('=')[1].trim(), 10)\n              if (maxAge <= 0) {\n                allowCache = false\n                break\n              }\n            }\n\n            if (\n              cacheClause.startsWith('max-age=') &&\n              maxAge <= 0 // Prevent override of s-maxage.\n            ) {\n              maxAge = parseInt(cacheClause.split('=')[1].trim(), 10)\n              if (maxAge <= 0) {\n                allowCache = false\n                break\n              }\n            }\n          }\n        }\n\n        response.text().then((html) => {\n          // Add response to cache.\n          const result = {\n            headers: response.headers,\n            html,\n          }\n\n          // Get listeners before updating the cache,\n          const listeners = cache[url.location].listeners\n\n          // Update cache.\n          if (allowCache) {\n            cache[url.location] = result\n            setupCacheClearing()\n          } else {\n            delete cache[url.location]\n          }\n\n          // Resolve promise.\n          resolve(result)\n\n          // Inform listeners of update.\n          if (listeners) {\n            for (const listener of listeners) {\n              listener()\n            }\n          }\n        })\n      })\n    })\n  }\n\n  return {\n    name: 'navigate',\n\n    update: (\n      component,\n      attribute, {\n        processExpression,\n        transitionIn,\n        transitionOut,\n      },\n    ) => {\n      const element = attribute.getElement()\n      if (element[NAVIGATE]) {\n        return\n      }\n\n      // Destruct component.\n      const library = component.getLibrary()\n      const libraryOptions = library.getOptions()\n\n      // Deconstruct attribute.\n      const directive = attribute.getDirective()\n      const modifiers = attribute.getModifiers()\n\n      // Process modifiers.\n\n      // Set listener options.\n      const listenerOptions = {}\n      if (modifiers.capture) {\n        listenerOptions.capture = true\n      }\n\n      const dispatchEvent = (\n        suffix = '',\n        data = {},\n      ) => {\n        element.dispatchEvent(\n          new CustomEvent(\n            libraryOptions.prefix + '-' + directive + suffix,\n            {\n              detail: Object.assign({\n                attribute,\n                component,\n              }, data),\n            },\n          ),\n        )\n      }\n\n      const loadFromUrl = (\n        url,\n      ) => {\n        attribute[NAVIGATE].url = url\n        const identifier = (new Date()).toISOString()\n        attribute[NAVIGATE].identifier = identifier\n\n        loaderAdd(\n          attribute,\n          component,\n          libraryOptions,\n          processExpression,\n          transitionIn,\n        )\n\n        getFromUrl(url, dispatchEvent).then((result) => {\n          // Validate that this is still the active request.\n          if (\n            !attribute[NAVIGATE].identifier ||\n            attribute[NAVIGATE].identifier !== identifier\n          ) {\n            return\n          }\n\n          // Check if request was successful.\n          if (!result) {\n            loaderRemove(\n              attribute,\n              component,\n              transitionOut,\n            )\n\n            delete attribute[NAVIGATE].url\n            delete attribute[NAVIGATE].identifier\n            return\n          }\n\n          // Decode string.\n          let html = result.html\n          if (modifiers.decode) {\n            html = decode(result.html)\n          }\n\n          let target = null\n          if (modifiers.document) {\n            target = document.documentElement\n          } else {\n            const attributeName = libraryOptions.prefix + '-' + directive + NAME_TARGET\n            if (element.hasAttribute(attributeName)) {\n              target = processExpression(\n                component,\n                attribute,\n                element.getAttribute(attributeName),\n              )\n              if (typeof (target) === 'string') {\n                target = element.querySelector(target)\n              }\n            }\n            if (!target) {\n              target = element\n            }\n          }\n\n          // Update target.\n          if (modifiers.morph) {\n            if (modifiers.outer) {\n              morphTree(target, html)\n            } else {\n              // Ensure element only has one child.\n              if (target.children.length === 0) {\n                target.appendChild(document.createElement('div'))\n              } else if (target.children.length > 1) {\n                for (let i = target.children.length - 1; i >= 1; i--) {\n                  target.children[i].remove()\n                }\n              }\n\n              // Morph first child to given target tree.\n              const root = morphTree(target.children[0], html)\n              if (!target.children[0].isSameNode(root)) {\n                target.children[0].remove()\n                target.appendChild(root)\n              }\n            }\n          } else if (modifiers.outer) {\n            target.outerHTML = html\n          } else {\n            target.innerHTML = html\n          }\n\n          // Get new document title.\n          let documentTitle = ''\n          if (options.headerTitle && result.headers.has(options.headerTitle)) {\n            documentTitle = result.headers.get(options.headerTitle)\n          }\n\n          // Update history api.\n          if (modifiers.document && modifiers.history) {\n            history.pushState({}, documentTitle, url)\n          }\n\n          // If document title was not updated via the history update, then set it now.\n          if (documentTitle && document.title !== documentTitle) {\n            document.title = documentTitle\n          }\n\n          loaderRemove(\n            attribute,\n            component,\n            transitionOut,\n          )\n\n          delete attribute[NAVIGATE].url\n          delete attribute[NAVIGATE].identifier\n\n          // Dispatch navigation loaded event.\n          dispatchEvent('-loaded', {\n            url,\n          })\n        })\n      }\n\n      const loadHandler = (\n        event,\n      ) => {\n        const anchor = event.target.closest('a')\n        if (!anchor || !anchor.hasAttribute('href')) {\n          return\n        }\n        const href = anchor.getAttribute('href')\n        const url = new URL(href, window.location)\n\n        // Check if same website.\n        if (window.location.hostname !== url.hostname) {\n          return\n        }\n\n        // Exit early if the link is being loaded.\n        if (\n          attribute[NAVIGATE].url &&\n          attribute[NAVIGATE].url.href === url.href\n        ) {\n          return\n        }\n\n        // Prevent default.\n        event.preventDefault()\n        if (modifiers.stop) {\n          event.stopPropagation()\n        }\n\n        loadFromUrl(url)\n      }\n      element.addEventListener(\n        'click',\n        loadHandler,\n        listenerOptions,\n      )\n\n      // Listen to history api if it can target the whole page.\n      let historyHandler\n      if (modifiers.document && modifiers.history) {\n        historyHandler = (\n          event,\n        ) => {\n          const url = new URL(event.target.location)\n\n          // Exit early if the link is being loaded already.\n          if (\n            attribute[NAVIGATE].url &&\n            attribute[NAVIGATE].url.href === url.href\n          ) {\n            return\n          }\n\n          loadFromUrl(url)\n        }\n        window.addEventListener(\n          'popstate',\n          historyHandler,\n          { passive: true },\n        )\n      }\n\n      let destroyPreloader\n      if (modifiers.preload === PRELOAD_INTERACT) {\n        const preloadHandler = (event) => {\n          const anchor = event.target.closest('a')\n          if (!anchor || !anchor.hasAttribute('href')) {\n            return\n          }\n          const href = anchor.getAttribute('href')\n          getFromUrl(new URL(href, window.location), dispatchEvent)\n        }\n        element.addEventListener(\n          'focusin',\n          preloadHandler,\n          Object.assign({ passive: true }, listenerOptions),\n        )\n        element.addEventListener(\n          'pointerenter',\n          preloadHandler,\n          Object.assign({ passive: true }, listenerOptions),\n        )\n\n        destroyPreloader = (\n        ) => {\n          element.removeEventListener(\n            'focusin',\n            attribute[NAVIGATE].preloadHandler,\n          )\n          element.removeEventListener(\n            'pointerenter',\n            attribute[NAVIGATE].preloadHandler,\n          )\n        }\n      } else if (modifiers.preload === PRELOAD_INTERSECT) {\n        const intersectionObserver = new IntersectionObserver(\n          (anchors) => {\n            for (const anchor of anchors) {\n              if (anchor.isIntersecting) {\n                getFromUrl(\n                  new URL(\n                    anchor.target.getAttribute('href'),\n                    window.location,\n                  ),\n                  dispatchEvent,\n                )\n              }\n            }\n          },\n          {\n            root: null,\n            rootMargin: options.intersectionMargin,\n            threshold: options.intersectionThreshold,\n          },\n        )\n        const mutationObserver = new MutationObserver(\n          (mutations) => {\n            for (const mutation of mutations) {\n              if (mutation.type === 'attributes') {\n                if (\n                  mutation.attributeName === 'href' &&\n                  mutation.target instanceof HTMLElement &&\n                  mutation.target.tagName === 'A'\n                ) {\n                  // Start or stop observing the element if the href was added or removed.\n                  if (mutation.target.hasAttribute('href')) {\n                    intersectionObserver.observe(mutation.target)\n                  } else {\n                    intersectionObserver.unobserve(mutation.target)\n                  }\n                }\n              } else if (mutation.type === 'childList') {\n                for (const node of mutation.addedNodes) {\n                  if (\n                    node instanceof HTMLElement &&\n                    node.tagName === 'A' &&\n                    node.hasAttribute('href')\n                  ) {\n                    // Start observing the node.\n                    intersectionObserver.observe(node)\n                  }\n                }\n\n                // Stop observing removed nodes.\n                for (const node of mutation.removedNodes) {\n                  if (\n                    node instanceof HTMLElement &&\n                    node.tagName === 'A' &&\n                    node.hasAttribute('href')\n                  ) {\n                    intersectionObserver.unobserve(node)\n                  }\n                }\n              }\n            }\n          },\n        )\n\n        destroyPreloader = (\n        ) => {\n          mutationObserver.disconnect()\n          intersectionObserver.disconnect()\n        }\n\n        // Start observing existing anchor tags.\n        const anchors = element.querySelectorAll('a[href]')\n        for (const anchor of anchors) {\n          intersectionObserver.observe(anchor)\n        }\n\n        mutationObserver.observe(\n          element,\n          {\n            attributes: true,\n            childList: true,\n            subtree: true,\n          },\n        )\n      }\n\n      attribute[NAVIGATE] = {\n        cache,\n        element,\n        historyHandler,\n        loadHandler,\n        destroyPreloader,\n      }\n    },\n\n    destroy: (\n      component,\n      attribute, {\n        transitionOut,\n      },\n    ) => {\n      // Exit early if no listeners can be found.\n      if (!attribute[NAVIGATE]) {\n        return\n      }\n\n      // Stop clear cache interval.\n      if (clearCacheCounter > 0) {\n        clearCacheCounter--\n        if (clearCacheCounter === 0 && clearCacheInterval) {\n          clearInterval(clearCacheInterval)\n          cache = {}\n        }\n      }\n\n      // Remove existing listener.\n      attribute[NAVIGATE].element.removeEventListener(\n        'click',\n        attribute[NAVIGATE].loadHandler,\n      )\n      if (attribute[NAVIGATE].historyHandler) {\n        window.removeEventListener(\n          'popstate',\n          attribute[NAVIGATE].historyHandler,\n        )\n      }\n      if (attribute[NAVIGATE].destroyPreloader) {\n        attribute[NAVIGATE].destroyPreloader()\n      }\n\n      loaderRemove(\n        attribute,\n        component,\n        transitionOut,\n      )\n\n      // Delete directive data.\n      delete attribute[NAVIGATE]\n    },\n  }\n}\n", "// Import directives.\nimport createNavigateDirective from './factories/directives/navigate.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\nconst DoarsNavigate = function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    cacheInterval: 60 * 1e3,\n    cacheMaxAge: 30 * 60 * 1e3,\n    fetchOptions: {},\n    headerTitle: null,\n    intersectionMargin: '0px',\n    intersectionThreshold: 0,\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n  // Store contexts and directives.\n  let navigateDirective\n\n  const onEnable = (\n  ) => {\n    // Create and add contexts and directives.\n    navigateDirective = createNavigateDirective(options)\n    library.addDirectives(-1, navigateDirective)\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove contexts and directives.\n    library.removeDirective(navigateDirective)\n    navigateDirective = null\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n\nexport default DoarsNavigate\n"],
  "mappings": "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",
  "names": ["expireDate", "anchors"]
}
