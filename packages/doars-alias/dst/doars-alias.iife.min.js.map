{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/DoarsAlias.js", "../src/DoarsAlias.iife.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js';\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\n\nexport default function (library, options = null) {\n  // Clone options.\n  options = deepAssign({}, options); // Set private variables.\n\n  let isEnabled = false; // Store changes made to contexts and directives.\n\n  let contextAliases, contextsRenamed, directiveAliases, directivesRenamed;\n\n  const onEnable = function () {\n    if (options.aliasContexts || options.renameContexts) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1; // Iterate over all contexts.\n\n      const contexts = library.getContexts();\n\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts[i];\n\n        if (options.renameContexts) {\n          const rename = options.renameContexts[context.name];\n\n          if (rename) {\n            if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for context.');\n            } else {\n              if (!contextsRenamed) {\n                contextsRenamed = {};\n              } // Store previous name.\n\n\n              contextsRenamed[rename] = context.name; // Set new name.\n\n              context.name = rename;\n            }\n          }\n        }\n\n        if (options.aliasContexts) {\n          const aliases = options.aliasContexts[context.name];\n\n          if (aliases) {\n            if (!contextAliases) {\n              contextAliases = [];\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0;\n\n              for (const alias of aliases) {\n                if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for context.');\n                  continue;\n                } // Create context alias.\n\n\n                const contextAlias = Object.assign({}, context);\n                contextAlias.name = alias; // Disable deconstruction of aliases.\n\n                contextAlias.deconstruct = false; // Add context alias to lists.\n\n                contextAliases.push(contextAlias);\n                inertCount++;\n              } // Add new aliases to library.\n\n\n              library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n              insertOffset += inertCount;\n            } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for context.');\n            } else {\n              // Create context alias.\n              const contextAlias = Object.assign({}, context);\n              contextAlias.name = aliases; // Disable deconstruction of aliases.\n\n              contextAlias.deconstruct = false; // Add alias to library.\n\n              library.addContexts(i + insertOffset, contextAlias); // Increment insertion offset.\n\n              insertOffset++;\n            }\n          }\n        }\n      }\n    }\n\n    if (options.aliasDirectives || options.renameDirectives) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1; // Iterate over all directives.\n\n      const directives = library.getDirectives();\n\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives[i];\n\n        if (options.renameDirectives) {\n          const rename = options.renameDirectives[directive.name];\n\n          if (rename) {\n            if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for directive.');\n            } else {\n              if (!directivesRenamed) {\n                directivesRenamed = {};\n              } // Store previous name.\n\n\n              directivesRenamed[rename] = directive.name; // Set new name.\n\n              directive.name = rename;\n            }\n          }\n        }\n\n        if (options.aliasDirectives) {\n          const aliases = options.aliasDirectives[directive.name];\n\n          if (aliases) {\n            if (!directiveAliases) {\n              directiveAliases = [];\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0;\n\n              for (const alias of aliases) {\n                if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for directive.');\n                  continue;\n                } // Create directive alias.\n\n\n                const directiveAlias = Object.assign({}, directive);\n                directiveAlias.name = alias; // Add directive alias to lists.\n\n                directiveAliases.push(directiveAlias);\n                inertCount++;\n              } // Add new aliases to library.\n\n\n              library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n              insertOffset += inertCount;\n            } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for directive.');\n            } else {\n              // Create directive alias.\n              const directiveAlias = Object.assign({}, directive);\n              directiveAlias.name = aliases; // Add alias to library.\n\n              library.addDirectives(i + insertOffset, directiveAlias); // Increment insertion offset.\n\n              insertOffset++;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  const onDisable = function () {\n    // Remove directive aliases first.\n    if (directiveAliases) {\n      library.removeDirectives(...directiveAliases); // Forget aliases.\n\n      directiveAliases = null;\n    } // Undo name changes to directives.\n\n\n    if (directivesRenamed) {\n      // Iterate over all directives.\n      const directives = library.getDirectives();\n\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives.length[i]; // Check if directive has been renamed.\n\n        if (directive.name in directivesRenamed) {\n          // Set old name.\n          directive.name = directivesRenamed[directive.name];\n        }\n      } // Forget renames.\n\n\n      directivesRenamed = null;\n    } // Remove context aliases first.\n\n\n    if (contextAliases) {\n      library.removeContexts(...contextAliases); // Forget aliases.\n\n      contextAliases = null;\n    } // Undo name changes to contexts.\n\n\n    if (contextsRenamed) {\n      // Iterate over all contexts.\n      const contexts = library.getContexts();\n\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts.length[i]; // Check if context has been renamed.\n\n        if (context.name in contextsRenamed) {\n          // Set old name.\n          context.name = contextsRenamed[context.name];\n        }\n      } // Forget renames.\n\n\n      contextsRenamed = null;\n    }\n  };\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false; // Stop listening to enable state of the library.\n\n      library.removeEventListener('enabling', onEnable);\n      library.removeEventListener('disabling', onDisable);\n    }\n  };\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true; // Listen to enable state of the library.\n\n      library.addEventListener('enabling', onEnable);\n      library.addEventListener('disabling', onDisable);\n    }\n  }; // Automatically enable plugin.\n\n\n  this.enable();\n}", "import DoarsAlias from './DoarsAlias.js';\nwindow.DoarsAlias = DoarsAlias;"],
  "mappings": "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",
  "names": ["deepAssign", "target", "sources", "source", "isObject", "key", "value", "isObject", "value", "DoarsAlias_default", "library", "options", "deepAssign", "isEnabled", "contextAliases", "contextsRenamed", "directiveAliases", "directivesRenamed", "onEnable", "insertOffset", "contexts", "i", "context", "rename", "aliases", "inertCount", "alias", "contextAlias", "directives", "directive", "directiveAlias", "onDisable", "DoarsAlias_default"]
}
