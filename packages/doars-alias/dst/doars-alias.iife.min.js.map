{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/DoarsAlias.js", "../src/DoarsAlias.iife.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (\n  target,\n  ...sources\n) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\nexport const getDeeply = (\n  object,\n  path,\n) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\nexport const isObject = (\n  value,\n) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\nexport const setDeeply = (\n  object,\n  path,\n  value,\n) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = deepAssign({}, options)\n\n  // Set private variables.\n  let isEnabled = false\n  // Store changes made to contexts and directives.\n  let contextAliases, contextsRenamed, directiveAliases, directivesRenamed\n\n  const onEnable = (\n  ) => {\n    if (options.aliasContexts || options.renameContexts) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1\n\n      // Iterate over all contexts.\n      const contexts = library.getContexts()\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts[i]\n\n        if (options.renameContexts) {\n          const rename = options.renameContexts[context.name]\n          if (rename) {\n            if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for context.')\n            } else {\n              if (!contextsRenamed) {\n                contextsRenamed = {}\n              }\n\n              // Store previous name.\n              contextsRenamed[rename] = context.name\n              // Set new name.\n              context.name = rename\n            }\n          }\n        }\n\n        if (options.aliasContexts) {\n          const aliases = options.aliasContexts[context.name]\n          if (aliases) {\n            if (!contextAliases) {\n              contextAliases = []\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0\n              for (const alias of aliases) {\n                if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for context.')\n                  continue\n                }\n\n                // Create context alias.\n                const contextAlias = Object.assign({}, context)\n                contextAlias.name = alias\n                // Disable deconstruction of aliases.\n                contextAlias.deconstruct = false\n\n                // Add context alias to lists.\n                contextAliases.push(contextAlias)\n                inertCount++\n              }\n              // Add new aliases to library.\n              library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1))\n\n              // Increment insertion offset by amount of aliases added.\n              insertOffset += inertCount\n            } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for context.')\n            } else {\n              // Create context alias.\n              const contextAlias = Object.assign({}, context)\n              contextAlias.name = aliases\n              // Disable deconstruction of aliases.\n              contextAlias.deconstruct = false\n\n              // Add alias to library.\n              library.addContexts(i + insertOffset, contextAlias)\n\n              // Increment insertion offset.\n              insertOffset++\n            }\n          }\n        }\n      }\n    }\n\n    if (options.aliasDirectives || options.renameDirectives) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1\n\n      // Iterate over all directives.\n      const directives = library.getDirectives()\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives[i]\n\n        if (options.renameDirectives) {\n          const rename = options.renameDirectives[directive.name]\n          if (rename) {\n            if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for directive.')\n            } else {\n              if (!directivesRenamed) {\n                directivesRenamed = {}\n              }\n\n              // Store previous name.\n              directivesRenamed[rename] = directive.name\n              // Set new name.\n              directive.name = rename\n            }\n          }\n        }\n\n        if (options.aliasDirectives) {\n          const aliases = options.aliasDirectives[directive.name]\n          if (aliases) {\n            if (!directiveAliases) {\n              directiveAliases = []\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0\n              for (const alias of aliases) {\n                if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for directive.')\n                  continue\n                }\n\n                // Create directive alias.\n                const directiveAlias = Object.assign({}, directive)\n                directiveAlias.name = alias\n\n                // Add directive alias to lists.\n                directiveAliases.push(directiveAlias)\n                inertCount++\n              }\n              // Add new aliases to library.\n              library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1))\n\n              // Increment insertion offset by amount of aliases added.\n              insertOffset += inertCount\n            } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for directive.')\n            } else {\n              // Create directive alias.\n              const directiveAlias = Object.assign({}, directive)\n              directiveAlias.name = aliases\n\n              // Add alias to library.\n              library.addDirectives(i + insertOffset, directiveAlias)\n\n              // Increment insertion offset.\n              insertOffset++\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove directive aliases first.\n    if (directiveAliases) {\n      library.removeDirectives(...directiveAliases)\n\n      // Forget aliases.\n      directiveAliases = null\n    }\n\n    // Undo name changes to directives.\n    if (directivesRenamed) {\n      // Iterate over all directives.\n      const directives = library.getDirectives()\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives.length[i]\n\n        // Check if directive has been renamed.\n        if (directive.name in directivesRenamed) {\n          // Set old name.\n          directive.name = directivesRenamed[directive.name]\n        }\n      }\n\n      // Forget renames.\n      directivesRenamed = null\n    }\n\n    // Remove context aliases first.\n    if (contextAliases) {\n      library.removeContexts(...contextAliases)\n\n      // Forget aliases.\n      contextAliases = null\n    }\n\n    // Undo name changes to contexts.\n    if (contextsRenamed) {\n      // Iterate over all contexts.\n      const contexts = library.getContexts()\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts.length[i]\n\n        // Check if context has been renamed.\n        if (context.name in contextsRenamed) {\n          // Set old name.\n          context.name = contextsRenamed[context.name]\n        }\n      }\n\n      // Forget renames.\n      contextsRenamed = null\n    }\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n", "import DoarsAlias from './DoarsAlias.js'\n\nwindow.DoarsAlias = DoarsAlias\n"],
  "mappings": "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",
  "names": ["deepAssign", "target", "sources", "source", "isObject", "key", "value", "isObject", "value", "DoarsAlias_default", "library", "options", "deepAssign", "isEnabled", "contextAliases", "contextsRenamed", "directiveAliases", "directivesRenamed", "onEnable", "insertOffset", "contexts", "i", "context", "rename", "aliases", "inertCount", "alias", "contextAlias", "directives", "directive", "directiveAlias", "onDisable", "DoarsAlias_default"]
}
