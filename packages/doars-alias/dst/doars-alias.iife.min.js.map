{
  "version": 3,
  "sources": ["../../common/src/utils/Object.js", "../src/DoarsAlias.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import utils.\nimport { deepAssign } from '@doars/common/src/utils/Object.js';\nexport default class DoarsAlias {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    // Clone options.\n    options = deepAssign({}, options); // Store changes made to contexts and directives.\n\n    let contextAliases, contextsRenamed, directiveAliases, directivesRenamed; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      if (options.aliasContexts || options.renameContexts) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all contexts.\n\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts[i];\n\n          if (options.renameContexts) {\n            const rename = options.renameContexts[context.name];\n\n            if (rename) {\n              if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for context.');\n              } else {\n                if (!contextsRenamed) {\n                  contextsRenamed = {};\n                } // Store previous name.\n\n\n                contextsRenamed[rename] = context.name; // Set new name.\n\n                context.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasContexts) {\n            const aliases = options.aliasContexts[context.name];\n\n            if (aliases) {\n              if (!contextAliases) {\n                contextAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for context.');\n                    continue;\n                  } // Create context alias.\n\n\n                  const contextAlias = Object.assign({}, context);\n                  contextAlias.name = alias; // Disable deconstruction of aliases.\n\n                  contextAlias.deconstruct = false; // Add context alias to lists.\n\n                  contextAliases.push(contextAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for context.');\n              } else {\n                // Create context alias.\n                const contextAlias = Object.assign({}, context);\n                contextAlias.name = aliases; // Disable deconstruction of aliases.\n\n                contextAlias.deconstruct = false; // Add alias to library.\n\n                library.addContexts(i + insertOffset, contextAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n\n      if (options.aliasDirectives || options.renameDirectives) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all directives.\n\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives[i];\n\n          if (options.renameDirectives) {\n            const rename = options.renameDirectives[directive.name];\n\n            if (rename) {\n              if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for directive.');\n              } else {\n                if (!directivesRenamed) {\n                  directivesRenamed = {};\n                } // Store previous name.\n\n\n                directivesRenamed[rename] = directive.name; // Set new name.\n\n                directive.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasDirectives) {\n            const aliases = options.aliasDirectives[directive.name];\n\n            if (aliases) {\n              if (!directiveAliases) {\n                directiveAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for directive.');\n                    continue;\n                  } // Create directive alias.\n\n\n                  const directiveAlias = Object.assign({}, directive);\n                  directiveAlias.name = alias; // Add directive alias to lists.\n\n                  directiveAliases.push(directiveAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for directive.');\n              } else {\n                // Create directive alias.\n                const directiveAlias = Object.assign({}, directive);\n                directiveAlias.name = aliases; // Add alias to library.\n\n                library.addDirectives(i + insertOffset, directiveAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove directive aliases first.\n      if (directiveAliases) {\n        library.removeDirectives(...directiveAliases); // Forget aliases.\n\n        directiveAliases = null;\n      } // Undo name changes to directives.\n\n\n      if (directivesRenamed) {\n        // Iterate over all directives.\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives.length[i]; // Check if directive has been renamed.\n\n          if (directive.name in directivesRenamed) {\n            // Set old name.\n            directive.name = directivesRenamed[directive.name];\n          }\n        } // Forget renames.\n\n\n        directivesRenamed = null;\n      } // Remove context aliases first.\n\n\n      if (contextAliases) {\n        library.removeContexts(...contextAliases); // Forget aliases.\n\n        contextAliases = null;\n      } // Undo name changes to contexts.\n\n\n      if (contextsRenamed) {\n        // Iterate over all contexts.\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts.length[i]; // Check if context has been renamed.\n\n          if (context.name in contextsRenamed) {\n            // Set old name.\n            context.name = contextsRenamed[context.name];\n          }\n        } // Forget renames.\n\n\n        contextsRenamed = null;\n      }\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
