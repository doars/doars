{
  "version": 3,
  "sources": ["../../common/src/utils/Object.js", "../src/DoarsAlias.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import utils.\nimport { deepAssign } from '@doars/common/src/utils/Object.js';\nexport default class DoarsAlias {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    // Clone options.\n    options = deepAssign({}, options); // Store changes made to contexts and directives.\n\n    let contextAliases, contextsRenamed, directiveAliases, directivesRenamed; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      if (options.aliasContexts || options.renameContexts) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all contexts.\n\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts[i];\n\n          if (options.renameContexts) {\n            const rename = options.renameContexts[context.name];\n\n            if (rename) {\n              if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for context.');\n              } else {\n                if (!contextsRenamed) {\n                  contextsRenamed = {};\n                } // Store previous name.\n\n\n                contextsRenamed[rename] = context.name; // Set new name.\n\n                context.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasContexts) {\n            const aliases = options.aliasContexts[context.name];\n\n            if (aliases) {\n              if (!contextAliases) {\n                contextAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for context.');\n                    continue;\n                  } // Create context alias.\n\n\n                  const contextAlias = Object.assign({}, context);\n                  contextAlias.name = alias; // Disable deconstruction of aliases.\n\n                  contextAlias.deconstruct = false; // Add context alias to lists.\n\n                  contextAliases.push(contextAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for context.');\n              } else {\n                // Create context alias.\n                const contextAlias = Object.assign({}, context);\n                contextAlias.name = aliases; // Disable deconstruction of aliases.\n\n                contextAlias.deconstruct = false; // Add alias to library.\n\n                library.addContexts(i + insertOffset, contextAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n\n      if (options.aliasDirectives || options.renameDirectives) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all directives.\n\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives[i];\n\n          if (options.renameDirectives) {\n            const rename = options.renameDirectives[directive.name];\n\n            if (rename) {\n              if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for directive.');\n              } else {\n                if (!directivesRenamed) {\n                  directivesRenamed = {};\n                } // Store previous name.\n\n\n                directivesRenamed[rename] = directive.name; // Set new name.\n\n                directive.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasDirectives) {\n            const aliases = options.aliasDirectives[directive.name];\n\n            if (aliases) {\n              if (!directiveAliases) {\n                directiveAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for directive.');\n                    continue;\n                  } // Create directive alias.\n\n\n                  const directiveAlias = Object.assign({}, directive);\n                  directiveAlias.name = alias; // Add directive alias to lists.\n\n                  directiveAliases.push(directiveAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for directive.');\n              } else {\n                // Create directive alias.\n                const directiveAlias = Object.assign({}, directive);\n                directiveAlias.name = aliases; // Add alias to library.\n\n                library.addDirectives(i + insertOffset, directiveAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove directive aliases first.\n      if (directiveAliases) {\n        library.removeDirectives(...directiveAliases); // Forget aliases.\n\n        directiveAliases = null;\n      } // Undo name changes to directives.\n\n\n      if (directivesRenamed) {\n        // Iterate over all directives.\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives.length[i]; // Check if directive has been renamed.\n\n          if (directive.name in directivesRenamed) {\n            // Set old name.\n            directive.name = directivesRenamed[directive.name];\n          }\n        } // Forget renames.\n\n\n        directivesRenamed = null;\n      } // Remove context aliases first.\n\n\n      if (contextAliases) {\n        library.removeContexts(...contextAliases); // Forget aliases.\n\n        contextAliases = null;\n      } // Undo name changes to contexts.\n\n\n      if (contextsRenamed) {\n        // Iterate over all contexts.\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts.length[i]; // Check if context has been renamed.\n\n          if (context.name in contextsRenamed) {\n            // Set old name.\n            context.name = contextsRenamed[context.name];\n          }\n        } // Forget renames.\n\n\n        contextsRenamed = null;\n      }\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
