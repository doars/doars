{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/DoarsAlias.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepAssign(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map(value => {\n          if (isObject(value)) {\n            return deepAssign({}, value);\n          }\n\n          return value;\n        });\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources);\n};\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\n\nexport const getDeeply = (object, path) => {\n  let objectTemp = object;\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]];\n  }\n\n  return objectTemp[path[i]];\n};\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\n\nexport const isObject = value => {\n  return value && typeof value === 'object' && !Array.isArray(value);\n};\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\n\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof object !== 'object') {\n    return;\n  }\n\n  let i = 0;\n\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]; // Exit early if not an object.\n\n    if (typeof object !== 'object') {\n      return;\n    }\n  }\n\n  object[path[i]] = value;\n};\nexport default {\n  deepAssign: deepAssign,\n  getDeeply: getDeeply,\n  isObject: isObject,\n  setDeeply: setDeeply\n};", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js';\nexport default class DoarsAlias {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    // Clone options.\n    options = deepAssign({}, options); // Store changes made to contexts and directives.\n\n    let contextAliases, contextsRenamed, directiveAliases, directivesRenamed; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      if (options.aliasContexts || options.renameContexts) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all contexts.\n\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts[i];\n\n          if (options.renameContexts) {\n            const rename = options.renameContexts[context.name];\n\n            if (rename) {\n              if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for context.');\n              } else {\n                if (!contextsRenamed) {\n                  contextsRenamed = {};\n                } // Store previous name.\n\n\n                contextsRenamed[rename] = context.name; // Set new name.\n\n                context.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasContexts) {\n            const aliases = options.aliasContexts[context.name];\n\n            if (aliases) {\n              if (!contextAliases) {\n                contextAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for context.');\n                    continue;\n                  } // Create context alias.\n\n\n                  const contextAlias = Object.assign({}, context);\n                  contextAlias.name = alias; // Disable deconstruction of aliases.\n\n                  contextAlias.deconstruct = false; // Add context alias to lists.\n\n                  contextAliases.push(contextAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for context.');\n              } else {\n                // Create context alias.\n                const contextAlias = Object.assign({}, context);\n                contextAlias.name = aliases; // Disable deconstruction of aliases.\n\n                contextAlias.deconstruct = false; // Add alias to library.\n\n                library.addContexts(i + insertOffset, contextAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n\n      if (options.aliasDirectives || options.renameDirectives) {\n        // Store insert offset so aliases are added directly after the original.\n        let insertOffset = 1; // Iterate over all directives.\n\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives[i];\n\n          if (options.renameDirectives) {\n            const rename = options.renameDirectives[directive.name];\n\n            if (rename) {\n              if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n                console.error('Invalid rename name for directive.');\n              } else {\n                if (!directivesRenamed) {\n                  directivesRenamed = {};\n                } // Store previous name.\n\n\n                directivesRenamed[rename] = directive.name; // Set new name.\n\n                directive.name = rename;\n              }\n            }\n          }\n\n          if (options.aliasDirectives) {\n            const aliases = options.aliasDirectives[directive.name];\n\n            if (aliases) {\n              if (!directiveAliases) {\n                directiveAliases = [];\n              }\n\n              if (Array.isArray(aliases)) {\n                let inertCount = 0;\n\n                for (const alias of aliases) {\n                  if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                    console.error('Invalid aliases name for directive.');\n                    continue;\n                  } // Create directive alias.\n\n\n                  const directiveAlias = Object.assign({}, directive);\n                  directiveAlias.name = alias; // Add directive alias to lists.\n\n                  directiveAliases.push(directiveAlias);\n                  inertCount++;\n                } // Add new aliases to library.\n\n\n                library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1)); // Increment insertion offset by amount of aliases added.\n\n                insertOffset += inertCount;\n              } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n                console.error('Invalid alias name for directive.');\n              } else {\n                // Create directive alias.\n                const directiveAlias = Object.assign({}, directive);\n                directiveAlias.name = aliases; // Add alias to library.\n\n                library.addDirectives(i + insertOffset, directiveAlias); // Increment insertion offset.\n\n                insertOffset++;\n              }\n            }\n          }\n        }\n      }\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove directive aliases first.\n      if (directiveAliases) {\n        library.removeDirectives(...directiveAliases); // Forget aliases.\n\n        directiveAliases = null;\n      } // Undo name changes to directives.\n\n\n      if (directivesRenamed) {\n        // Iterate over all directives.\n        const directives = library.getDirectives();\n\n        for (let i = directives.length - 1; i >= 0; i--) {\n          const directive = directives.length[i]; // Check if directive has been renamed.\n\n          if (directive.name in directivesRenamed) {\n            // Set old name.\n            directive.name = directivesRenamed[directive.name];\n          }\n        } // Forget renames.\n\n\n        directivesRenamed = null;\n      } // Remove context aliases first.\n\n\n      if (contextAliases) {\n        library.removeContexts(...contextAliases); // Forget aliases.\n\n        contextAliases = null;\n      } // Undo name changes to contexts.\n\n\n      if (contextsRenamed) {\n        // Iterate over all contexts.\n        const contexts = library.getContexts();\n\n        for (let i = contexts.length - 1; i >= 0; i--) {\n          const context = contexts.length[i]; // Check if context has been renamed.\n\n          if (context.name in contextsRenamed) {\n            // Set old name.\n            context.name = contextsRenamed[context.name];\n          }\n        } // Forget renames.\n\n\n        contextsRenamed = null;\n      }\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
