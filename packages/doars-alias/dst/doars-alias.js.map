{
  "version": 3,
  "sources": ["../../common/src/utilities/Object.js", "../src/DoarsAlias.js"],
  "sourcesContent": ["/**\n * Deeply assign a series of objects properties together.\n * @param {Object} target Target object to merge to.\n * @param  {...Object} sources Objects to merge into the target.\n */\nexport const deepAssign = (target, ...sources) => {\n  if (!sources.length) {\n    return target\n  }\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {},\n          })\n        }\n        deepAssign(target[key], source[key])\n      } else if (Array.isArray(source[key])) {\n        target[key] = source[key].map((value) => {\n          if (isObject(value)) {\n            return deepAssign({}, value)\n          }\n          return value\n        })\n      } else {\n        Object.assign(target, {\n          [key]: source[key],\n        })\n      }\n    }\n  }\n\n  return deepAssign(target, ...sources)\n}\n\n/**\n * Get value at path on object.\n * @param {Object} object Object to get from.\n * @param  {Array<String>} path Path to value.\n * @returns {Any} value at path.\n */\nexport const getDeeply = (object, path) => {\n  let objectTemp = object\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    objectTemp = objectTemp[path[i]]\n  }\n  return objectTemp[path[i]]\n}\n\n/**\n * Check whether the value is an object.\n * @param {Any} value Value of unknown type.\n * @returns Whether the value is an object.\n */\nexport const isObject = (value) => {\n  return (value && typeof value === 'object' && !Array.isArray(value))\n}\n\n/**\n * Set value on path at object.\n * @param {Object} object Object to set on.\n * @param {Array<String>} path Path to value.\n * @param {Any} value Value to set.\n */\nexport const setDeeply = (object, path, value) => {\n  // Exit early if not an object.\n  if (typeof (object) !== 'object') {\n    return\n  }\n\n  let i = 0\n  for (; i < path.length - 1; i++) {\n    object = object[path[i]]\n\n    // Exit early if not an object.\n    if (typeof (object) !== 'object') {\n      return\n    }\n  }\n  object[path[i]] = value\n}\n\nexport default {\n  deepAssign,\n  getDeeply,\n  isObject,\n  setDeeply,\n}\n", "// Import utilities.\nimport { deepAssign } from '@doars/common/src/utilities/Object.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {Object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null\n) {\n  // Clone options.\n  options = deepAssign({}, options)\n\n  // Set private variables.\n  let isEnabled = false\n  // Store changes made to contexts and directives.\n  let contextAliases, contextsRenamed, directiveAliases, directivesRenamed\n\n  const onEnable = function () {\n    if (options.aliasContexts || options.renameContexts) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1\n\n      // Iterate over all contexts.\n      const contexts = library.getContexts()\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts[i]\n\n        if (options.renameContexts) {\n          const rename = options.renameContexts[context.name]\n          if (rename) {\n            if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for context.')\n            } else {\n              if (!contextsRenamed) {\n                contextsRenamed = {}\n              }\n\n              // Store previous name.\n              contextsRenamed[rename] = context.name\n              // Set new name.\n              context.name = rename\n            }\n          }\n        }\n\n        if (options.aliasContexts) {\n          const aliases = options.aliasContexts[context.name]\n          if (aliases) {\n            if (!contextAliases) {\n              contextAliases = []\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0\n              for (const alias of aliases) {\n                if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for context.')\n                  continue\n                }\n\n                // Create context alias.\n                const contextAlias = Object.assign({}, context)\n                contextAlias.name = alias\n                // Disable deconstruction of aliases.\n                contextAlias.deconstruct = false\n\n                // Add context alias to lists.\n                contextAliases.push(contextAlias)\n                inertCount++\n              }\n              // Add new aliases to library.\n              library.addContexts(i + insertOffset, ...contextAliases.slice(insertOffset - 1))\n\n              // Increment insertion offset by amount of aliases added.\n              insertOffset += inertCount\n            } else if (!/^[_$a-z]{1}[_$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for context.')\n            } else {\n              // Create context alias.\n              const contextAlias = Object.assign({}, context)\n              contextAlias.name = aliases\n              // Disable deconstruction of aliases.\n              contextAlias.deconstruct = false\n\n              // Add alias to library.\n              library.addContexts(i + insertOffset, contextAlias)\n\n              // Increment insertion offset.\n              insertOffset++\n            }\n          }\n        }\n      }\n    }\n\n    if (options.aliasDirectives || options.renameDirectives) {\n      // Store insert offset so aliases are added directly after the original.\n      let insertOffset = 1\n\n      // Iterate over all directives.\n      const directives = library.getDirectives()\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives[i]\n\n        if (options.renameDirectives) {\n          const rename = options.renameDirectives[directive.name]\n          if (rename) {\n            if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(rename)) {\n              console.error('Invalid rename name for directive.')\n            } else {\n              if (!directivesRenamed) {\n                directivesRenamed = {}\n              }\n\n              // Store previous name.\n              directivesRenamed[rename] = directive.name\n              // Set new name.\n              directive.name = rename\n            }\n          }\n        }\n\n        if (options.aliasDirectives) {\n          const aliases = options.aliasDirectives[directive.name]\n          if (aliases) {\n            if (!directiveAliases) {\n              directiveAliases = []\n            }\n\n            if (Array.isArray(aliases)) {\n              let inertCount = 0\n              for (const alias of aliases) {\n                if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(alias)) {\n                  console.error('Invalid aliases name for directive.')\n                  continue\n                }\n\n                // Create directive alias.\n                const directiveAlias = Object.assign({}, directive)\n                directiveAlias.name = alias\n\n                // Add directive alias to lists.\n                directiveAliases.push(directiveAlias)\n                inertCount++\n              }\n              // Add new aliases to library.\n              library.addDirectives(i + insertOffset, ...directiveAliases.slice(insertOffset - 1))\n\n              // Increment insertion offset by amount of aliases added.\n              insertOffset += inertCount\n            } else if (!/^[_\\-$a-z]{1}[_\\-$a-z0-9]{0,}$/i.test(aliases)) {\n              console.error('Invalid alias name for directive.')\n            } else {\n              // Create directive alias.\n              const directiveAlias = Object.assign({}, directive)\n              directiveAlias.name = aliases\n\n              // Add alias to library.\n              library.addDirectives(i + insertOffset, directiveAlias)\n\n              // Increment insertion offset.\n              insertOffset++\n            }\n          }\n        }\n      }\n    }\n  }\n  const onDisable = function () {\n    // Remove directive aliases first.\n    if (directiveAliases) {\n      library.removeDirectives(...directiveAliases)\n\n      // Forget aliases.\n      directiveAliases = null\n    }\n\n    // Undo name changes to directives.\n    if (directivesRenamed) {\n      // Iterate over all directives.\n      const directives = library.getDirectives()\n      for (let i = directives.length - 1; i >= 0; i--) {\n        const directive = directives.length[i]\n\n        // Check if directive has been renamed.\n        if (directive.name in directivesRenamed) {\n          // Set old name.\n          directive.name = directivesRenamed[directive.name]\n        }\n      }\n\n      // Forget renames.\n      directivesRenamed = null\n    }\n\n    // Remove context aliases first.\n    if (contextAliases) {\n      library.removeContexts(...contextAliases)\n\n      // Forget aliases.\n      contextAliases = null\n    }\n\n    // Undo name changes to contexts.\n    if (contextsRenamed) {\n      // Iterate over all contexts.\n      const contexts = library.getContexts()\n      for (let i = contexts.length - 1; i >= 0; i--) {\n        const context = contexts.length[i]\n\n        // Check if context has been renamed.\n        if (context.name in contextsRenamed) {\n          // Set old name.\n          context.name = contextsRenamed[context.name]\n        }\n      }\n\n      // Forget renames.\n      contextsRenamed = null\n    }\n  }\n\n  this.disable = function () {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = function () {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": []
}
