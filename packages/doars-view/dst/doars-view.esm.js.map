{
  "version": 3,
  "sources": ["../src/symbols.js", "../src/factories/directives/view.js", "../src/ViewObserver.js", "../src/DoarsView.js"],
  "sourcesContent": ["export const VIEW = Symbol('VIEW');", "// Import symbols.\nimport { VIEW } from '../../symbols.js'; // Declare constants.\n\nconst EXECUTION_MODIFIERS = {\n  NONE: 0,\n  BUFFER: 1,\n  DEBOUNCE: 2,\n  THROTTLE: 3\n};\nexport default (observer => {\n  return {\n    name: 'view',\n    update: (component, attribute, {\n      processExpression\n    }) => {\n      // Deconstruct attribute.\n      const element = attribute.getElement();\n      const key = attribute.getKey();\n      const value = attribute.getValue(); // Check if existing handler exists.\n\n      if (attribute[VIEW]) {\n        // Exit early if value has not changed.\n        if (attribute[VIEW].value === value) {\n          return;\n        } // Stop observing the element.\n\n\n        observer.remove(element, attribute[VIEW].handler); // Clear any ongoing timeouts.\n\n        if (attribute[VIEW].timeout) {\n          clearTimeout(attribute[VIEW].timeout);\n        } // Delete directive data.\n\n\n        delete attribute[VIEW];\n      } // Deconstruct attribute.\n\n\n      const modifiers = attribute.getModifiers(); // Process execution modifiers.\n\n      let executionModifier = EXECUTION_MODIFIERS.NONE;\n\n      if (modifiers.buffer) {\n        executionModifier = EXECUTION_MODIFIERS.BUFFER;\n\n        if (modifiers.buffer === true) {\n          modifiers.buffer = 5;\n        }\n      } else if (modifiers.debounce) {\n        executionModifier = EXECUTION_MODIFIERS.DEBOUNCE;\n\n        if (modifiers.debounce === true) {\n          modifiers.debounce = 500;\n        }\n      } else if (modifiers.throttle) {\n        executionModifier = EXECUTION_MODIFIERS.THROTTLE;\n\n        if (modifiers.throttle === true) {\n          modifiers.throttle = 500;\n        }\n      } // Create intersection handler.\n\n\n      const handler = event => {\n        // Check if intersection has changed.\n        const isChanged = attribute[VIEW].isIntersecting !== event.isIntersecting;\n\n        if (!isChanged) {\n          return;\n        } // Update state in attribute data.\n\n\n        attribute[VIEW].isIntersecting = event.isIntersecting; // Exit early if expression should not be executed.\n\n        if (key === 'enter' && !event.isIntersecting || key === 'leave' && event.isIntersecting) {\n          // Clear existing timeout.\n          if (attribute[VIEW].timeout) {\n            clearTimeout(attribute[VIEW].timeout);\n            attribute[VIEW].timeout = null;\n          }\n\n          return;\n        }\n\n        const execute = () => {\n          // Execute value using a copy of the attribute since this attribute should not update based on what contexts will be accessed.\n          processExpression(component, attribute.clone(), value, {\n            $event: event\n          }, {\n            return: false\n          }); // Reset the buffer.\n\n          attribute[VIEW].buffer = [];\n        }; // Store event in buffer.\n\n\n        attribute[VIEW].buffer.push(event); // Check if we need to apply an execution modifier.\n\n        if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n          // Exit early if buffer is not full.\n          if (attribute[VIEW].buffer.length < modifiers.buffer) {\n            return;\n          }\n\n          execute();\n        } else if (executionModifier === EXECUTION_MODIFIERS.BUFFER) {\n          // Clear existing timeout.\n          if (attribute[VIEW].timeout) {\n            clearTimeout(attribute[VIEW].timeout);\n            attribute[VIEW].timeout = null;\n          } // Setup timeout and execute expression when it finishes.\n\n\n          attribute[VIEW].timeout = setTimeout(execute, modifiers.debounce);\n        } else if (executionModifier === EXECUTION_MODIFIERS.THROTTLE) {\n          // Get current time in milliseconds.\n          const now = window.performance.now(); // Exit early if throttle time has not passed.\n\n          if (attribute[VIEW].lastExecution && now - attribute[VIEW].lastExecution < modifiers.throttle) {\n            return;\n          }\n\n          execute(); // Store new latest execution time.\n\n          attribute[VIEW].lastExecution = now;\n        } else {\n          // Execute expression.\n          execute();\n        }\n      }; // Start observing the element.\n\n\n      observer.add(element, handler); // Store handler.\n\n      attribute[VIEW] = {\n        buffer: [],\n        handler: handler,\n        isIntersecting: false,\n        timeout: attribute[VIEW] ? attribute[VIEW].timeout : null,\n        value: value\n      };\n    },\n    destroy: (component, attribute) => {\n      // Check if a handler exists.\n      if (!attribute[VIEW]) {\n        return;\n      } // Deconstruct attribute.\n\n\n      const element = attribute.getElement(); // Stop observing the element.\n\n      observer.remove(element, attribute[VIEW].handler); // Clear any ongoing timeouts.\n\n      if (attribute[VIEW].timeout) {\n        clearTimeout(attribute[VIEW].timeout);\n      } // Delete directive data.\n\n\n      delete attribute[VIEW];\n    }\n  };\n});", "export default class ViewObserver {\n  /**\n   * Create observer instance.\n   * @param {Object} options Intersection observer options.\n   */\n  constructor(options = null) {\n    // Overwrite default options.\n    options = Object.assign({\n      root: null,\n      rootMargin: '0px',\n      threshold: 0\n    }, options); // Store data per element.\n\n    const items = new WeakMap();\n    /**\n     * Intersection observer handler.\n     * @param {Array<IntersectionObserverEntry>} entries Intersection observer entries.\n     */\n\n    const intersect = entries => {\n      // Invoke callbacks of each entry.\n      for (const entry of entries) {\n        for (const callback of items.get(entry.target)) {\n          callback(entry);\n        }\n      }\n    }; // Create intersection observer.\n\n\n    const intersectionObserver = new IntersectionObserver(intersect, options);\n    /**\n     * Add element to observe.\n     * @param {HTMLElement} element Element to observer.\n     * @param {Function} callback Callback to call on intersection change.\n     */\n\n    this.add = (element, callback) => {\n      // Add callback to list.\n      if (!items.has(element)) {\n        items.set(element, []);\n      }\n\n      items.get(element).push(callback); // Start observing element.\n\n      intersectionObserver.observe(element);\n    };\n    /**\n     * Remove element from observing.\n     * @param {HTMLElement} element Element that is observed.\n     * @param {Function} callback Callback that is called on intersection change.\n     */\n\n\n    this.remove = (element, callback) => {\n      // Remove callback from list.\n      if (!items.has(element)) {\n        return;\n      }\n\n      const list = items.get(element);\n      const index = list.indexOf(callback);\n\n      if (index >= 0) {\n        list.splice(index, 1);\n      } // Check if there are no more callbacks.\n\n\n      if (list.length === 0) {\n        // Remove element from callbacks list.\n        items.delete(element); // Stop observing element.\n\n        intersectionObserver.unobserve(element);\n      }\n    };\n  }\n\n}", "// Import directives.\nimport createDirectiveView from './factories/directives/view.js'; // Import observer.\n\nimport ViewObserver from './ViewObserver.js';\nexport default class DoarsView {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    // Store options.\n    options = Object.assign({}, options); // Set private variables.\n\n    let directiveView, observer; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      // Overwrite default options.\n      const _options = Object.assign({}, options);\n\n      if (!_options.root) {\n        _options.root = library.getOptions().root;\n      } // Setup observer.\n\n\n      observer = new ViewObserver(options); // Create and add directive.\n\n      directiveView = createDirectiveView(observer);\n      library.addDirectives(-1, directiveView);\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove directive.\n      library.removeDirectives(directiveView);\n      directiveView = null; // Remove observer.\n\n      observer = null;\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
