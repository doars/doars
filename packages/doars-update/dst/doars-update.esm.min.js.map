{
  "version": 3,
  "sources": ["../src/contexts/update.js", "../src/directives/update.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../src/Updater.js", "../src/DoarsUpdate.js"],
  "sourcesContent": ["export default (\n  {\n    updateContextName,\n  },\n  updater,\n) => {\n  // Deconstruct updater.\n  const id = updater.getId()\n  const proxy = updater.getProxy()\n  const time = updater.getTime()\n\n  return {\n    name: updateContextName,\n\n    create: (\n      component,\n      attribute,\n    ) => {\n      // Create event handlers.\n      const onGet = (\n        target,\n        path,\n      ) => attribute.accessed(id, path.join('.'))\n\n      // Add event listeners.\n      proxy.addEventListener('get', onGet)\n\n      return {\n        value: time,\n\n        // Remove event listeners.\n        destroy: (\n        ) => {\n          proxy.removeEventListener('get', onGet)\n        },\n      }\n    },\n  }\n}\n", "export default ({\n  defaultOrder,\n  updateDirectiveName,\n}) => {\n  // Create list of update directives.\n  const itemIds = []\n  const items = []\n\n  const directive = {\n    name: updateDirectiveName,\n\n    update: (\n      component,\n      attribute,\n      processExpression,\n    ) => {\n      // Store execute expression locally.\n      if (!directive._execute) {\n        directive._execute = processExpression\n      }\n\n      // Deconstruct attribute.\n      const id = attribute.getId()\n\n      // Exit early if already in list.\n      if (itemIds.indexOf(id) >= 0) {\n        return\n      }\n\n      // Deconstruct attribute.\n      let { order } = attribute.getModifiers()\n      if (!order) {\n        order = defaultOrder\n      }\n\n      // Get index to place item at based on order.\n      let index = 0\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].order >= order) {\n          index = i\n          break\n        }\n      }\n\n      // Add item at index in list.\n      items.splice(index, 0, {\n        attribute,\n        component,\n        order,\n      })\n    },\n\n    destroy: (\n      component,\n      attribute,\n    ) => {\n      // Deconstruct attribute.\n      const id = attribute.getId()\n\n      // Exit early if already in list.\n      const index = itemIds.indexOf(id)\n      if (index >= 0) {\n        return\n      }\n\n      // Remove attribute id from item ids list.\n      itemIds.splice(index, 1)\n\n      // Remove attribute from items list.\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].attribute === attribute) {\n          // Remove item from list.\n          items.splice(i, 1)\n          break\n        }\n      }\n    },\n  }\n\n  return [\n    directive,\n    () => {\n      // Run expression of each item in order.\n      for (const item of items) {\n        directive._execute(\n          item.component,\n          item.attribute.clone(),\n          item.attribute.getValue(),\n          {},\n          {\n            return: false,\n          },\n        )\n      }\n    },\n  ]\n}\n", "/**\n * Function to call to revoke the proxy.\n * @callback RevocableProxyCallback\n */\n\n/**\n * @typedef RevocableProxy\n * @type {object}\n * @property {Proxy} proxy Proxy that will be revocable.\n * @property {RevocableProxyCallback} revoke Function to call to revoke the proxy.\n */\n\n/**\n * Function called when a proxy has been handled.\n * @callback ProxyHandlerCallback\n */\n\n/**\n * @typedef ProxyHandler\n * @type {object}\n * @property {?ProxyHandlerCallback} apply A trap method for a function call.\n * @property {?ProxyHandlerCallback} construct A trap for the `new` operator.\n * @property {?ProxyHandlerCallback} defineProperty A trap for `Object.defineProperty()`.\n * @property {?ProxyHandlerCallback} deleteProperty A trap for the `delete` operator.\n * @property {?ProxyHandlerCallback} get A trap for getting a property value.\n * @property {?ProxyHandlerCallback} getOwnPropertyDescriptor A trap for `Object.getOwnPropertyDescriptor()`.\n * @property {?ProxyHandlerCallback} getPrototypeOf A trap for the `[[GetPrototypeOf]]` internal method.\n * @property {?ProxyHandlerCallback} has A trap for the `in` operator.\n * @property {?ProxyHandlerCallback} isExtensible A trap for `Object.isExtensible()`.\n * @property {?ProxyHandlerCallback} ownKeys A trap for `Reflect.ownKeys()`.\n * @property {?ProxyHandlerCallback} preventExtensions A trap for `Object.preventExtensions()`.\n * @property {?ProxyHandlerCallback} set A trap for setting a property value.\n * @property {?ProxyHandlerCallback} setPrototypeOf A trap for `Object.setPrototypeOf()`.\n */\n\n// List of methods to revoke access to.\nconst PROXY_TRAPS = [\n  'apply',\n  'construct',\n  'defineProperty',\n  'deleteProperty',\n  'get',\n  'getOwnPropertyDescriptor',\n  'getPrototypeOf',\n  'has',\n  'isExtensible',\n  'ownKeys',\n  'preventExtensions',\n  'set',\n  'setPrototypeOf',\n]\n\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n * @param {object} target Object to proxy.\n * @param {ProxyHandler} handler Object of handler methods.\n * @returns {?RevocableProxy} Proxy object and revoke method.\n */\nexport default (\n  target,\n  handler,\n) => {\n  // Keep track of status.\n  let revoked = false\n\n  // Add revocable handlers for each given handlers.\n  /**\n   * Copy of allowed handlers with a revocable layer in between.\n   * @type {ProxyHandler}\n   */\n  const revocableHandler = {}\n  for (const key of PROXY_TRAPS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        return\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters)\n      }\n      return Reflect[key](...parameters)\n    }\n  }\n\n  // Return proxy and revoke method.\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true\n    },\n  }\n}\n", "/**\n * @typedef EventListenerOptions\n * @type {object}\n * @property {?boolean} once Whether to call the listener only once.\n */\n\n/**\n * @typedef DispatchEventOptions\n * @type {object}\n * @property {?boolean} reverse Whether to call the listeners in reverse order.\n */\n\nexport default class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor(\n  ) {\n    /**\n     * Object to store event listeners for the EventDispatcher class.\n     * @type {Record<string, Array<{callback: Function, options: EventListenerOptions }>>}\n     */\n    let events = {}\n\n    /**\n     * Add callback to event.\n     * @param {string} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {EventListenerOptions} options Callback options.\n     */\n    this.addEventListener = (\n      name,\n      callback,\n      options = null,\n    ) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = []\n      }\n\n      // Add to events.\n      events[name].push({\n        callback,\n        options,\n      })\n    }\n\n    /**\n     * Remove callback from event.\n     * @param {string} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n    this.removeEventListener = (\n      name,\n      callback,\n    ) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return\n      }\n      const eventData = events[name]\n\n      // Get index of callback in events.\n      let index = -1\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i\n          break\n        }\n      }\n      if (index < 0) {\n        return\n      }\n\n      // Remove item from events.\n      eventData.splice(index, 1)\n\n      // Remove event if list is empty.\n      if (Object.keys(eventData).length === 0) {\n        delete events[name]\n      }\n    }\n\n    /**\n     * Remove listeners to an event.\n     * @param {string} name Event name.\n     */\n    this.removeEventListeners = (\n      name,\n    ) => {\n      if (!name) {\n        return\n      }\n\n      // Remove all handlers with the event name.\n      delete events[name]\n    }\n\n    /**\n     * Remove all listeners.\n     */\n    this.removeAllEventListeners = (\n    ) => {\n      // Remove all listeners.\n      events = {}\n    }\n\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {string} name Event name.\n     * @param {Array<any>} parameters Event parameters to pass through.\n     * @param {DispatchEventOptions} options Dispatch options.\n     */\n    this.dispatchEvent = (\n      name,\n      parameters,\n      options = null,\n    ) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return\n      }\n      // Get events by trigger name.\n      const eventData = events[name]\n\n      // Dispatch a call to each event.\n      for (let i = 0; i < eventData.length; i++) {\n        const event = (options && options.reverse) ? eventData[eventData.length - (i + 1)] : eventData[i]\n\n        // If once is truthy then remove the callback.\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1)\n        }\n\n        // Execute callback.\n        event.callback(...parameters)\n      }\n    }\n  }\n}\n", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'\n\n// Import event dispatcher.\nimport EventDispatcher from './EventDispatcher.js'\n\n/**\n * @typedef ProxyOptions\n * @type {object}\n * @property {?boolean} delete Whether to dispatch an event on delete.\n * @property {?boolean} get Whether to dispatch an event on get.\n * @property {?boolean} set Whether to dispatch an event on set.\n */\n\nexport default class ProxyDispatcher extends EventDispatcher {\n  /**\n   * Creates a proxy dispatcher instance.\n   * @param {ProxyOptions} options Options for proxy dispatcher.\n   */\n  constructor(\n    options = {},\n  ) {\n    super()\n\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true,\n    }, options)\n\n    // Setup WeakMap for keep track of created proxies.\n    const map = new WeakMap()\n\n    /**\n     * Add object to start keeping track of it.\n     * @param {object} target Object that is being kept track of.\n     * @param {Array<string>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n    this.add = (\n      target,\n      path = [],\n    ) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target)\n      }\n\n      // Recursively create proxies for each property.\n      for (const key in target) {\n        if (target[key] && typeof (target[key]) === 'object') {\n          target[key] = this.add(target[key], [...path, key])\n        }\n      }\n\n      // Create handler and add the handler for which a callback exits..\n      const handler = {}\n\n      if (options.delete) {\n        handler.deleteProperty = (\n          target,\n          key,\n        ) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true\n          }\n\n          // Remove proxy.\n          this.remove(target, key)\n\n          // Delete property.\n          const deleted = Reflect.deleteProperty(target, key)\n\n          // Dispatch delete event.\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]])\n          }\n\n          // Return deleted.\n          return deleted\n        }\n      }\n\n      if (options.get) {\n        handler.get = (\n          target,\n          key,\n          receiver,\n        ) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver])\n          }\n\n          // Return value from object.\n          return Reflect.get(target, key, receiver)\n        }\n      }\n\n      if (options.set) {\n        handler.set = (\n          target,\n          key,\n          value,\n          receiver,\n        ) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof value === 'object') {\n            value = this.add(value, [...path, key])\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver])\n\n          // Return success.\n          return true\n        }\n      }\n\n      // Create proxy.\n      const revocable = RevocableProxy(target, handler)\n\n      // Store target at proxy.\n      map.set(revocable, target)\n\n      // Return proxy.\n      return revocable.proxy\n    }\n\n    /**\n     * Remove object from being kept track of.\n     * @param {object} target Object that is being kept track of.\n     */\n    this.remove = (\n      target,\n    ) => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return\n      }\n\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          this.remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n}\n", "// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'\n\n/**\n * @callback UpdateCallback\n */\n\nexport default class Updater {\n  /**\n   * @param {object} options Updater options.\n   * @param {number} options.stepMinimum Minimum duration of a tick in milliseconds.\n   * @param {UpdateCallback} callback Called every update tick.\n   */\n  constructor(\n    {\n      stepMinimum,\n    },\n    callback,\n  ) {\n    // Create id.\n    const id = Symbol('ID_UPDATE')\n\n    // Set private variables.\n    let isEnabled = false, request\n\n    // Setup time proxy.\n    const proxy = new ProxyDispatcher({\n      // We don't care when they are updated, we have a callback for that. They should never be updated by the user anyway.\n      delete: false,\n      set: false,\n    })\n    const time = proxy.add({})\n\n    /**\n     * @param {number} timeAbsolute timestamp in milliseconds.\n     */\n    const update = (\n      timeAbsolute,\n    ) => {\n      // Exit if not enabled any more.\n      if (!isEnabled) {\n        return\n      }\n\n      // Request to be updated next frame.\n      request = window.requestAnimationFrame(update)\n\n      // Set initial time values.\n      if (!time.startMs) {\n        time.currentMs = time.lastMs = time.startMs = timeAbsolute\n        time.current = time.last = time.start = timeAbsolute / 1000\n        time.delta = time.passed = time.deltaMs = time.passedMs = 0\n\n        // Exit early after initial update.\n        return\n      }\n\n      // Check if minimum time has been elapsed.\n      const deltaMs = timeAbsolute - time.lastMs\n      if (deltaMs <= stepMinimum) {\n        return\n      }\n\n      // Update time values.\n      time.lastMs = time.currentMs\n      time.last = time.current\n      time.currentMs = timeAbsolute\n      time.current = timeAbsolute / 1000\n      time.deltaMs = deltaMs\n      time.delta = deltaMs / 1000\n      time.passedMs += deltaMs // Adding the delta could introduce drift because we are not measuring from the start time, hover doing so would case issues if the updater is disabled and later on re-enabled. Due to the high precession the drift will only cause a noticeable effect after a long time, long enough to not cause a problem in most use cases. Long story short, good enough.\n      time.passed = time.passedMs / 1000\n\n      // Invoke callback.\n      callback()\n    }\n\n    /**\n     * Get whether the instance is enabled.\n     * @returns {boolean} Whether the instance is enabled.\n     */\n    this.isEnabled = () => {\n      return isEnabled\n    }\n\n    /**\n     * Get updater id.\n     * @returns {symbol} Unique identifier.\n     */\n    this.getId = () => {\n      return id\n    }\n\n    /**\n     * Get time proxy.\n     * @returns {ProxyDispatcher} Time proxy.\n     */\n    this.getProxy = () => {\n      return proxy\n    }\n\n    /**\n     * Get time data.\n     * @returns {Proxy} Time data.\n     */\n    this.getTime = () => {\n      return time\n    }\n\n    /**\n     * Enable updater.\n     */\n    this.enable = () => {\n      if (isEnabled) {\n        return\n      }\n      isEnabled = true\n\n      // Start update loop.\n      request = window.requestAnimationFrame(update)\n    }\n\n    /**\n     * Disable updater.\n     */\n    this.disable = () => {\n      if (!isEnabled) {\n        return\n      }\n      isEnabled = false\n\n      // Stop updating.\n      if (request) {\n        cancelAnimationFrame(request)\n        request = null\n      }\n    }\n  }\n}\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n */\n\nimport createUpdateContext from './contexts/update.js'\nimport createUpdateDirective from './directives/update.js'\nimport Updater from './Updater.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    defaultOrder: 500,\n    stepMinimum: 0,\n    updateContextName: '$update',\n    updateDirectiveName: 'update',\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n  // Setup update loop.\n  const updater = new Updater(\n    options,\n    () => {\n      // Update all directives.\n      update()\n\n      // Dispatch update triggers.\n      library.update([{\n        id: updater.getId(),\n        path: 'current',\n      }, {\n        id: updater.getId(),\n        path: 'delta',\n      }, {\n        id: updater.getId(),\n        path: 'last',\n      }, {\n        id: updater.getId(),\n        path: 'passed',\n      }])\n    },\n  )\n  const contextUpdate = createUpdateContext(options, updater)\n  const [directiveUpdate, update] = createUpdateDirective(options)\n\n  const onEnable = (\n  ) => {\n    // Add contexts and directives.\n    library.addContexts(0, contextUpdate)\n    library.addDirectives(-1, directiveUpdate)\n    // Enable updater.\n    updater.enable()\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove contexts and directives.\n    library.removeContexts(contextUpdate)\n    library.removeDirectives(directiveUpdate)\n    // Disable updater.\n    updater.disable()\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n"],
  "mappings": "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",
  "names": ["update_default", "updateContextName", "updater", "id", "proxy", "time", "component", "attribute", "onGet", "target", "path", "update_default", "defaultOrder", "updateDirectiveName", "itemIds", "items", "directive", "component", "attribute", "processExpression", "id", "order", "index", "i", "item", "PROXY_TRAPS", "RevocableProxy_default", "target", "handler", "revoked", "revocableHandler", "key", "parameters", "EventDispatcher", "events", "name", "callback", "options", "eventData", "index", "i", "parameters", "event", "ProxyDispatcher", "EventDispatcher", "options", "map", "target", "path", "key", "handler", "deleted", "receiver", "value", "revocable", "RevocableProxy_default", "property", "Updater", "stepMinimum", "callback", "id", "isEnabled", "request", "proxy", "ProxyDispatcher", "time", "update", "timeAbsolute", "deltaMs", "DoarsUpdate_default", "library", "options", "isEnabled", "updater", "Updater", "update", "contextUpdate", "update_default", "directiveUpdate", "onEnable", "onDisable"]
}
