{
  "version": 3,
  "sources": ["../src/contexts/update.js", "../src/directives/update.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../src/Updater.js", "../src/DoarsUpdate.js", "../src/DoarsUpdate.iife.js"],
  "sourcesContent": ["export default (\n  {\n    updateContextName,\n  },\n  updater,\n) => {\n  // Deconstruct updater.\n  const id = updater.getId()\n  const proxy = updater.getProxy()\n  const time = updater.getTime()\n\n  return {\n    name: updateContextName,\n\n    create: (\n      component,\n      attribute,\n    ) => {\n      // Create event handlers.\n      const onGet = (\n        target,\n        path,\n      ) => attribute.accessed(id, path.join('.'))\n\n      // Add event listeners.\n      proxy.addEventListener('get', onGet)\n\n      return {\n        value: time,\n\n        // Remove event listeners.\n        destroy: (\n        ) => {\n          proxy.removeEventListener('get', onGet)\n        },\n      }\n    },\n  }\n}\n", "export default ({\n  defaultOrder,\n  updateDirectiveName,\n}) => {\n  // Create list of update directives.\n  const itemIds = []\n  const items = []\n\n  const directive = {\n    name: updateDirectiveName,\n\n    update: (\n      component,\n      attribute,\n      processExpression,\n    ) => {\n      // Store execute expression locally.\n      if (!directive._execute) {\n        directive._execute = processExpression\n      }\n\n      // Deconstruct attribute.\n      const id = attribute.getId()\n\n      // Exit early if already in list.\n      if (itemIds.indexOf(id) >= 0) {\n        return\n      }\n\n      // Deconstruct attribute.\n      let { order } = attribute.getModifiers()\n      if (!order) {\n        order = defaultOrder\n      }\n\n      // Get index to place item at based on order.\n      let index = 0\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].order >= order) {\n          index = i\n          break\n        }\n      }\n\n      // Add item at index in list.\n      items.splice(index, 0, {\n        attribute,\n        component,\n        order,\n      })\n    },\n\n    destroy: (\n      component,\n      attribute,\n    ) => {\n      // Deconstruct attribute.\n      const id = attribute.getId()\n\n      // Exit early if already in list.\n      const index = itemIds.indexOf(id)\n      if (index >= 0) {\n        return\n      }\n\n      // Remove attribute id from item ids list.\n      itemIds.splice(index, 1)\n\n      // Remove attribute from items list.\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].attribute === attribute) {\n          // Remove item from list.\n          items.splice(i, 1)\n          break\n        }\n      }\n    },\n  }\n\n  return [\n    directive,\n    () => {\n      // Run expression of each item in order.\n      for (const item of items) {\n        directive._execute(\n          item.component,\n          item.attribute.clone(),\n          item.attribute.getValue(),\n          {},\n          {\n            return: false,\n          },\n        )\n      }\n    },\n  ]\n}\n", "/**\n * Function to call to revoke the proxy.\n * @callback RevocableProxyCallback\n */\n\n/**\n * @typedef RevocableProxy\n * @type {object}\n * @property {Proxy} proxy Proxy that will be revocable.\n * @property {RevocableProxyCallback} revoke Function to call to revoke the proxy.\n */\n\n/**\n * Function called when a proxy has been handled.\n * @callback ProxyHandlerCallback\n */\n\n/**\n * @typedef ProxyHandler\n * @type {object}\n * @property {?ProxyHandlerCallback} apply A trap method for a function call.\n * @property {?ProxyHandlerCallback} construct A trap for the `new` operator.\n * @property {?ProxyHandlerCallback} defineProperty A trap for `Object.defineProperty()`.\n * @property {?ProxyHandlerCallback} deleteProperty A trap for the `delete` operator.\n * @property {?ProxyHandlerCallback} get A trap for getting a property value.\n * @property {?ProxyHandlerCallback} getOwnPropertyDescriptor A trap for `Object.getOwnPropertyDescriptor()`.\n * @property {?ProxyHandlerCallback} getPrototypeOf A trap for the `[[GetPrototypeOf]]` internal method.\n * @property {?ProxyHandlerCallback} has A trap for the `in` operator.\n * @property {?ProxyHandlerCallback} isExtensible A trap for `Object.isExtensible()`.\n * @property {?ProxyHandlerCallback} ownKeys A trap for `Reflect.ownKeys()`.\n * @property {?ProxyHandlerCallback} preventExtensions A trap for `Object.preventExtensions()`.\n * @property {?ProxyHandlerCallback} set A trap for setting a property value.\n * @property {?ProxyHandlerCallback} setPrototypeOf A trap for `Object.setPrototypeOf()`.\n */\n\n// List of methods to revoke access to.\nconst PROXY_TRAPS = [\n  'apply',\n  'construct',\n  'defineProperty',\n  'deleteProperty',\n  'get',\n  'getOwnPropertyDescriptor',\n  'getPrototypeOf',\n  'has',\n  'isExtensible',\n  'ownKeys',\n  'preventExtensions',\n  'set',\n  'setPrototypeOf',\n]\n\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n * @param {object} target Object to proxy.\n * @param {ProxyHandler} handler Object of handler methods.\n * @returns {?RevocableProxy} Proxy object and revoke method.\n */\nexport default (\n  target,\n  handler,\n) => {\n  // Keep track of status.\n  let revoked = false\n\n  // Add revocable handlers for each given handlers.\n  /**\n   * Copy of allowed handlers with a revocable layer in between.\n   * @type {ProxyHandler}\n   */\n  const revocableHandler = {}\n  for (const key of PROXY_TRAPS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        return\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters)\n      }\n      return Reflect[key](...parameters)\n    }\n  }\n\n  // Return proxy and revoke method.\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true\n    },\n  }\n}\n", "/**\n * @typedef EventListenerOptions\n * @type {object}\n * @property {?boolean} once Whether to call the listener only once.\n */\n\n/**\n * @typedef DispatchEventOptions\n * @type {object}\n * @property {?boolean} reverse Whether to call the listeners in reverse order.\n */\n\nexport default class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor(\n  ) {\n    /**\n     * Object to store event listeners for the EventDispatcher class.\n     * @type {Record<string, Array<{callback: Function, options: EventListenerOptions }>>}\n     */\n    let events = {}\n\n    /**\n     * Add callback to event.\n     * @param {string} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {EventListenerOptions} options Callback options.\n     */\n    this.addEventListener = (\n      name,\n      callback,\n      options = null,\n    ) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = []\n      }\n\n      // Add to events.\n      events[name].push({\n        callback,\n        options,\n      })\n    }\n\n    /**\n     * Remove callback from event.\n     * @param {string} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n    this.removeEventListener = (\n      name,\n      callback,\n    ) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return\n      }\n      const eventData = events[name]\n\n      // Get index of callback in events.\n      let index = -1\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i\n          break\n        }\n      }\n      if (index < 0) {\n        return\n      }\n\n      // Remove item from events.\n      eventData.splice(index, 1)\n\n      // Remove event if list is empty.\n      if (Object.keys(eventData).length === 0) {\n        delete events[name]\n      }\n    }\n\n    /**\n     * Remove listeners to an event.\n     * @param {string} name Event name.\n     */\n    this.removeEventListeners = (\n      name,\n    ) => {\n      if (!name) {\n        return\n      }\n\n      // Remove all handlers with the event name.\n      delete events[name]\n    }\n\n    /**\n     * Remove all listeners.\n     */\n    this.removeAllEventListeners = (\n    ) => {\n      // Remove all listeners.\n      events = {}\n    }\n\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {string} name Event name.\n     * @param {Array<any>} parameters Event parameters to pass through.\n     * @param {DispatchEventOptions} options Dispatch options.\n     */\n    this.dispatchEvent = (\n      name,\n      parameters,\n      options = null,\n    ) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return\n      }\n      // Get events by trigger name.\n      const eventData = events[name]\n\n      // Dispatch a call to each event.\n      for (let i = 0; i < eventData.length; i++) {\n        const event = (options && options.reverse) ? eventData[eventData.length - (i + 1)] : eventData[i]\n\n        // If once is truthy then remove the callback.\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1)\n        }\n\n        // Execute callback.\n        event.callback(...parameters)\n      }\n    }\n  }\n}\n", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'\n\n// Import event dispatcher.\nimport EventDispatcher from './EventDispatcher.js'\n\n/**\n * @typedef ProxyOptions\n * @type {object}\n * @property {?boolean} delete Whether to dispatch an event on delete.\n * @property {?boolean} get Whether to dispatch an event on get.\n * @property {?boolean} set Whether to dispatch an event on set.\n */\n\nexport default class ProxyDispatcher extends EventDispatcher {\n  /**\n   * Creates a proxy dispatcher instance.\n   * @param {ProxyOptions} options Options for proxy dispatcher.\n   */\n  constructor(\n    options = {},\n  ) {\n    super()\n\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true,\n    }, options)\n\n    // Setup WeakMap for keep track of created proxies.\n    const map = new WeakMap()\n\n    /**\n     * Add object to start keeping track of it.\n     * @param {object} target Object that is being kept track of.\n     * @param {Array<string>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n    this.add = (\n      target,\n      path = [],\n    ) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target)\n      }\n\n      // Recursively create proxies for each property.\n      for (const key in target) {\n        if (target[key] && typeof (target[key]) === 'object') {\n          target[key] = this.add(target[key], [...path, key])\n        }\n      }\n\n      // Create handler and add the handler for which a callback exits..\n      const handler = {}\n\n      if (options.delete) {\n        handler.deleteProperty = (\n          target,\n          key,\n        ) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true\n          }\n\n          // Remove proxy.\n          this.remove(target, key)\n\n          // Delete property.\n          const deleted = Reflect.deleteProperty(target, key)\n\n          // Dispatch delete event.\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]])\n          }\n\n          // Return deleted.\n          return deleted\n        }\n      }\n\n      if (options.get) {\n        handler.get = (\n          target,\n          key,\n          receiver,\n        ) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver])\n          }\n\n          // Return value from object.\n          return Reflect.get(target, key, receiver)\n        }\n      }\n\n      if (options.set) {\n        handler.set = (\n          target,\n          key,\n          value,\n          receiver,\n        ) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof value === 'object') {\n            value = this.add(value, [...path, key])\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver])\n\n          // Return success.\n          return true\n        }\n      }\n\n      // Create proxy.\n      const revocable = RevocableProxy(target, handler)\n\n      // Store target at proxy.\n      map.set(revocable, target)\n\n      // Return proxy.\n      return revocable.proxy\n    }\n\n    /**\n     * Remove object from being kept track of.\n     * @param {object} target Object that is being kept track of.\n     */\n    this.remove = (\n      target,\n    ) => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return\n      }\n\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          this.remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n}\n", "// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js'\n\n/**\n * @callback UpdateCallback\n */\n\nexport default class Updater {\n  /**\n   * @param {object} options Updater options.\n   * @param {number} options.stepMinimum Minimum duration of a tick in milliseconds.\n   * @param {UpdateCallback} callback Called every update tick.\n   */\n  constructor(\n    {\n      stepMinimum,\n    },\n    callback,\n  ) {\n    // Create id.\n    const id = Symbol('ID_UPDATE')\n\n    // Set private variables.\n    let isEnabled = false, request\n\n    // Setup time proxy.\n    const proxy = new ProxyDispatcher({\n      // We don't care when they are updated, we have a callback for that. They should never be updated by the user anyway.\n      delete: false,\n      set: false,\n    })\n    const time = proxy.add({})\n\n    /**\n     * @param {number} timeAbsolute timestamp in milliseconds.\n     */\n    const update = (\n      timeAbsolute,\n    ) => {\n      // Exit if not enabled any more.\n      if (!isEnabled) {\n        return\n      }\n\n      // Request to be updated next frame.\n      request = window.requestAnimationFrame(update)\n\n      // Set initial time values.\n      if (!time.startMs) {\n        time.currentMs = time.lastMs = time.startMs = timeAbsolute\n        time.current = time.last = time.start = timeAbsolute / 1000\n        time.delta = time.passed = time.deltaMs = time.passedMs = 0\n\n        // Exit early after initial update.\n        return\n      }\n\n      // Check if minimum time has been elapsed.\n      const deltaMs = timeAbsolute - time.lastMs\n      if (deltaMs <= stepMinimum) {\n        return\n      }\n\n      // Update time values.\n      time.lastMs = time.currentMs\n      time.last = time.current\n      time.currentMs = timeAbsolute\n      time.current = timeAbsolute / 1000\n      time.deltaMs = deltaMs\n      time.delta = deltaMs / 1000\n      time.passedMs += deltaMs // Adding the delta could introduce drift because we are not measuring from the start time, hover doing so would case issues if the updater is disabled and later on re-enabled. Due to the high precession the drift will only cause a noticeable effect after a long time, long enough to not cause a problem in most use cases. Long story short, good enough.\n      time.passed = time.passedMs / 1000\n\n      // Invoke callback.\n      callback()\n    }\n\n    /**\n     * Get whether the instance is enabled.\n     * @returns {boolean} Whether the instance is enabled.\n     */\n    this.isEnabled = () => {\n      return isEnabled\n    }\n\n    /**\n     * Get updater id.\n     * @returns {symbol} Unique identifier.\n     */\n    this.getId = () => {\n      return id\n    }\n\n    /**\n     * Get time proxy.\n     * @returns {ProxyDispatcher} Time proxy.\n     */\n    this.getProxy = () => {\n      return proxy\n    }\n\n    /**\n     * Get time data.\n     * @returns {Proxy} Time data.\n     */\n    this.getTime = () => {\n      return time\n    }\n\n    /**\n     * Enable updater.\n     */\n    this.enable = () => {\n      if (isEnabled) {\n        return\n      }\n      isEnabled = true\n\n      // Start update loop.\n      request = window.requestAnimationFrame(update)\n    }\n\n    /**\n     * Disable updater.\n     */\n    this.disable = () => {\n      if (!isEnabled) {\n        return\n      }\n      isEnabled = false\n\n      // Stop updating.\n      if (request) {\n        cancelAnimationFrame(request)\n        request = null\n      }\n    }\n  }\n}\n", "/**\n * @typedef {import('@doars/doars').default} Doars\n */\n\nimport createUpdateContext from './contexts/update.js'\nimport createUpdateDirective from './directives/update.js'\nimport Updater from './Updater.js'\n\n/**\n * Create plugin instance.\n * @param {Doars} library Doars instance to add onto.\n * @param {object} options The plugin options.\n */\nexport default function (\n  library,\n  options = null,\n) {\n  // Clone options.\n  options = Object.assign({\n    defaultOrder: 500,\n    stepMinimum: 0,\n    updateContextName: '$update',\n    updateDirectiveName: 'update',\n  }, options)\n\n  // Set private variables.\n  let isEnabled = false\n  // Setup update loop.\n  const updater = new Updater(\n    options,\n    () => {\n      // Update all directives.\n      update()\n\n      // Dispatch update triggers.\n      library.update([{\n        id: updater.getId(),\n        path: 'current',\n      }, {\n        id: updater.getId(),\n        path: 'delta',\n      }, {\n        id: updater.getId(),\n        path: 'last',\n      }, {\n        id: updater.getId(),\n        path: 'passed',\n      }])\n    },\n  )\n  const contextUpdate = createUpdateContext(options, updater)\n  const [directiveUpdate, update] = createUpdateDirective(options)\n\n  const onEnable = (\n  ) => {\n    // Add contexts and directives.\n    library.addContexts(0, contextUpdate)\n    library.addDirectives(-1, directiveUpdate)\n    // Enable updater.\n    updater.enable()\n  }\n\n  const onDisable = (\n  ) => {\n    // Remove contexts and directives.\n    library.removeContexts(contextUpdate)\n    library.removeDirectives(directiveUpdate)\n    // Disable updater.\n    updater.disable()\n  }\n\n  this.disable = (\n  ) => {\n    // Check if library is disabled.\n    if (!library.getEnabled() && isEnabled) {\n      isEnabled = false\n\n      // Stop listening to enable state of the library.\n      library.removeEventListener('enabling', onEnable)\n      library.removeEventListener('disabling', onDisable)\n    }\n  }\n\n  this.enable = (\n  ) => {\n    if (!isEnabled) {\n      isEnabled = true\n\n      // Listen to enable state of the library.\n      library.addEventListener('enabling', onEnable)\n      library.addEventListener('disabling', onDisable)\n    }\n  }\n\n  // Automatically enable plugin.\n  this.enable()\n}\n", "import DoarsUpdate from './DoarsUpdate.js'\n\nwindow.DoarsUpdate = DoarsUpdate\n"],
  "mappings": "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",
  "names": ["update_default", "target", "update_default"]
}
