{
  "version": 3,
  "sources": ["../src/factories/contexts/createUpdate.js", "../src/factories/directives/createUpdate.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../src/Updater.js", "../src/DoarsUpdate.js"],
  "sourcesContent": ["export default (updater => {\n  // Deconstruct updater.\n  const id = updater.getId();\n  const proxy = updater.getProxy();\n  const time = updater.getTime();\n  return {\n    name: '$update',\n    create: (component, attribute) => {\n      // Create event handlers.\n      const onGet = (target, path) => attribute.accessed(id, path.join('.')); // Add event listeners.\n\n\n      proxy.addEventListener('get', onGet);\n      return {\n        value: time,\n        // Remove event listeners.\n        destroy: () => {\n          proxy.removeEventListener('get', onGet);\n        }\n      };\n    }\n  };\n});", "export default (options => {\n  // Overwrite default options.\n  options = Object.assign({\n    defaultOrder: 500\n  }, options); // Create list of update directives.\n\n  const itemIds = [];\n  const items = [];\n  const directive = {\n    name: 'update',\n    update: function (component, attribute, {\n      processExpression\n    }) {\n      // Store execute expression locally.\n      if (!this._execute) {\n        this._execute = processExpression;\n      } // Deconstruct attribute.\n\n\n      const id = attribute.getId(); // Exit early if already in list.\n\n      if (itemIds.indexOf(id) >= 0) {\n        return;\n      } // Deconstruct attribute.\n\n\n      let {\n        order\n      } = attribute.getModifiers();\n\n      if (!order) {\n        order = options.defaultOrder;\n      } // Get index to place item at based on order.\n\n\n      let index = 0;\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].order >= order) {\n          index = i;\n          break;\n        }\n      } // Add item at index in list.\n\n\n      items.splice(index, 0, {\n        attribute: attribute,\n        component: component,\n        order: order\n      });\n    },\n    destroy: (component, attribute) => {\n      // Deconstruct attribute.\n      const id = attribute.getId(); // Exit early if already in list.\n\n      const index = itemIds.indexOf(id);\n\n      if (index >= 0) {\n        return;\n      } // Remove attribute id from item ids list.\n\n\n      itemIds.splice(index, 1); // Remove attribute from items list.\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].attribute === attribute) {\n          // Remove item from list.\n          items.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n  return [directive, () => {\n    // Run expression of each item in order.\n    for (const item of items) {\n      directive._execute(item.component, item.attribute.clone(), item.attribute.getValue(), {}, {\n        return: false\n      });\n    }\n  }];\n});", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = ['apply', 'construct', 'defineProperty', 'deleteProperty', 'get', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf'];\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\n\nexport default ((target, handler) => {\n  // Keep track of status.\n  let revoked = false; // Add revocable handlers for each given handlers.\n\n  const revocableHandler = {};\n\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy');\n        return;\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters);\n      }\n\n      return Reflect[key](...parameters);\n    };\n  } // Return proxy and revoke method.\n\n\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true;\n    }\n  };\n});", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {};\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = [];\n      } // Add to events.\n\n\n      events[name].push({\n        callback: callback,\n        options: options\n      });\n    };\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n\n\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return;\n      }\n\n      const eventData = events[name]; // Get index of callback in events.\n\n      let index = -1;\n\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        return;\n      } // Remove item from events.\n\n\n      eventData.splice(index, 1); // Remove event if list is empty.\n\n      if (Object.keys(eventData).length === 0) {\n        delete events[name];\n      }\n    };\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeEventListeners = name => {\n      if (!name) {\n        return;\n      } // Remove all handlers with the event name.\n\n\n      delete events[name];\n    };\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {};\n    };\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n\n\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return;\n      } // Get events by trigger name.\n\n\n      const eventData = events[name]; // Dispatch a call to each event.\n\n      for (let i = 0; i < eventData.length; i++) {\n        const event = options && options.reverse ? eventData[eventData.length - (i + 1)] : eventData[i]; // If once is truthy then remove the callback.\n\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1);\n        } // Execute callback.\n\n\n        event.callback(...parameters);\n      }\n    };\n  }\n\n}\n\nexport default EventDispatcher;", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'; // Import event dispatcher.\n\nimport EventDispatcher from './EventDispatcher.js';\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super();\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true\n    }, options); // Setup WeakMap for keep track of created proxies.\n\n    const map = new WeakMap();\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target);\n      } // Recursively create proxies for each property.\n\n\n      for (const key in target) {\n        if (target[key] && typeof target[key] === 'object') {\n          target[key] = this.add(target[key], [...path, key]);\n        }\n      } // Create handler and add the handler for which a callback exits..\n\n\n      const handler = {};\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true;\n          } // Remove proxy.\n\n\n          this.remove(target, key); // Delete property.\n\n          const deleted = Reflect.deleteProperty(target, key); // Dispatch delete event.\n\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]]);\n          } // Return deleted.\n\n\n          return deleted;\n        };\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver]);\n          } // Return value from object.\n\n\n          return Reflect.get(target, key, receiver);\n        };\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true;\n          } // Add proxy if value is an object.\n\n\n          if (typeof value === 'object') {\n            value = this.add(value, [...path, key]);\n          } // Store value.\n\n\n          target[key] = value; // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver]); // Return success.\n\n          return true;\n        };\n      } // Create proxy.\n\n\n      const revocable = RevocableProxy(target, handler); // Store target at proxy.\n\n      map.set(revocable, target); // Return proxy.\n\n      return revocable.proxy;\n    };\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n\n\n    this.remove = target => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return;\n      }\n\n      const revocable = map.get(target);\n      map.delete(revocable); // Recursively remove properties as well.\n\n      for (const property in revocable.proxy) {\n        if (typeof revocable.proxy[property] === 'object') {\n          this.remove(revocable.proxy[property]);\n        }\n      } // Revoke proxy.\n\n\n      revocable.revoke();\n    };\n  }\n\n}\n\nexport default ProxyDispatcher;", "// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js';\nexport default class Updater {\n  constructor(options, callback) {\n    // Overwrite default options.\n    options = Object.assign({\n      stepMinimum: 0\n    }, options); // Create id.\n\n    const id = Symbol('ID_UPDATE'); // Set private variables.\n\n    let isEnabled = false,\n        request; // Setup time proxy.\n\n    const proxy = new ProxyDispatcher({\n      // We don't care when they are updated, we have a callback for that. They should never be updated by the user anyway.\n      delete: false,\n      set: false\n    });\n    const time = proxy.add({});\n\n    const update = timeAbsolute => {\n      // Exit if not enabled any more.\n      if (!isEnabled) {\n        return;\n      } // Request to be updated next frame.\n\n\n      request = window.requestAnimationFrame(update); // Set initial time values.\n\n      if (!time.startMs) {\n        time.currentMs = time.lastMs = time.startMs = timeAbsolute;\n        time.current = time.last = time.start = timeAbsolute / 1000;\n        time.delta = time.passed = time.deltaMs = time.passedMs = 0; // Exit early after initial update.\n\n        return;\n      } // Check if minimum time has been elapsed.\n\n\n      const deltaMs = timeAbsolute - time.lastMs;\n\n      if (deltaMs <= options.stepMinimum) {\n        return;\n      } // Update time values.\n\n\n      time.lastMs = time.currentMs;\n      time.last = time.current;\n      time.currentMs = timeAbsolute;\n      time.current = timeAbsolute / 1000;\n      time.deltaMs = deltaMs;\n      time.delta = deltaMs / 1000;\n      time.passedMs += deltaMs; // Adding the delta could introduce drift because we are not measuring from the start time, hover doing so would case issues if the updater is disabled and later on re-enabled. Due to the high precession the drift will only cause a noticeable effect after a long time, long enough to not cause a problem in most use cases. Long story short, good enough.\n\n      time.passed = time.passedMs / 1000; // Invoke callback.\n\n      callback();\n    };\n    /**\n     * Get whether the instance is enabled.\n     * @returns {Bool} Whether the instance is enabled.\n     */\n\n\n    this.isEnabled = () => {\n      return isEnabled;\n    };\n    /**\n     * Get updater id.\n     * @returns {Symbol} Unique identifier.\n     */\n\n\n    this.getId = () => {\n      return id;\n    };\n    /**\n     * Get time proxy.\n     * @returns {ProxyDispatcher} Time proxy.\n     */\n\n\n    this.getProxy = () => {\n      return proxy;\n    };\n    /**\n     * Get time data.\n     * @returns {Proxy} Time data.\n     */\n\n\n    this.getTime = () => {\n      return time;\n    };\n    /**\n     * Enable updater.\n     */\n\n\n    this.enable = () => {\n      if (isEnabled) {\n        return;\n      }\n\n      isEnabled = true; // Start update loop.\n\n      request = window.requestAnimationFrame(update);\n    };\n    /**\n     * Disable updater.\n     */\n\n\n    this.disable = () => {\n      if (!isEnabled) {\n        return;\n      }\n\n      isEnabled = false; // Stop updating.\n\n      if (request) {\n        cancelAnimationFrame(request);\n        request = null;\n      }\n    };\n  }\n\n}", "// Import contexts.\nimport createContextUpdate from './factories/contexts/createUpdate.js'; // Import directives.\n\nimport createDirectiveUpdate from './factories/directives/createUpdate.js'; // Import updater.\n\nimport Updater from './Updater.js';\nexport default class DoarsUpdate {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    options = Object.assign({}, options); // Set private variables.\n\n    let contextUpdate, directiveUpdate, updater; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      // Create and add directive.\n      const [_directiveUpdate, update] = createDirectiveUpdate(options);\n      directiveUpdate = _directiveUpdate;\n      library.addDirectives(-1, directiveUpdate); // Setup update loop.\n\n      updater = new Updater(options, () => {\n        // Update all directives.\n        update(); // Dispatch update triggers.\n\n        library.update([{\n          id: updater.getId(),\n          path: 'current'\n        }, {\n          id: updater.getId(),\n          path: 'delta'\n        }, {\n          id: updater.getId(),\n          path: 'last'\n        }, {\n          id: updater.getId(),\n          path: 'passed'\n        }]);\n      }); // Create and add context.\n\n      contextUpdate = createContextUpdate(updater);\n      library.addContexts(0, contextUpdate); // Enable updater.\n\n      updater.enable();\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove context.\n      library.removeContexts(contextUpdate); // Remove directive.\n\n      library.removeDirectives(directiveUpdate); // Disable updater.\n\n      updater.disable(); // Reset private variables.\n\n      contextUpdate = null;\n      directiveUpdate = null;\n      updater = null;\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
