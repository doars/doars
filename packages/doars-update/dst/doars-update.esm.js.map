{
  "version": 3,
  "sources": ["../src/factories/contexts/createUpdate.js", "../src/factories/directives/createUpdate.js", "../../common/src/polyfills/RevocableProxy.js", "../../common/src/events/EventDispatcher.js", "../../common/src/events/ProxyDispatcher.js", "../src/Updater.js", "../src/DoarsUpdate.js"],
  "sourcesContent": ["export default (updater => {\n  // Deconstruct updater.\n  const id = updater.getId();\n  const proxy = updater.getProxy();\n  const time = updater.getTime();\n  return {\n    name: '$update',\n    create: (component, attribute) => {\n      // Create event handlers.\n      const onGet = (target, path) => attribute.accessed(id, path.join('.')); // Add event listeners.\n\n\n      proxy.addEventListener('get', onGet);\n      return {\n        value: time,\n        // Remove event listeners.\n        destroy: () => {\n          proxy.removeEventListener('get', onGet);\n        }\n      };\n    }\n  };\n});", "export default (options => {\n  // Overwrite default options.\n  options = Object.assign({\n    defaultOrder: 500\n  }, options); // Create list of update directives.\n\n  const itemIds = [];\n  const items = [];\n  const directive = {\n    name: 'update',\n    update: function (component, attribute, {\n      processExpression\n    }) {\n      // Store execute expression locally.\n      if (!this._execute) {\n        this._execute = processExpression;\n      } // Deconstruct attribute.\n\n\n      const id = attribute.getId(); // Exit early if already in list.\n\n      if (itemIds.indexOf(id) >= 0) {\n        return;\n      } // Deconstruct attribute.\n\n\n      let {\n        order\n      } = attribute.getModifiers();\n\n      if (!order) {\n        order = options.defaultOrder;\n      } // Get index to place item at based on order.\n\n\n      let index = 0;\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].order >= order) {\n          index = i;\n          break;\n        }\n      } // Add item at index in list.\n\n\n      items.splice(index, 0, {\n        attribute: attribute,\n        component: component,\n        order: order\n      });\n    },\n    destroy: (component, attribute) => {\n      // Deconstruct attribute.\n      const id = attribute.getId(); // Exit early if already in list.\n\n      const index = itemIds.indexOf(id);\n\n      if (index >= 0) {\n        return;\n      } // Remove attribute id from item ids list.\n\n\n      itemIds.splice(index, 1); // Remove attribute from items list.\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].attribute === attribute) {\n          // Remove item from list.\n          items.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n  return [directive, () => {\n    // Run expression of each item in order.\n    for (const item of items) {\n      directive._execute(item.component, item.attribute.clone(), item.attribute.getValue(), {}, {\n        return: false\n      });\n    }\n  }];\n});", "// List of methods to revoke access to.\nconst REFLECTION_METHODS = ['apply', 'construct', 'defineProperty', 'deleteProperty', 'get', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf'];\n/**\n * Revocable proxy made using regular a proxy and a simple boolean.\n */\n\nexport default ((target, handler) => {\n  // Keep track of status.\n  let revoked = false; // Add revocable handlers for each given handlers.\n\n  const revocableHandler = {};\n\n  for (const key of REFLECTION_METHODS) {\n    revocableHandler[key] = (...parameters) => {\n      if (revoked) {\n        console.error('illegal operation attempted on a revoked proxy');\n        return;\n      }\n\n      if (key in handler) {\n        return handler[key](...parameters);\n      }\n\n      return Reflect[key](...parameters);\n    };\n  } // Return proxy and revoke method.\n\n\n  return {\n    proxy: new Proxy(target, revocableHandler),\n    revoke: () => {\n      revoked = true;\n    }\n  };\n});", "class EventDispatcher {\n  /**\n   * Create instance.\n   */\n  constructor() {\n    let events = {};\n    /**\n     * Add callback to event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function to call on dispatch.\n     * @param {Object} options Callback options.\n     */\n\n    this.addEventListener = (name, callback, options = null) => {\n      // Check if event name exits and callback is not already present.\n      if (!(name in events)) {\n        events[name] = [];\n      } // Add to events.\n\n\n      events[name].push({\n        callback: callback,\n        options: options\n      });\n    };\n    /**\n     * Remove callback from event.\n     * @param {String} name Event name.\n     * @param {Function} callback Function that would be called.\n     */\n\n\n    this.removeEventListener = (name, callback) => {\n      // Check if event exists.\n      if (!Object.keys(events).includes(name)) {\n        return;\n      }\n\n      const eventData = events[name]; // Get index of callback in events.\n\n      let index = -1;\n\n      for (let i = 0; i < eventData.length; i++) {\n        if (eventData[i].callback === callback) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        return;\n      } // Remove item from events.\n\n\n      eventData.splice(index, 1); // Remove event if list is empty.\n\n      if (Object.keys(eventData).length === 0) {\n        delete events[name];\n      }\n    };\n    /**\n     * Remove listeners to an event.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeEventListeners = name => {\n      if (!name) {\n        return;\n      } // Remove all handlers with the event name.\n\n\n      delete events[name];\n    };\n    /**\n     * Remove all listeners.\n     * @param {String} name Event name.\n     */\n\n\n    this.removeAllEventListeners = () => {\n      // Remove all listeners.\n      events = {};\n    };\n    /**\n     * Trigger event and dispatch data to listeners.\n     * @param {String} name Event name.\n     * @param {Array<Any>} parameters Event parameters to pass through.\n     * @param {Object} options Dispatch options.\n     */\n\n\n    this.dispatchEvent = (name, parameters, options = null) => {\n      // Check if event exists.\n      if (!events[name]) {\n        return;\n      } // Get events by trigger name.\n\n\n      const eventData = events[name]; // Dispatch a call to each event.\n\n      for (let i = 0; i < eventData.length; i++) {\n        const event = options && options.reverse ? eventData[eventData.length - (i + 1)] : eventData[i]; // If once is truthy then remove the callback.\n\n        if (event.options && event.options.once) {\n          eventData.splice(i, 1);\n        } // Execute callback.\n\n\n        event.callback(...parameters);\n      }\n    };\n  }\n\n}\n\nexport default EventDispatcher;", "// Import polyfill.\nimport RevocableProxy from '../polyfills/RevocableProxy.js'; // Import event dispatcher.\n\nimport EventDispatcher from './EventDispatcher.js';\n\nclass ProxyDispatcher extends EventDispatcher {\n  constructor(options = {}) {\n    super();\n    options = Object.assign({\n      delete: true,\n      get: true,\n      set: true\n    }, options); // Setup WeakMap for keep track of created proxies.\n\n    const map = new WeakMap();\n    /**\n     * Add object to start keeping track of it.\n     * @param {Object} target Object that is being kept track of.\n     * @param {Array<String>} path Path of object on optional parent object, used for recursion.\n     * @returns {Proxy} Object to access and mutate.\n     */\n\n    this.add = (target, path = []) => {\n      // Exit early if proxy already exists.\n      if (map.has(target)) {\n        return map.get(target);\n      } // Recursively create proxies for each property.\n\n\n      for (const key in target) {\n        if (target[key] && typeof target[key] === 'object') {\n          target[key] = this.add(target[key], [...path, key]);\n        }\n      } // Create handler and add the handler for which a callback exits..\n\n\n      const handler = {};\n\n      if (options.delete) {\n        handler.deleteProperty = (target, key) => {\n          // Exit early successful if property doesn't exist.\n          if (!Reflect.has(target, key)) {\n            return true;\n          } // Remove proxy.\n\n\n          this.remove(target, key); // Delete property.\n\n          const deleted = Reflect.deleteProperty(target, key); // Dispatch delete event.\n\n          if (deleted) {\n            this.dispatchEvent('delete', [target, Array.isArray(target) ? [...path] : [...path, key]]);\n          } // Return deleted.\n\n\n          return deleted;\n        };\n      }\n\n      if (options.get) {\n        handler.get = (target, key, receiver) => {\n          // Dispatch get event.\n          if (key !== Symbol.unscopables) {\n            this.dispatchEvent('get', [target, [...path, key], receiver]);\n          } // Return value from object.\n\n\n          return Reflect.get(target, key, receiver);\n        };\n      }\n\n      if (options.set) {\n        handler.set = (target, key, value, receiver) => {\n          // Exit early if not changed.\n          if (target[key] === value) {\n            return true;\n          } // Add proxy if value is an object.\n\n\n          if (typeof value === 'object') {\n            value = this.add(value, [...path, key]);\n          } // Store value.\n\n\n          target[key] = value; // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n\n          this.dispatchEvent('set', [target, Array.isArray(target) ? [...path] : [...path, key], value, receiver]); // Return success.\n\n          return true;\n        };\n      } // Create proxy.\n\n\n      const revocable = RevocableProxy(target, handler); // Store target at proxy.\n\n      map.set(revocable, target); // Return proxy.\n\n      return revocable.proxy;\n    };\n    /**\n     * Remove object from being kept track of.\n     * @param {Object} target Object that is being kept track of.\n     */\n\n\n    this.remove = target => {\n      // Remove target from the map.\n      if (!map.has(target)) {\n        return;\n      }\n\n      const revocable = map.get(target);\n      map.delete(revocable); // Recursively remove properties as well.\n\n      for (const property in revocable.proxy) {\n        if (typeof revocable.proxy[property] === 'object') {\n          this.remove(revocable.proxy[property]);\n        }\n      } // Revoke proxy.\n\n\n      revocable.revoke();\n    };\n  }\n\n}\n\nexport default ProxyDispatcher;", "// Import proxy dispatcher.\nimport ProxyDispatcher from '@doars/common/src/events/ProxyDispatcher.js';\nexport default class Updater {\n  constructor(options, callback) {\n    // Overwrite default options.\n    options = Object.assign({\n      stepMinimum: 0\n    }, options); // Create id.\n\n    const id = Symbol('ID_UPDATE'); // Set private variables.\n\n    let isEnabled = false,\n        request; // Setup time proxy.\n\n    const proxy = new ProxyDispatcher({\n      // We don't care when they are updated, we have a callback for that. They should never be updated by the user anyway.\n      delete: false,\n      set: false\n    });\n    const time = proxy.add({});\n\n    const update = timeAbsolute => {\n      // Exit if not enabled any more.\n      if (!isEnabled) {\n        return;\n      } // Request to be updated next frame.\n\n\n      request = window.requestAnimationFrame(update); // Set initial time values.\n\n      if (!time.startMs) {\n        time.currentMs = time.lastMs = time.startMs = timeAbsolute;\n        time.current = time.last = time.start = timeAbsolute / 1000;\n        time.delta = time.passed = time.deltaMs = time.passedMs = 0; // Exit early after initial update.\n\n        return;\n      } // Check if minimum time has been elapsed.\n\n\n      const deltaMs = timeAbsolute - time.lastMs;\n\n      if (deltaMs <= options.stepMinimum) {\n        return;\n      } // Update time values.\n\n\n      time.lastMs = time.currentMs;\n      time.last = time.current;\n      time.currentMs = timeAbsolute;\n      time.current = timeAbsolute / 1000;\n      time.deltaMs = deltaMs;\n      time.delta = deltaMs / 1000;\n      time.passedMs += deltaMs; // Adding the delta could introduce drift because we are not measuring from the start time, hover doing so would case issues if the updater is disabled and later on re-enabled. Due to the high precession the drift will only cause a noticeable effect after a long time, long enough to not cause a problem in most use cases. Long story short, good enough.\n\n      time.passed = time.passedMs / 1000; // Invoke callback.\n\n      callback();\n    };\n    /**\n     * Get whether the instance is enabled.\n     * @returns {Bool} Whether the instance is enabled.\n     */\n\n\n    this.isEnabled = () => {\n      return isEnabled;\n    };\n    /**\n     * Get updater id.\n     * @returns {Symbol} Unique identifier.\n     */\n\n\n    this.getId = () => {\n      return id;\n    };\n    /**\n     * Get time proxy.\n     * @returns {ProxyDispatcher} Time proxy.\n     */\n\n\n    this.getProxy = () => {\n      return proxy;\n    };\n    /**\n     * Get time data.\n     * @returns {Proxy} Time data.\n     */\n\n\n    this.getTime = () => {\n      return time;\n    };\n    /**\n     * Enable updater.\n     */\n\n\n    this.enable = () => {\n      if (isEnabled) {\n        return;\n      }\n\n      isEnabled = true; // Start update loop.\n\n      request = window.requestAnimationFrame(update);\n    };\n    /**\n     * Disable updater.\n     */\n\n\n    this.disable = () => {\n      if (!isEnabled) {\n        return;\n      }\n\n      isEnabled = false; // Stop updating.\n\n      if (request) {\n        cancelAnimationFrame(request);\n        request = null;\n      }\n    };\n  }\n\n}", "// Import contexts.\nimport createContextUpdate from './factories/contexts/createUpdate.js'; // Import directives.\n\nimport createDirectiveUpdate from './factories/directives/createUpdate.js'; // Import updater.\n\nimport Updater from './Updater.js';\nexport default class DoarsUpdate {\n  /**\n   * Create plugin instance.\n   * @param {Doars} library Doars instance to add onto.\n   * @param {Object} options The plugin options.\n   */\n  constructor(library, options = null) {\n    options = Object.assign({}, options); // Set private variables.\n\n    let contextUpdate, directiveUpdate, updater; // Enable plugin when library is enabling.\n\n    library.addEventListener('enabling', () => {\n      // Create and add directive.\n      const [_directiveUpdate, update] = createDirectiveUpdate(options);\n      directiveUpdate = _directiveUpdate;\n      library.addDirectives(-1, directiveUpdate); // Setup update loop.\n\n      updater = new Updater(options, () => {\n        // Update all directives.\n        update(); // Dispatch update triggers.\n\n        library.update([{\n          id: updater.getId(),\n          path: 'current'\n        }, {\n          id: updater.getId(),\n          path: 'delta'\n        }, {\n          id: updater.getId(),\n          path: 'last'\n        }, {\n          id: updater.getId(),\n          path: 'passed'\n        }]);\n      }); // Create and add context.\n\n      contextUpdate = createContextUpdate(updater);\n      library.addContexts(0, contextUpdate); // Enable updater.\n\n      updater.enable();\n    }); // Disable plugin when library is disabling.\n\n    library.addEventListener('disabling', () => {\n      // Remove context.\n      library.removeContexts(contextUpdate); // Remove directive.\n\n      library.removeDirectives(directiveUpdate); // Disable updater.\n\n      updater.disable(); // Reset private variables.\n\n      contextUpdate = null;\n      directiveUpdate = null;\n      updater = null;\n    });\n  }\n\n}"],
  "mappings": "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",
  "names": []
}
